{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/eventflow.css","path":"css/eventflow.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/post_clock.css","path":"css/post_clock.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/post_drag.css","path":"css/post_drag.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/post_yinyang.css","path":"css/post_yinyang.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/GitHub.png","path":"img/GitHub.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/eventflow.svg","path":"img/eventflow.svg","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/eventflow.png","path":"img/eventflow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/eventflow.js","path":"js/eventflow.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/particles.json","path":"js/particles.json","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/particles.min.js","path":"js/particles.min.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/post_clock.js","path":"js/post_clock.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/post_drag.js","path":"js/post_drag.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1490341508000},{"_id":"themes/yelee/README.md","hash":"052a9debfddb265c8d334bbdc26302d61f6a692f","modified":1490341508000},{"_id":"themes/yelee/_config.yml","hash":"5d024300943a3601930be22f367c38e6ef05a1b7","modified":1490341508000},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1490341508000},{"_id":"source/_posts/2015-01-16-tai-ji-yin-yang-tu.markdown","hash":"fa9693be897750996c8533b27632a345d348e4da","modified":1490341508000},{"_id":"source/_posts/2015-01-16-css3clock.markdown","hash":"b8dc1ff6516e5d6aa25bd67e9c96cdb91f0d3278","modified":1490341508000},{"_id":"source/_posts/2015-01-15-my-first-blog.markdown","hash":"3ba59507db167661a08e97a50d47c29924b2d6ff","modified":1490341508000},{"_id":"source/_posts/2016-03-30-js拖拽实现.md","hash":"40af8f54c42a69d3190a3d6133c93ba196f4aeb0","modified":1490341508000},{"_id":"source/_posts/2016-04-03-事件模型.md","hash":"561c5e03aa6582bf08240c3a058d2ab9e12ccea9","modified":1490341508000},{"_id":"source/_posts/2016-04-04-理解javascript中的this.md","hash":"ba13bea7a1e5fb3b30bb9952a0f840b0d6f54c65","modified":1490341508000},{"_id":"source/_posts/2016-04-21-函数柯里化(转).md","hash":"671aca9dbbe65848bee1a8379032bb0836292cca","modified":1490341508000},{"_id":"source/_posts/2016-04-21-原生ajax.md","hash":"303a1b73b7a72fd846e5750638f8dbabab0d82ac","modified":1490341508000},{"_id":"source/_posts/2016-05-04-js依赖注入.md","hash":"9b185f32a2f9645e2c9fdd13ee81a54c71121467","modified":1490341508000},{"_id":"source/_posts/2016-06-15-跨域和jsonp.md","hash":"50fe5cb070bd503ec4838aad24210e912d00e8c6","modified":1490341508000},{"_id":"source/_posts/2016-07-01-Github-Gitlab多账户SSH-Key切换.md","hash":"4298286c05fd52c504a1e8a03ff94a2982a8e798","modified":1490341508000},{"_id":"source/_posts/2016-06-16-打字动画.md","hash":"d6f02437a57ce2e20f7df08530160f633bbdc77d","modified":1490341508000},{"_id":"source/_posts/2017-03-24-js多维数组扁平化.md","hash":"ee2aa4ae0ce94b21b8409e92a2313366c201cfa7","modified":1490341508000},{"_id":"source/_posts/2017-03-25-箭头函数与普通函数的区别.md","hash":"22830142b6ae79d95e2abaacd69f6e81994d8270","modified":1490378619000},{"_id":"source/tags/index.md","hash":"dfa0c8ab141379637925633b5a434298137a94e6","modified":1490341508000},{"_id":"source/about/index.md","hash":"201404374554567c4bf7dffd9193f47261513b21","modified":1490341508000},{"_id":"themes/yelee/languages/en.yml","hash":"d94c285d0cf7e637ea9aff79da9859919f068b79","modified":1490341508000},{"_id":"themes/yelee/languages/default.yml","hash":"2253fb0d03c963384b3f525fe151b79ba03809b7","modified":1490341508000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"ba77fd1aa6708f22eb710a4dfaa0e76b722311e7","modified":1490341508000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"0c9645ba8c59a6e66837dacaddee0433e096832d","modified":1490341508000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"5165fac060a84319a72f1633b66bfc0073cdbf81","modified":1490341508000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1490341508000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1490341508000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1490341508000},{"_id":"themes/yelee/layout/layout.ejs","hash":"7694b9f933af1660f0ded928b3edb248f45d837c","modified":1490341508000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490341508000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490341508000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1490341508000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"392108cdd1cd9a0e3eb98a583f5bd3b0ea386055","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"e453440dc3ca068fe220809c2386742534bcf734","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"4cc5ed767999230dc337ba790e73e4e2c45104b5","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"9b87bc61f029c30bd3fa2112936639c7d913ee92","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"e045f237b2434592be4d9a64ffab298bcf023be7","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"929416483de539cc0c94410d923258838b4c508b","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"8e14f5a3fb03d93ee2e5dcb0c26903f365518be1","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"e9bb15f7b3e3d7fbbbcac8df462584141f97bcd7","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"bfc245d99cca8e325f7c34b985a769ff780f28a6","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"de8774db289e973d71898b660e11a8f94a2674bd","modified":1490341508000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1490341508000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1490341508000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1490341508000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1490341508000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1490341508000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1490341508000},{"_id":"themes/yelee/source/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1490341508000},{"_id":"themes/yelee/source/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1490341508000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1490341508000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"06102e525ff5722411ecc059da29ec1652d3ea4b","modified":1490341508000},{"_id":"themes/yelee/source/css/eventflow.css","hash":"cd81c1afd54f042f77019bc652d0cd875079b955","modified":1490341508000},{"_id":"themes/yelee/source/css/post_clock.css","hash":"3fefa2895aa29e20cdb498cc9f73c0971cb20a0c","modified":1490341508000},{"_id":"themes/yelee/source/css/post_drag.css","hash":"b2becdf03c948de643a0d307c92e24a1fbf2d603","modified":1490341508000},{"_id":"themes/yelee/source/css/post_yinyang.css","hash":"b94cd6f93b388b6e312b309de00095185dde86b2","modified":1490341508000},{"_id":"themes/yelee/source/css/style.styl","hash":"c7e0461510b872b124fee10020ac7ee8da3c5a67","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1490341508000},{"_id":"themes/yelee/source/img/GitHub.png","hash":"08c955a91b6733bd51913b54c69fe742d546d0ec","modified":1490341508000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"52bd4ddf6df129b6958398b21fa370f17cadb428","modified":1490341508000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"58be3c981c6d25b47ddaab2f254838f9baa01d59","modified":1490341508000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"9adab6af95db9318e980c01cadbc5de800b4c816","modified":1490341508000},{"_id":"themes/yelee/source/img/eventflow.svg","hash":"c49141f75e224e038ad808655c369a190f11d1fb","modified":1490341508000},{"_id":"themes/yelee/source/img/eventflow.png","hash":"014db00dc9533428ac87ba26784bb912304e89a2","modified":1490341508000},{"_id":"themes/yelee/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1490341508000},{"_id":"themes/yelee/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1490341508000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1490341508000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"c9fb558158f491104fd8dbafc92c30591ad0299e","modified":1490341508000},{"_id":"themes/yelee/source/img/知乎.png","hash":"50e43bad8fefb3950b13dc86aaa86de8a79432ae","modified":1490341508000},{"_id":"themes/yelee/source/img/简书.png","hash":"bfe5e7b6146de19d180f36fa5a2b074c2bc23406","modified":1490341508000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"8bc2a2e2c4312ee9d4879b24f9e2bd51e6436840","modified":1490341508000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"d3ff836d5d58e10fb30fac1bae0aae34cfe2038f","modified":1490341508000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"9f4798298548727052fa6ae809933c9e8ac42571","modified":1490341508000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1490341508000},{"_id":"themes/yelee/source/js/eventflow.js","hash":"00f7e17204287fd960b43a3befb31c2242406879","modified":1490341508000},{"_id":"themes/yelee/source/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1490341508000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1490341508000},{"_id":"themes/yelee/source/js/jquery.lazyload.js","hash":"91d5acc31d0bcbdf4782166a66344e58fff28d89","modified":1490341508000},{"_id":"themes/yelee/source/js/main.js","hash":"4fc2fd9ac5dd57e706f0ebb070e3ad2ca1191965","modified":1490341508000},{"_id":"themes/yelee/source/js/mobile.js","hash":"230339073c37202d953b2895856551d8ccb1b19a","modified":1490341508000},{"_id":"themes/yelee/source/js/particles.json","hash":"9ab5c0298a2376c14c0a8d0a02e234c3698cc886","modified":1490341508000},{"_id":"themes/yelee/source/js/particles.min.js","hash":"7c7eb721a431b87b1c2f60f177c03c22814167a5","modified":1490341508000},{"_id":"themes/yelee/source/js/pc.js","hash":"c648ad0049c06395e42510b4f8559de7ae53ff53","modified":1490341508000},{"_id":"themes/yelee/source/js/post_clock.js","hash":"9bd66fc3677ab868304248c85f0f9cdc3be0df97","modified":1490341508000},{"_id":"themes/yelee/source/js/post_drag.js","hash":"4a70326525e8c208833a8cb273b02750adce9269","modified":1490341508000},{"_id":"themes/yelee/source/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1490341508000},{"_id":"themes/yelee/source/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"1f9ac8182fe0b867a8f1988888336c40c25894cd","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"a6853b59ee60e775de1ed90b242084f83774d195","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"2a8d8198f6c8058bd0edc3d73c5df0833febf0f9","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1490341508000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"053c1684b6edaca7fa0c94a7f9fca637ccece2c2","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"21c532f24a2e90af158310e38060cf0e9ae62de0","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"2277125ef35f96a1ba76a1b84fc570526826453d","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"6d535e646def5083e6c6e10a138a744d7d007c38","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"5fb8fbc168974cf3e43bab0413e41c1ec0c345d3","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"211a4286f60751c372090fa96f384521e2ce352c","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"8148239181328426b56fb8ebb54c17fb1aaa889a","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"3cfc59278c21b504f8f633e08767a449e03af8d0","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"85540c10503e0fb250b307ca3966583ee70e63f3","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1490341508000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1490341508000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1490341508000},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1490341508000},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1490341508000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1490341508000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1490341508000},{"_id":"themes/yelee/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1490341508000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1490341508000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1490341508000},{"_id":"themes/yelee/source/img/avatar.png","hash":"deebc66530e13a97f1c61dfee9f35289a2ca76cc","modified":1490845350000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5d14ba8efac7a0f1ffd5bc8924fcfdb7294bc918","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"69a77b9f7b8e84df7ae1c78e76659a92739b79a9","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"aedbcd697c9fbaeeb93c068be3db771c41feba0d","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"2f3e9c3a08c7693ba1787db0c4af8a3fd98d696a","modified":1490341508000},{"_id":"themes/yelee/source/css/_partial/post/youyan.styl","hash":"ac2869e2e0fb3a1ee0df4b0c0a233a2b1923ea20","modified":1490341508000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1490341508000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1490341508000},{"_id":"public/archives/2015/index.html","hash":"e738525333b621dd42a0ac76e40e8b2e0a210047","modified":1490845535009},{"_id":"public/archives/2015/01/index.html","hash":"f1a8432b998a5cb590711c501dd05ac08cff7b96","modified":1490845535009},{"_id":"public/archives/2016/03/index.html","hash":"e4c10ac92f8b13957d58b590e2f7189f22fde40d","modified":1490845535009},{"_id":"public/archives/2016/05/index.html","hash":"c1fcd7022e6c640bd848cee1ddcb199a5e632afb","modified":1490845535010},{"_id":"public/archives/2016/06/index.html","hash":"4591a44852dfe0544d9f028afce3f9558ffab1de","modified":1490845535010},{"_id":"public/archives/2016/07/index.html","hash":"87a7f002a3e4f195de352f158eea90b9356305fb","modified":1490845535010},{"_id":"public/archives/2017/index.html","hash":"9a56aa2411b8c65e1f1896b30dc813f385ad0a9d","modified":1490845535010},{"_id":"public/archives/2017/03/index.html","hash":"f02acc1f2105441c91488e34c1561a1734bf4bcb","modified":1490845535010},{"_id":"public/categories/tool-config/index.html","hash":"fc4014dad9ea68692c629e1ac0cde0dee3d6ac42","modified":1490845535010},{"_id":"public/categories/js/index.html","hash":"6ff59dd3be3e41fa09a263638193cd9e70031458","modified":1490845535010},{"_id":"public/tags/Event/index.html","hash":"9c8a3b87abe29baa5d2f086da9683ab9527b4e34","modified":1490845535010},{"_id":"public/tags/this/index.html","hash":"43661518c6faad8f6e26ef84c4d6848331198817","modified":1490845535010},{"_id":"public/tags/面向对象/index.html","hash":"9097d7398dd02679ae0c6a2689de352853f4ec7e","modified":1490845535010},{"_id":"public/tags/柯里化/index.html","hash":"da54b1e26725b40154e56a04108833ba26c55524","modified":1490845535010},{"_id":"public/tags/ajax/index.html","hash":"e6af598d746431723cebcac285f241b930abd668","modified":1490845535010},{"_id":"public/tags/依赖注入/index.html","hash":"c7bc1b7b3b24457f2831d015145d9564c26c525d","modified":1490845535010},{"_id":"public/tags/跨域/index.html","hash":"1784b535d7a4d8629be9faed2730c11a6a282290","modified":1490845535010},{"_id":"public/tags/Git/index.html","hash":"b6180b126325e7c9a13fb4371dbcf34204eff2ce","modified":1490845535010},{"_id":"public/tags/js/index.html","hash":"917f2f2393d64d3ae921f83aaacef0380377c473","modified":1490845535010},{"_id":"public/tags/index.html","hash":"50d259f508a08c2c29c216fd7a994cc35c332496","modified":1490845535010},{"_id":"public/about/index.html","hash":"f404a8f54bcc818a05bd2f67ccb7df3940f089fa","modified":1490845535010},{"_id":"public/2017/03/25/箭头函数与普通函数的区别/index.html","hash":"50c87c34919185c338cc08e20c54732f8dc08c19","modified":1490845535010},{"_id":"public/2017/03/24/js多维数组扁平化/index.html","hash":"adc1d75aa54c4cc00bd9029170aae6e4ec69ee19","modified":1490845535010},{"_id":"public/2016/07/01/Github-Gitlab多账户SSH-Key切换/index.html","hash":"6991e81d7b5dfd03433d1288cc53a15c72af4313","modified":1490845535011},{"_id":"public/2016/06/16/打字动画/index.html","hash":"04f03dda965cefb54cc07156343b3f492a644332","modified":1490845535011},{"_id":"public/2016/06/15/跨域和jsonp/index.html","hash":"f2e2901af23a21083540516c30934f962e28cfab","modified":1490845535011},{"_id":"public/2016/05/04/js依赖注入/index.html","hash":"0a74c53080e8281047fd9ec5905fb62f2675d1fe","modified":1490845535011},{"_id":"public/2016/04/21/函数柯里化(转)/index.html","hash":"0aeae902a355eee79cc844ac934f811e3996f296","modified":1490845535011},{"_id":"public/2016/04/21/原生ajax/index.html","hash":"84cc6ee01ae91bbd4481eb3a240b866aedb046b5","modified":1490845535011},{"_id":"public/2016/04/04/理解javascript中的this/index.html","hash":"224b428e676dee780e40cb043008cc09df427a0a","modified":1490845535011},{"_id":"public/2016/04/03/事件模型/index.html","hash":"c978ee80d8bda6912524748627c1e8ea048a8314","modified":1490845535011},{"_id":"public/2016/03/30/js拖拽实现/index.html","hash":"6648264746a7e9645a5b52deed8d7cce9bec3f84","modified":1490845535011},{"_id":"public/2015/01/16/css3clock/index.html","hash":"7ce81fb6f1c43d099e9a8815b03cf7057f968cd0","modified":1490845535011},{"_id":"public/2015/01/16/tai-ji-yin-yang-tu/index.html","hash":"f98fec8e587421f72e7811d3296567b12c4d75c1","modified":1490845535011},{"_id":"public/2015/01/15/my-first-blog/index.html","hash":"08b75107592fc962a48a77a94c909f7e1d7d0a69","modified":1490845535011},{"_id":"public/archives/index.html","hash":"b776c73f1c36052ce63748d4cb2e7a24e3ff2f0e","modified":1490845535012},{"_id":"public/archives/page/2/index.html","hash":"8f73c7a132d386cd5e53e935cb5e0950f2183c27","modified":1490845535012},{"_id":"public/archives/2016/index.html","hash":"5eb7490daf0cc6f1382eb1a96984636caad99378","modified":1490845535012},{"_id":"public/archives/2016/04/index.html","hash":"48d4fe6882e5000c8f4600fbea19618c9266acf3","modified":1490845535012},{"_id":"public/categories/CSS/index.html","hash":"53ab5ed8a4eb5a8c8893edb5facba123b1c32b5e","modified":1490845535012},{"_id":"public/categories/JS/index.html","hash":"f4352baac0857fa77d51d7ba7c07aac6d5e969e0","modified":1490845535012},{"_id":"public/index.html","hash":"1ad4d2efc2ff833a2bfdd9152961056808c6f535","modified":1490845535012},{"_id":"public/page/2/index.html","hash":"51967f3d0390cd136fe2e8b40d4acbb5f2d61c51","modified":1490845535012},{"_id":"public/tags/animation/index.html","hash":"7536fce213213da811391d6199b37182a2f6979c","modified":1490845535012},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1490845535023},{"_id":"public/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1490845535024},{"_id":"public/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1490845535024},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1490845535024},{"_id":"public/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1490845535024},{"_id":"public/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1490845535024},{"_id":"public/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1490845535024},{"_id":"public/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1490845535024},{"_id":"public/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1490845535024},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490845535024},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490845535024},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490845535024},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490845535024},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490845535024},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490845535024},{"_id":"public/img/GitHub.png","hash":"08c955a91b6733bd51913b54c69fe742d546d0ec","modified":1490845535024},{"_id":"public/img/TiddlyWiki.png","hash":"58be3c981c6d25b47ddaab2f254838f9baa01d59","modified":1490845535024},{"_id":"public/img/SegmentFault.png","hash":"52bd4ddf6df129b6958398b21fa370f17cadb428","modified":1490845535024},{"_id":"public/img/V2EX.png","hash":"9adab6af95db9318e980c01cadbc5de800b4c816","modified":1490845535024},{"_id":"public/img/eventflow.svg","hash":"c49141f75e224e038ad808655c369a190f11d1fb","modified":1490845535024},{"_id":"public/img/eventflow.png","hash":"014db00dc9533428ac87ba26784bb912304e89a2","modified":1490845535024},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1490845535024},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1490845535024},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1490845535024},{"_id":"public/img/新浪微博.png","hash":"c9fb558158f491104fd8dbafc92c30591ad0299e","modified":1490845535024},{"_id":"public/img/知乎.png","hash":"50e43bad8fefb3950b13dc86aaa86de8a79432ae","modified":1490845535024},{"_id":"public/img/简书.png","hash":"bfe5e7b6146de19d180f36fa5a2b074c2bc23406","modified":1490845535024},{"_id":"public/img/网易云音乐.png","hash":"8bc2a2e2c4312ee9d4879b24f9e2bd51e6436840","modified":1490845535024},{"_id":"public/img/虾米音乐.png","hash":"d3ff836d5d58e10fb30fac1bae0aae34cfe2038f","modified":1490845535024},{"_id":"public/img/豆瓣.png","hash":"9f4798298548727052fa6ae809933c9e8ac42571","modified":1490845535025},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490845535025},{"_id":"public/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1490845535672},{"_id":"public/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1490845535676},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1490845535677},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1490845535677},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1490845535677},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1490845535677},{"_id":"public/css/post_clock.css","hash":"3fefa2895aa29e20cdb498cc9f73c0971cb20a0c","modified":1490845535683},{"_id":"public/css/eventflow.css","hash":"cd81c1afd54f042f77019bc652d0cd875079b955","modified":1490845535683},{"_id":"public/css/post_drag.css","hash":"b2becdf03c948de643a0d307c92e24a1fbf2d603","modified":1490845535683},{"_id":"public/css/post_yinyang.css","hash":"b94cd6f93b388b6e312b309de00095185dde86b2","modified":1490845535683},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1490845535683},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1490845535683},{"_id":"public/js/eventflow.js","hash":"00f7e17204287fd960b43a3befb31c2242406879","modified":1490845535683},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1490845535683},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1490845535683},{"_id":"public/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1490845535683},{"_id":"public/js/mobile.js","hash":"f04858f253770a65172423cda0e583782bbb1feb","modified":1490845535683},{"_id":"public/js/particles.json","hash":"c7b4552680b9dcafda755fd4c188c9c831753686","modified":1490845535684},{"_id":"public/js/main.js","hash":"4e5d71222110a03d42e5b2ad23a672ac2333ebbc","modified":1490845535684},{"_id":"public/js/pc.js","hash":"2ddef1d17c7372cfc5f6bdf67dc5efc27afd253c","modified":1490845535684},{"_id":"public/js/post_clock.js","hash":"9bd66fc3677ab868304248c85f0f9cdc3be0df97","modified":1490845535684},{"_id":"public/js/post_drag.js","hash":"4a70326525e8c208833a8cb273b02750adce9269","modified":1490845535684},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490845535684},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1490845535684},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1490845535684},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490845535684},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1490845535684},{"_id":"public/css/style.css","hash":"7373c17a360f0baedfcd812ecb83bb449df00d2a","modified":1490845535684},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1490845535684},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1490845535684},{"_id":"public/js/particles.min.js","hash":"7c7eb721a431b87b1c2f60f177c03c22814167a5","modified":1490845535684},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1490845535684},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1490845535684},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1490845535684},{"_id":"public/img/avatar.png","hash":"deebc66530e13a97f1c61dfee9f35289a2ca76cc","modified":1490845535689},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1490845535691}],"Category":[{"name":"CSS","_id":"cj0vuxshw0005qjs6sd9a82oo"},{"name":"JS","_id":"cj0vuxsi9000gqjs6dc8tukdt"},{"name":"tool config","_id":"cj0vuxsin0014qjs6lbwoijlv"},{"name":"js","_id":"cj0vuxsip001aqjs61jx2zaws"}],"Data":[],"Page":[{"title":"tags","date":"2016-03-28T06:48:07.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-03-28 14:48:07\n---\n","updated":"2017-03-24T07:45:08.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj0vuxsho0001qjs6zbmawuyr","content":"","excerpt":"","more":""},{"title":"about","date":"2016-03-28T06:47:54.000Z","_content":"还没想好要说什么","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-03-28 14:47:54\n---\n还没想好要说什么","updated":"2017-03-24T07:45:08.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0vuxshs0003qjs68883mss0","content":"<p>还没想好要说什么</p>\n","excerpt":"","more":"<p>还没想好要说什么</p>\n"}],"Post":[{"layout":"post","title":"太极阴阳图","date":"2015-01-16T06:33:26.000Z","comments":1,"keywords":"CSS, 动画, clock, animation, 太极, 八卦, 阴阳, 太极阴阳图","description":"css3实现太极阴阳图","_content":"\n<link rel=\"stylesheet\" href=\"/css/post_yinyang.css\"/>\n<div id=\"wrapper\"><div class=\"Yin-Yang\"></div></div>\n\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"XXXZeV\" data-default-tab=\"css\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/XXXZeV/'>XXXZeV</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n","source":"_posts/2015-01-16-tai-ji-yin-yang-tu.markdown","raw":"---\nlayout: post\ntitle: \"太极阴阳图\"\ndate: 2015-01-16 14:33:26 +0800\ncomments: true\ncategories: CSS\ntags: [animation]\nkeywords: CSS, 动画, clock, animation, 太极, 八卦, 阴阳, 太极阴阳图\ndescription: css3实现太极阴阳图\n---\n\n<link rel=\"stylesheet\" href=\"/css/post_yinyang.css\"/>\n<div id=\"wrapper\"><div class=\"Yin-Yang\"></div></div>\n\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"XXXZeV\" data-default-tab=\"css\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/XXXZeV/'>XXXZeV</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n","slug":"tai-ji-yin-yang-tu","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxshl0000qjs63h8ormz2","content":"<p><link rel=\"stylesheet\" href=\"/css/post_yinyang.css\"></p>\n<div id=\"wrapper\"><div class=\"Yin-Yang\"></div></div>\n\n<p></p><p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"XXXZeV\" data-default-tab=\"css\" data-user=\"HughDai\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/XXXZeV/\" target=\"_blank\" rel=\"external\">XXXZeV</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\" target=\"_blank\" rel=\"external\">@HughDai</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n","excerpt":"","more":"<p><link rel=\"stylesheet\" href=\"/css/post_yinyang.css\"/></p>\n<div id=\"wrapper\"><div class=\"Yin-Yang\"></div></div>\n\n<p><p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"XXXZeV\" data-default-tab=\"css\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/XXXZeV/'>XXXZeV</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n"},{"layout":"post","title":"css3 Clock","date":"2015-01-16T10:50:56.000Z","comments":1,"keywords":"CSS, 动画, clock, animation, 钟表","description":"css3和js实现钟表","_content":"reference http://segmentfault.com/a/1190000003055672\n\n<link rel=\"stylesheet\" href=\"/css/post_clock.css\"/>\n<div id=\"wrapper\"><div class=\"clock-wrapper\"><div class=\"clock-base\"><div class=\"click-indicator\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div class=\"clock-hour\"></div><div class=\"clock-minute\"></div><div class=\"clock-second\"></div><div class=\"clock-center\"></div></div></div></div>\n<style id=\"clock-animations\"></style><script src='/js/post_clock.js'></script>\n\n<p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"MKKXJp\" data-default-tab=\"js\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/MKKXJp/'>clock</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n","source":"_posts/2015-01-16-css3clock.markdown","raw":"---\nlayout: post\ntitle: \"css3 Clock\"\ndate: 2015-01-16 18:50:56 +0800\ncomments: true\ncategories: CSS\ntags: [animation]\nkeywords: CSS, 动画, clock, animation, 钟表\ndescription: css3和js实现钟表\n---\nreference http://segmentfault.com/a/1190000003055672\n\n<link rel=\"stylesheet\" href=\"/css/post_clock.css\"/>\n<div id=\"wrapper\"><div class=\"clock-wrapper\"><div class=\"clock-base\"><div class=\"click-indicator\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div class=\"clock-hour\"></div><div class=\"clock-minute\"></div><div class=\"clock-second\"></div><div class=\"clock-center\"></div></div></div></div>\n<style id=\"clock-animations\"></style><script src='/js/post_clock.js'></script>\n\n<p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"MKKXJp\" data-default-tab=\"js\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/MKKXJp/'>clock</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n","slug":"css3clock","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxshq0002qjs6askmgy40","content":"<p>reference <a href=\"http://segmentfault.com/a/1190000003055672\" target=\"_blank\" rel=\"external\">http://segmentfault.com/a/1190000003055672</a></p>\n<p><link rel=\"stylesheet\" href=\"/css/post_clock.css\"></p>\n<p><div id=\"wrapper\"><div class=\"clock-wrapper\"><div class=\"clock-base\"><div class=\"click-indicator\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div class=\"clock-hour\"></div><div class=\"clock-minute\"></div><div class=\"clock-second\"></div><div class=\"clock-center\"></div></div></div></div></p>\n<p><style id=\"clock-animations\"></style><script src=\"/js/post_clock.js\"></script></p>\n<p></p><p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"MKKXJp\" data-default-tab=\"js\" data-user=\"HughDai\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/MKKXJp/\" target=\"_blank\" rel=\"external\">clock</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\" target=\"_blank\" rel=\"external\">@HughDai</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n","excerpt":"","more":"<p>reference <a href=\"http://segmentfault.com/a/1190000003055672\">http://segmentfault.com/a/1190000003055672</a></p>\n<p><link rel=\"stylesheet\" href=\"/css/post_clock.css\"/></p>\n<p><div id=\"wrapper\"><div class=\"clock-wrapper\"><div class=\"clock-base\"><div class=\"click-indicator\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div class=\"clock-hour\"></div><div class=\"clock-minute\"></div><div class=\"clock-second\"></div><div class=\"clock-center\"></div></div></div></div></p>\n<p><style id=\"clock-animations\"></style><script src='/js/post_clock.js'></script></p>\n<p><p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"MKKXJp\" data-default-tab=\"js\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/MKKXJp/'>clock</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n"},{"layout":"post","title":"原生js拖拽实现","date":"2016-03-30T06:56:37.000Z","comments":1,"keywords":"JS, drag, 拖拽, 原生, 事件模型","description":"原生js实现拖拽","_content":"## 实现分析\n&emsp;&emsp;最近为了应付面试，浏览了许多js知识点，试着用原生js实现拖拽效果，鼠标拖动效果很常见，像是百度首页的登录框就是经典案例，究其原因无非就是鼠标的三个事件：mousedown、mousemove和mouseup。\n## 原理分析\n1. 鼠标按下时即mousedown，记录mousedown值为true，此时记录下当前鼠标的坐标以及要拖动元素的坐标\n2. 鼠标按下并移动即mousemove，记录下即时的鼠标新坐标，鼠标新旧坐标相减再加上第一步得到的元素坐标即为新的拖拽元素坐标，也就是拖拽坐标跟随鼠标移动。\n3. 鼠标松开时即mouseup，把鼠标状态mousedown设为false。\n## 代码\n### html\n    ```html\n    <div id=\"dialog\">\n       <div id='drag'>\n           <div id=\"title\">我是title,拖动我试一下</div>\n           <div id=\"content\">我是content，拖动我无效</div>\n       </div>\n   </div>\n    ```\n### css\n    ```css\n    #wrapper {\n       position: relative;\n       height:500px;\n       width:100%;\n       border:1px solid red;\n   }\n   \n   #dialog {\n       position: absolute;\n       width: 300px;\n       height: 200px;\n       padding: 5px;\n       top: 50px;\n       left: 50px;\n       background-color: #d9e1ed;\n       box-shadow: 2px 2px 2px #5c5d6c;\n       border-radius: 5px;\n   }\n   \n   #drag {\n       border: 1px solid rgb(217, 217, 217);\n       background-color: white;\n   }\n   \n   #title {\n       background-color: rgba(198, 232, 255, 0.43);\n       border-bottom: 1px solid rgb(217, 217, 217);\n       cursor: move;\n   }\n   \n   #content {\n       padding: 5px;\n       height: 165px;\n   }\n    ```\n    \n### js\n\n    ``` javascript\n    /**\n    * Created by hughdai on 16/3/30.\n    */\n   //事件处理\n   var EventCtrl = {\n       addEvent: function (ele, type, fn) {\n           if (ele.addEventListener) {\n               ele.addEventListener(type, fn, false);\n           }\n           else {\n               ele.attachEvent('on' + type, fn);\n           }\n       },\n       removeEvent: function (ele, type, fn) {\n           if (ele.removeEventListener) {\n               ele.removeEventListener(type, fn, false);\n           }\n           else {\n               ele.detachEvent('on' + type, fn);\n           }\n       }\n   }\n   //获取元素样式\n   function getStyle(ele, style) {\n       if (getComputedStyle) {\n           return getComputedStyle(ele, false)[style];\n       }\n       else {\n           return ele.currentStyle[style];\n       }\n   }\n   function drag() {\n       var x = 0, y = 0, top = 0, left = 0;\n       var mouseDown = false;\n       var dialog = document.getElementById('dialog');\n       EventCtrl.addEvent(this, 'mousedown', function (event) {\n           mouseDown = true;\n           this.onselectstart = function () {\n               return false;\n           };\n           var e = event || window.event;\n           left = parseInt(getStyle(dialog, 'left'));//记录当前元素偏移\n           top = parseInt(getStyle(dialog, 'top'));\n           x = parseInt(e.clientX || e.x);//记录当前鼠标位置\n           y = parseInt(e.clientY || e.y);\n       })\n   \n       EventCtrl.addEvent(document, 'mousemove', function (event) {\n           if (mouseDown) {\n               var e = event || window.event;\n               var container = document.getElementById('wrapper')\n               var currentX = parseInt(e.clientX || e.x);//当前鼠标位置\n               var currentY = parseInt(e.clientY || e.y);\n               var displayX = currentX - x + left;//新鼠标位置减去旧鼠标位置加上元素偏移\n               var displayY = currentY - y + top;\n               var width = container.offsetWidth - dialog.offsetWidth;\n               var height = container.offsetHeight - dialog.offsetHeight;\n               console.log('displayX:' + displayX, 'displayY:' + displayY);\n               //限制元素不被拖出容器范围\n               if (displayX < 0) {\n                   displayX = 0\n               }\n               else if (displayX > width) {\n                   displayX = width\n               }\n               if (displayY < 0) {\n                   displayY = 0\n               }\n               else if (displayY > height) {\n                   displayY = height\n               }\n               dialog.style.left = displayX + 'px';\n               dialog.style.top = displayY + 'px';\n           }\n       })\n   \n       EventCtrl.addEvent(document, 'mouseup', function (event) {\n           mouseDown = false;\n           left = parseInt(getStyle(dialog, 'left'));\n           top = parseInt(getStyle(dialog, 'top'));\n           EventCtrl.removeEvent(document, 'mousemove', function () {\n   \n           })\n           EventCtrl.removeEvent(document, 'mouseup', function () {\n   \n           })\n       })\n   }\n   document.addEventListener('DOMContentLoaded', function () {\n       drag.call(document.getElementById('title'));\n   }, false)\n    ```\n\n## 效果\n\n<link rel=\"stylesheet\" href=\"/css/post_drag.css\"/>\n<div id=\"wrapper\"><div id=\"dialog\"><div id='drag'><div id=\"title\">我是title,拖动我试一下</div><div id=\"content\">我是content，拖动我无效</div></div></div></div>\n<script src='/js/post_drag.js'></script>\n","source":"_posts/2016-03-30-js拖拽实现.md","raw":"---\nlayout: post\ntitle: 原生js拖拽实现\ndate: 2016-03-30 14:56:37\ncomments: true\ncategories: JS\ntags: [Event]\nkeywords: JS, drag, 拖拽, 原生, 事件模型\ndescription: 原生js实现拖拽\n---\n## 实现分析\n&emsp;&emsp;最近为了应付面试，浏览了许多js知识点，试着用原生js实现拖拽效果，鼠标拖动效果很常见，像是百度首页的登录框就是经典案例，究其原因无非就是鼠标的三个事件：mousedown、mousemove和mouseup。\n## 原理分析\n1. 鼠标按下时即mousedown，记录mousedown值为true，此时记录下当前鼠标的坐标以及要拖动元素的坐标\n2. 鼠标按下并移动即mousemove，记录下即时的鼠标新坐标，鼠标新旧坐标相减再加上第一步得到的元素坐标即为新的拖拽元素坐标，也就是拖拽坐标跟随鼠标移动。\n3. 鼠标松开时即mouseup，把鼠标状态mousedown设为false。\n## 代码\n### html\n    ```html\n    <div id=\"dialog\">\n       <div id='drag'>\n           <div id=\"title\">我是title,拖动我试一下</div>\n           <div id=\"content\">我是content，拖动我无效</div>\n       </div>\n   </div>\n    ```\n### css\n    ```css\n    #wrapper {\n       position: relative;\n       height:500px;\n       width:100%;\n       border:1px solid red;\n   }\n   \n   #dialog {\n       position: absolute;\n       width: 300px;\n       height: 200px;\n       padding: 5px;\n       top: 50px;\n       left: 50px;\n       background-color: #d9e1ed;\n       box-shadow: 2px 2px 2px #5c5d6c;\n       border-radius: 5px;\n   }\n   \n   #drag {\n       border: 1px solid rgb(217, 217, 217);\n       background-color: white;\n   }\n   \n   #title {\n       background-color: rgba(198, 232, 255, 0.43);\n       border-bottom: 1px solid rgb(217, 217, 217);\n       cursor: move;\n   }\n   \n   #content {\n       padding: 5px;\n       height: 165px;\n   }\n    ```\n    \n### js\n\n    ``` javascript\n    /**\n    * Created by hughdai on 16/3/30.\n    */\n   //事件处理\n   var EventCtrl = {\n       addEvent: function (ele, type, fn) {\n           if (ele.addEventListener) {\n               ele.addEventListener(type, fn, false);\n           }\n           else {\n               ele.attachEvent('on' + type, fn);\n           }\n       },\n       removeEvent: function (ele, type, fn) {\n           if (ele.removeEventListener) {\n               ele.removeEventListener(type, fn, false);\n           }\n           else {\n               ele.detachEvent('on' + type, fn);\n           }\n       }\n   }\n   //获取元素样式\n   function getStyle(ele, style) {\n       if (getComputedStyle) {\n           return getComputedStyle(ele, false)[style];\n       }\n       else {\n           return ele.currentStyle[style];\n       }\n   }\n   function drag() {\n       var x = 0, y = 0, top = 0, left = 0;\n       var mouseDown = false;\n       var dialog = document.getElementById('dialog');\n       EventCtrl.addEvent(this, 'mousedown', function (event) {\n           mouseDown = true;\n           this.onselectstart = function () {\n               return false;\n           };\n           var e = event || window.event;\n           left = parseInt(getStyle(dialog, 'left'));//记录当前元素偏移\n           top = parseInt(getStyle(dialog, 'top'));\n           x = parseInt(e.clientX || e.x);//记录当前鼠标位置\n           y = parseInt(e.clientY || e.y);\n       })\n   \n       EventCtrl.addEvent(document, 'mousemove', function (event) {\n           if (mouseDown) {\n               var e = event || window.event;\n               var container = document.getElementById('wrapper')\n               var currentX = parseInt(e.clientX || e.x);//当前鼠标位置\n               var currentY = parseInt(e.clientY || e.y);\n               var displayX = currentX - x + left;//新鼠标位置减去旧鼠标位置加上元素偏移\n               var displayY = currentY - y + top;\n               var width = container.offsetWidth - dialog.offsetWidth;\n               var height = container.offsetHeight - dialog.offsetHeight;\n               console.log('displayX:' + displayX, 'displayY:' + displayY);\n               //限制元素不被拖出容器范围\n               if (displayX < 0) {\n                   displayX = 0\n               }\n               else if (displayX > width) {\n                   displayX = width\n               }\n               if (displayY < 0) {\n                   displayY = 0\n               }\n               else if (displayY > height) {\n                   displayY = height\n               }\n               dialog.style.left = displayX + 'px';\n               dialog.style.top = displayY + 'px';\n           }\n       })\n   \n       EventCtrl.addEvent(document, 'mouseup', function (event) {\n           mouseDown = false;\n           left = parseInt(getStyle(dialog, 'left'));\n           top = parseInt(getStyle(dialog, 'top'));\n           EventCtrl.removeEvent(document, 'mousemove', function () {\n   \n           })\n           EventCtrl.removeEvent(document, 'mouseup', function () {\n   \n           })\n       })\n   }\n   document.addEventListener('DOMContentLoaded', function () {\n       drag.call(document.getElementById('title'));\n   }, false)\n    ```\n\n## 效果\n\n<link rel=\"stylesheet\" href=\"/css/post_drag.css\"/>\n<div id=\"wrapper\"><div id=\"dialog\"><div id='drag'><div id=\"title\">我是title,拖动我试一下</div><div id=\"content\">我是content，拖动我无效</div></div></div></div>\n<script src='/js/post_drag.js'></script>\n","slug":"js拖拽实现","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxshx0006qjs6knmk8y92","content":"<h2 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h2><p>&emsp;&emsp;最近为了应付面试，浏览了许多js知识点，试着用原生js实现拖拽效果，鼠标拖动效果很常见，像是百度首页的登录框就是经典案例，究其原因无非就是鼠标的三个事件：mousedown、mousemove和mouseup。</p>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><ol>\n<li>鼠标按下时即mousedown，记录mousedown值为true，此时记录下当前鼠标的坐标以及要拖动元素的坐标</li>\n<li>鼠标按下并移动即mousemove，记录下即时的鼠标新坐标，鼠标新旧坐标相减再加上第一步得到的元素坐标即为新的拖拽元素坐标，也就是拖拽坐标跟随鼠标移动。</li>\n<li>鼠标松开时即mouseup，把鼠标状态mousedown设为false。<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3> <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dialog\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'drag'</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title\"</span>&gt;</span>我是title,拖动我试一下<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span>我是content，拖动我无效<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"selector-id\">#wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#dialog</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#d9e1ed</span>;</div><div class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">#5c5d6c</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#drag</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgb</span>(217, 217, 217);</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: white;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#title</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(198, 232, 255, 0.43);</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgb</span>(217, 217, 217);</div><div class=\"line\">    <span class=\"attribute\">cursor</span>: move;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#content</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">165px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * Created by hughdai on 16/3/30.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"comment\">//事件处理</span></div><div class=\"line\"><span class=\"keyword\">var</span> EventCtrl = &#123;</div><div class=\"line\">    addEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ele.addEventListener) &#123;</div><div class=\"line\">            ele.addEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ele.attachEvent(<span class=\"string\">'on'</span> + type, fn);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    removeEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ele.removeEventListener) &#123;</div><div class=\"line\">            ele.removeEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ele.detachEvent(<span class=\"string\">'on'</span> + type, fn);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获取元素样式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">ele, style</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getComputedStyle) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getComputedStyle(ele, <span class=\"literal\">false</span>)[style];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ele.currentStyle[style];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drag</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, top = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> mouseDown = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dialog'</span>);</div><div class=\"line\">    EventCtrl.addEvent(<span class=\"keyword\">this</span>, <span class=\"string\">'mousedown'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        mouseDown = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.onselectstart = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">        left = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'left'</span>));<span class=\"comment\">//记录当前元素偏移</span></div><div class=\"line\">        top = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'top'</span>));</div><div class=\"line\">        x = <span class=\"built_in\">parseInt</span>(e.clientX || e.x);<span class=\"comment\">//记录当前鼠标位置</span></div><div class=\"line\">        y = <span class=\"built_in\">parseInt</span>(e.clientY || e.y);</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    EventCtrl.addEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mousemove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mouseDown) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">            <span class=\"keyword\">var</span> container = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'wrapper'</span>)</div><div class=\"line\">            <span class=\"keyword\">var</span> currentX = <span class=\"built_in\">parseInt</span>(e.clientX || e.x);<span class=\"comment\">//当前鼠标位置</span></div><div class=\"line\">            <span class=\"keyword\">var</span> currentY = <span class=\"built_in\">parseInt</span>(e.clientY || e.y);</div><div class=\"line\">            <span class=\"keyword\">var</span> displayX = currentX - x + left;<span class=\"comment\">//新鼠标位置减去旧鼠标位置加上元素偏移</span></div><div class=\"line\">            <span class=\"keyword\">var</span> displayY = currentY - y + top;</div><div class=\"line\">            <span class=\"keyword\">var</span> width = container.offsetWidth - dialog.offsetWidth;</div><div class=\"line\">            <span class=\"keyword\">var</span> height = container.offsetHeight - dialog.offsetHeight;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'displayX:'</span> + displayX, <span class=\"string\">'displayY:'</span> + displayY);</div><div class=\"line\">            <span class=\"comment\">//限制元素不被拖出容器范围</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (displayX &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                displayX = <span class=\"number\">0</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (displayX &gt; width) &#123;</div><div class=\"line\">                displayX = width</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (displayY &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                displayY = <span class=\"number\">0</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (displayY &gt; height) &#123;</div><div class=\"line\">                displayY = height</div><div class=\"line\">            &#125;</div><div class=\"line\">            dialog.style.left = displayX + <span class=\"string\">'px'</span>;</div><div class=\"line\">            dialog.style.top = displayY + <span class=\"string\">'px'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    EventCtrl.addEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mouseup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        mouseDown = <span class=\"literal\">false</span>;</div><div class=\"line\">        left = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'left'</span>));</div><div class=\"line\">        top = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'top'</span>));</div><div class=\"line\">        EventCtrl.removeEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mousemove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\">        EventCtrl.removeEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mouseup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    drag.call(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'title'</span>));</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>)</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><link rel=\"stylesheet\" href=\"/css/post_drag.css\"></p>\n<p><div id=\"wrapper\"><div id=\"dialog\"><div id=\"drag\"><div id=\"title\">我是title,拖动我试一下</div><div id=\"content\">我是content，拖动我无效</div></div></div></div></p>\n<script src=\"/js/post_drag.js\"></script>\n","excerpt":"","more":"<h2 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h2><p>&emsp;&emsp;最近为了应付面试，浏览了许多js知识点，试着用原生js实现拖拽效果，鼠标拖动效果很常见，像是百度首页的登录框就是经典案例，究其原因无非就是鼠标的三个事件：mousedown、mousemove和mouseup。</p>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><ol>\n<li>鼠标按下时即mousedown，记录mousedown值为true，此时记录下当前鼠标的坐标以及要拖动元素的坐标</li>\n<li>鼠标按下并移动即mousemove，记录下即时的鼠标新坐标，鼠标新旧坐标相减再加上第一步得到的元素坐标即为新的拖拽元素坐标，也就是拖拽坐标跟随鼠标移动。</li>\n<li>鼠标松开时即mouseup，把鼠标状态mousedown设为false。<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3> <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dialog\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'drag'</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title\"</span>&gt;</span>我是title,拖动我试一下<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span>我是content，拖动我无效<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"selector-id\">#wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#dialog</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#d9e1ed</span>;</div><div class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">#5c5d6c</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#drag</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgb</span>(217, 217, 217);</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: white;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#title</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(198, 232, 255, 0.43);</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgb</span>(217, 217, 217);</div><div class=\"line\">    <span class=\"attribute\">cursor</span>: move;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#content</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">165px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\"> * Created by hughdai on 16/3/30.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"comment\">//事件处理</span></div><div class=\"line\"><span class=\"keyword\">var</span> EventCtrl = &#123;</div><div class=\"line\">    addEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ele.addEventListener) &#123;</div><div class=\"line\">            ele.addEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ele.attachEvent(<span class=\"string\">'on'</span> + type, fn);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    removeEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ele.removeEventListener) &#123;</div><div class=\"line\">            ele.removeEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ele.detachEvent(<span class=\"string\">'on'</span> + type, fn);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获取元素样式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">ele, style</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getComputedStyle) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getComputedStyle(ele, <span class=\"literal\">false</span>)[style];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ele.currentStyle[style];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drag</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, top = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> mouseDown = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dialog'</span>);</div><div class=\"line\">    EventCtrl.addEvent(<span class=\"keyword\">this</span>, <span class=\"string\">'mousedown'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        mouseDown = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.onselectstart = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">        left = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'left'</span>));<span class=\"comment\">//记录当前元素偏移</span></div><div class=\"line\">        top = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'top'</span>));</div><div class=\"line\">        x = <span class=\"built_in\">parseInt</span>(e.clientX || e.x);<span class=\"comment\">//记录当前鼠标位置</span></div><div class=\"line\">        y = <span class=\"built_in\">parseInt</span>(e.clientY || e.y);</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    EventCtrl.addEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mousemove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mouseDown) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">            <span class=\"keyword\">var</span> container = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'wrapper'</span>)</div><div class=\"line\">            <span class=\"keyword\">var</span> currentX = <span class=\"built_in\">parseInt</span>(e.clientX || e.x);<span class=\"comment\">//当前鼠标位置</span></div><div class=\"line\">            <span class=\"keyword\">var</span> currentY = <span class=\"built_in\">parseInt</span>(e.clientY || e.y);</div><div class=\"line\">            <span class=\"keyword\">var</span> displayX = currentX - x + left;<span class=\"comment\">//新鼠标位置减去旧鼠标位置加上元素偏移</span></div><div class=\"line\">            <span class=\"keyword\">var</span> displayY = currentY - y + top;</div><div class=\"line\">            <span class=\"keyword\">var</span> width = container.offsetWidth - dialog.offsetWidth;</div><div class=\"line\">            <span class=\"keyword\">var</span> height = container.offsetHeight - dialog.offsetHeight;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'displayX:'</span> + displayX, <span class=\"string\">'displayY:'</span> + displayY);</div><div class=\"line\">            <span class=\"comment\">//限制元素不被拖出容器范围</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (displayX &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                displayX = <span class=\"number\">0</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (displayX &gt; width) &#123;</div><div class=\"line\">                displayX = width</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (displayY &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                displayY = <span class=\"number\">0</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (displayY &gt; height) &#123;</div><div class=\"line\">                displayY = height</div><div class=\"line\">            &#125;</div><div class=\"line\">            dialog.style.left = displayX + <span class=\"string\">'px'</span>;</div><div class=\"line\">            dialog.style.top = displayY + <span class=\"string\">'px'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    EventCtrl.addEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mouseup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        mouseDown = <span class=\"literal\">false</span>;</div><div class=\"line\">        left = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'left'</span>));</div><div class=\"line\">        top = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'top'</span>));</div><div class=\"line\">        EventCtrl.removeEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mousemove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\">        EventCtrl.removeEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mouseup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    drag.call(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'title'</span>));</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>)</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><link rel=\"stylesheet\" href=\"/css/post_drag.css\"/></p>\n<p><div id=\"wrapper\"><div id=\"dialog\"><div id='drag'><div id=\"title\">我是title,拖动我试一下</div><div id=\"content\">我是content，拖动我无效</div></div></div></div></p>\n<script src='/js/post_drag.js'></script>\n"},{"layout":"post","title":"my first blog","date":"2015-01-15T07:29:07.000Z","comments":1,"_content":"I need to start learning Ruby\n","source":"_posts/2015-01-15-my-first-blog.markdown","raw":"---\nlayout: post\ntitle: \"my first blog\"\ndate: 2015-01-15 15:29:07 +0800\ncomments: true\ncategories:\n---\nI need to start learning Ruby\n","slug":"my-first-blog","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxsi00007qjs6vvspg5e2","content":"<p>I need to start learning Ruby</p>\n","excerpt":"","more":"<p>I need to start learning Ruby</p>\n"},{"layout":"post","title":"理解javascript中的this","date":"2016-04-04T02:12:38.000Z","comments":1,"keywords":"JS, 原生, this, 面向对象","description":"this指向描述","_content":"&emsp;&emsp;在js函数中，除了定义函数时的形参，还有两个附加参数，即this和arguments，本篇就讲一下this关键字的用法以及this在不同场景下值。\n初学时受启发得知this的指向取决于函数的调用方式，总结下来有以下几点：\n1、作为函数调用的模式，this指向window\n```javascript\nfunction func(){\n    console.log(this);\n}\n\nfunc();             //window\n```\n2、作为对象的方法调用的时候,this指向方法所在的对象\n```javascript\nvar obj = {};\nobj.name = 'hugh dai';\nobj.getNmae = function(){\n    console.log(this.name);\n}\n\nobj.getName();      //hugh dai\n```\n3、构造函数模式，this指向构造函数的实例\n```javascript\nfunction Person(name){\n    this.name = name;\n    this.getName = function(){\n        console.log(this.name);\n    }\n}\n\nvar p = new Person('hugh dai');\np.getName();        //hugh dai\n```\n4、bind/call/apply方式调用，this指向方法中的第一个参数\n```javascript\nvar foo = {\n    x: 3\n}\nvar bar = function(){\n    console.log(this.x);\n}\nbar(); // undefined\nbar.bind(foo)();    //3\nbar.call(foo);      //3\nbar.apply(foo);     //3\n```","source":"_posts/2016-04-04-理解javascript中的this.md","raw":"---\nlayout: post\ntitle: 理解javascript中的this\ndate: 2016-04-04 10:12:38\ncomments: true\ncategories: JS\ntags: [this, 面向对象]\nkeywords: JS, 原生, this, 面向对象\ndescription: this指向描述\n---\n&emsp;&emsp;在js函数中，除了定义函数时的形参，还有两个附加参数，即this和arguments，本篇就讲一下this关键字的用法以及this在不同场景下值。\n初学时受启发得知this的指向取决于函数的调用方式，总结下来有以下几点：\n1、作为函数调用的模式，this指向window\n```javascript\nfunction func(){\n    console.log(this);\n}\n\nfunc();             //window\n```\n2、作为对象的方法调用的时候,this指向方法所在的对象\n```javascript\nvar obj = {};\nobj.name = 'hugh dai';\nobj.getNmae = function(){\n    console.log(this.name);\n}\n\nobj.getName();      //hugh dai\n```\n3、构造函数模式，this指向构造函数的实例\n```javascript\nfunction Person(name){\n    this.name = name;\n    this.getName = function(){\n        console.log(this.name);\n    }\n}\n\nvar p = new Person('hugh dai');\np.getName();        //hugh dai\n```\n4、bind/call/apply方式调用，this指向方法中的第一个参数\n```javascript\nvar foo = {\n    x: 3\n}\nvar bar = function(){\n    console.log(this.x);\n}\nbar(); // undefined\nbar.bind(foo)();    //3\nbar.call(foo);      //3\nbar.apply(foo);     //3\n```","slug":"理解javascript中的this","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxsi10009qjs62z2bkeff","content":"<p>&emsp;&emsp;在js函数中，除了定义函数时的形参，还有两个附加参数，即this和arguments，本篇就讲一下this关键字的用法以及this在不同场景下值。<br>初学时受启发得知this的指向取决于函数的调用方式，总结下来有以下几点：<br>1、作为函数调用的模式，this指向window<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func();             <span class=\"comment\">//window</span></div></pre></td></tr></table></figure></p>\n<p>2、作为对象的方法调用的时候,this指向方法所在的对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">obj.name = <span class=\"string\">'hugh dai'</span>;</div><div class=\"line\">obj.getNmae = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.getName();      <span class=\"comment\">//hugh dai</span></div></pre></td></tr></table></figure></p>\n<p>3、构造函数模式，this指向构造函数的实例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'hugh dai'</span>);</div><div class=\"line\">p.getName();        <span class=\"comment\">//hugh dai</span></div></pre></td></tr></table></figure></p>\n<p>4、bind/call/apply方式调用，this指向方法中的第一个参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</div><div class=\"line\">    x: <span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); <span class=\"comment\">// undefined</span></div><div class=\"line\">bar.bind(foo)();    <span class=\"comment\">//3</span></div><div class=\"line\">bar.call(foo);      <span class=\"comment\">//3</span></div><div class=\"line\">bar.apply(foo);     <span class=\"comment\">//3</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>&emsp;&emsp;在js函数中，除了定义函数时的形参，还有两个附加参数，即this和arguments，本篇就讲一下this关键字的用法以及this在不同场景下值。<br>初学时受启发得知this的指向取决于函数的调用方式，总结下来有以下几点：<br>1、作为函数调用的模式，this指向window<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func();             <span class=\"comment\">//window</span></div></pre></td></tr></table></figure></p>\n<p>2、作为对象的方法调用的时候,this指向方法所在的对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">obj.name = <span class=\"string\">'hugh dai'</span>;</div><div class=\"line\">obj.getNmae = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.getName();      <span class=\"comment\">//hugh dai</span></div></pre></td></tr></table></figure></p>\n<p>3、构造函数模式，this指向构造函数的实例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'hugh dai'</span>);</div><div class=\"line\">p.getName();        <span class=\"comment\">//hugh dai</span></div></pre></td></tr></table></figure></p>\n<p>4、bind/call/apply方式调用，this指向方法中的第一个参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</div><div class=\"line\">    x: <span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); <span class=\"comment\">// undefined</span></div><div class=\"line\">bar.bind(foo)();    <span class=\"comment\">//3</span></div><div class=\"line\">bar.call(foo);      <span class=\"comment\">//3</span></div><div class=\"line\">bar.apply(foo);     <span class=\"comment\">//3</span></div></pre></td></tr></table></figure></p>\n"},{"layout":"post","title":"事件模型","date":"2016-04-03T09:27:16.000Z","comments":1,"keywords":"JS, 原生, 事件, 事件流, Event flow","description":"js事件流描述","_content":"## 事件触发过程\n在前端开发中，经常会遇到事件监听，很多人对事件捕获及事件冒泡不置可否，以下是我对事件模型的一些看法，简单来说就是从外向内捕捉，然后到目标阶段后依次向上冒泡，详情请自行[W3C](https://www.w3.org/TR/DOM-Level-3-Events/#event-flow)。\n图片引用自[W3C](https://www.w3.org/TR/DOM-Level-3-Events/#event-flow)\n![](/img/eventflow.png)\n    1、捕获阶段：在事件对象到达事件目标之前，事件对象必须从window经过目标的祖先节点传播到事件目标。 这个阶段被我们称之为捕获阶段。在这个阶段注册的事件监听器在事件到达其目标前必须先处理事件。\n    2、目标阶段：事件对象到达其事件目标。 这个阶段被我们称为目标阶段。一旦事件对象到达事件目标，该阶段的事件监听器就要对它进行处理。如果一个事件对象类型被标志为不能冒泡。那么对应的事件对象在到达此阶段时就会终止传播。\n    3、冒泡阶段：事件对象以一个与捕获阶段相反的方向从事件目标传播经过其祖先节点传播到window。这个阶段被称之为冒泡阶段。在此阶段注册的事件监听器会对相应的冒泡事件进行处理。\n## 跨浏览器EventUtil\n以下是js大神[Nicholas Zakas](https://github.com/nzakas/)写的[Professional JavaScript for Web Developers](https://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY)中的Cross Browser Event Utility\n查看[Hugh Dai Gist](https://gist.github.com/HughDai/a365e2515643e861ceff6b6181400449)\n```javascript\n    var EventUtil = {\n                addHandler: function( element, type, handler ) {\n                    if ( element.addEventListener ) {\n                        element.addEventListener ( type, handler, false );\n                    } else if ( element.attachEvent ) {\n                        element.attachEvent ( \"on\" + type, handler );\n                    } else {\n                        element[\"on\" + type] = handler;\n                    }\n                },\n                getEvent: function ( event ) {\n                    return event ? event : window.event;\n                },\n                getTarget: function ( event ) {\n                    return event.target || event.srcElement;\n                },\n                preventDefault: function ( event ) {\n                    if ( event.preventDefault ) {\n                        event.preventDefault();\n                    } else {\n                        event.returnValue = false;\n                    }\n                },\n                removeHandler: function( element, type, handler ) {\n                    if ( element.removeEventListener ) {\n                        element.removeEventListener ( type, handler, false );\n                    } else if ( element.detachEvent ) {\n                        element.detachEvent ( \"on\" + type, handler );\n                    } else {\n                        element[\"on\" + type] = null;\n                    }\n                },\n                stopPropagation: function ( event ) {\n                    if ( event.stopPropagation ) {\n                        event.stopPropagation();\n                    } else {\n                        event.cancelBubble = true;\n                    }\n                }\n            };\n```\n\n## Demo\n这里修改一下大神[Wilson Page](https://github.com/wilsonpage)的一个demo，更形象的描述事件流模型。\n\n<p data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"BzNjax\" data-default-tab=\"js,result\" data-user=\"HughDai\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/BzNjax/\">BzNjax</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\">@HughDai</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","source":"_posts/2016-04-03-事件模型.md","raw":"---\nlayout: post\ntitle: 事件模型\ndate: 2016-04-03 17:27:16\ncomments: true\ncategories: JS\ntags: [Event]\nkeywords: JS, 原生, 事件, 事件流, Event flow\ndescription: js事件流描述\n---\n## 事件触发过程\n在前端开发中，经常会遇到事件监听，很多人对事件捕获及事件冒泡不置可否，以下是我对事件模型的一些看法，简单来说就是从外向内捕捉，然后到目标阶段后依次向上冒泡，详情请自行[W3C](https://www.w3.org/TR/DOM-Level-3-Events/#event-flow)。\n图片引用自[W3C](https://www.w3.org/TR/DOM-Level-3-Events/#event-flow)\n![](/img/eventflow.png)\n    1、捕获阶段：在事件对象到达事件目标之前，事件对象必须从window经过目标的祖先节点传播到事件目标。 这个阶段被我们称之为捕获阶段。在这个阶段注册的事件监听器在事件到达其目标前必须先处理事件。\n    2、目标阶段：事件对象到达其事件目标。 这个阶段被我们称为目标阶段。一旦事件对象到达事件目标，该阶段的事件监听器就要对它进行处理。如果一个事件对象类型被标志为不能冒泡。那么对应的事件对象在到达此阶段时就会终止传播。\n    3、冒泡阶段：事件对象以一个与捕获阶段相反的方向从事件目标传播经过其祖先节点传播到window。这个阶段被称之为冒泡阶段。在此阶段注册的事件监听器会对相应的冒泡事件进行处理。\n## 跨浏览器EventUtil\n以下是js大神[Nicholas Zakas](https://github.com/nzakas/)写的[Professional JavaScript for Web Developers](https://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY)中的Cross Browser Event Utility\n查看[Hugh Dai Gist](https://gist.github.com/HughDai/a365e2515643e861ceff6b6181400449)\n```javascript\n    var EventUtil = {\n                addHandler: function( element, type, handler ) {\n                    if ( element.addEventListener ) {\n                        element.addEventListener ( type, handler, false );\n                    } else if ( element.attachEvent ) {\n                        element.attachEvent ( \"on\" + type, handler );\n                    } else {\n                        element[\"on\" + type] = handler;\n                    }\n                },\n                getEvent: function ( event ) {\n                    return event ? event : window.event;\n                },\n                getTarget: function ( event ) {\n                    return event.target || event.srcElement;\n                },\n                preventDefault: function ( event ) {\n                    if ( event.preventDefault ) {\n                        event.preventDefault();\n                    } else {\n                        event.returnValue = false;\n                    }\n                },\n                removeHandler: function( element, type, handler ) {\n                    if ( element.removeEventListener ) {\n                        element.removeEventListener ( type, handler, false );\n                    } else if ( element.detachEvent ) {\n                        element.detachEvent ( \"on\" + type, handler );\n                    } else {\n                        element[\"on\" + type] = null;\n                    }\n                },\n                stopPropagation: function ( event ) {\n                    if ( event.stopPropagation ) {\n                        event.stopPropagation();\n                    } else {\n                        event.cancelBubble = true;\n                    }\n                }\n            };\n```\n\n## Demo\n这里修改一下大神[Wilson Page](https://github.com/wilsonpage)的一个demo，更形象的描述事件流模型。\n\n<p data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"BzNjax\" data-default-tab=\"js,result\" data-user=\"HughDai\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/BzNjax/\">BzNjax</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\">@HughDai</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","slug":"事件模型","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxsi6000cqjs6uytklmxh","content":"<h2 id=\"事件触发过程\"><a href=\"#事件触发过程\" class=\"headerlink\" title=\"事件触发过程\"></a>事件触发过程</h2><p>在前端开发中，经常会遇到事件监听，很多人对事件捕获及事件冒泡不置可否，以下是我对事件模型的一些看法，简单来说就是从外向内捕捉，然后到目标阶段后依次向上冒泡，详情请自行<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\" target=\"_blank\" rel=\"external\">W3C</a>。<br>图片引用自<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\" target=\"_blank\" rel=\"external\">W3C</a><br><img src=\"/img/eventflow.png\" alt=\"\"><br>    1、捕获阶段：在事件对象到达事件目标之前，事件对象必须从window经过目标的祖先节点传播到事件目标。 这个阶段被我们称之为捕获阶段。在这个阶段注册的事件监听器在事件到达其目标前必须先处理事件。<br>    2、目标阶段：事件对象到达其事件目标。 这个阶段被我们称为目标阶段。一旦事件对象到达事件目标，该阶段的事件监听器就要对它进行处理。如果一个事件对象类型被标志为不能冒泡。那么对应的事件对象在到达此阶段时就会终止传播。<br>    3、冒泡阶段：事件对象以一个与捕获阶段相反的方向从事件目标传播经过其祖先节点传播到window。这个阶段被称之为冒泡阶段。在此阶段注册的事件监听器会对相应的冒泡事件进行处理。</p>\n<h2 id=\"跨浏览器EventUtil\"><a href=\"#跨浏览器EventUtil\" class=\"headerlink\" title=\"跨浏览器EventUtil\"></a>跨浏览器EventUtil</h2><p>以下是js大神<a href=\"https://github.com/nzakas/\" target=\"_blank\" rel=\"external\">Nicholas Zakas</a>写的<a href=\"https://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY\" target=\"_blank\" rel=\"external\">Professional JavaScript for Web Developers</a>中的Cross Browser Event Utility<br>查看<a href=\"https://gist.github.com/HughDai/a365e2515643e861ceff6b6181400449\" target=\"_blank\" rel=\"external\">Hugh Dai Gist</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventUtil = &#123;</div><div class=\"line\">            addHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> element, type, handler </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( element.addEventListener ) &#123;</div><div class=\"line\">                    element.addEventListener ( type, handler, <span class=\"literal\">false</span> );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( element.attachEvent ) &#123;</div><div class=\"line\">                    element.attachEvent ( <span class=\"string\">\"on\"</span> + type, handler );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    element[<span class=\"string\">\"on\"</span> + type] = handler;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> event ? event : <span class=\"built_in\">window</span>.event;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getTarget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> event.target || event.srcElement;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            preventDefault: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( event.preventDefault ) &#123;</div><div class=\"line\">                    event.preventDefault();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    event.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            removeHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> element, type, handler </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( element.removeEventListener ) &#123;</div><div class=\"line\">                    element.removeEventListener ( type, handler, <span class=\"literal\">false</span> );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( element.detachEvent ) &#123;</div><div class=\"line\">                    element.detachEvent ( <span class=\"string\">\"on\"</span> + type, handler );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    element[<span class=\"string\">\"on\"</span> + type] = <span class=\"literal\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            stopPropagation: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( event.stopPropagation ) &#123;</div><div class=\"line\">                    event.stopPropagation();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    event.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>这里修改一下大神<a href=\"https://github.com/wilsonpage\" target=\"_blank\" rel=\"external\">Wilson Page</a>的一个demo，更形象的描述事件流模型。</p>\n<p></p><p data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"BzNjax\" data-default-tab=\"js,result\" data-user=\"HughDai\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/BzNjax/\" target=\"_blank\" rel=\"external\">BzNjax</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\" target=\"_blank\" rel=\"external\">@HughDai</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>","excerpt":"","more":"<h2 id=\"事件触发过程\"><a href=\"#事件触发过程\" class=\"headerlink\" title=\"事件触发过程\"></a>事件触发过程</h2><p>在前端开发中，经常会遇到事件监听，很多人对事件捕获及事件冒泡不置可否，以下是我对事件模型的一些看法，简单来说就是从外向内捕捉，然后到目标阶段后依次向上冒泡，详情请自行<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\">W3C</a>。<br>图片引用自<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\">W3C</a><br><img src=\"/img/eventflow.png\" alt=\"\"><br>    1、捕获阶段：在事件对象到达事件目标之前，事件对象必须从window经过目标的祖先节点传播到事件目标。 这个阶段被我们称之为捕获阶段。在这个阶段注册的事件监听器在事件到达其目标前必须先处理事件。<br>    2、目标阶段：事件对象到达其事件目标。 这个阶段被我们称为目标阶段。一旦事件对象到达事件目标，该阶段的事件监听器就要对它进行处理。如果一个事件对象类型被标志为不能冒泡。那么对应的事件对象在到达此阶段时就会终止传播。<br>    3、冒泡阶段：事件对象以一个与捕获阶段相反的方向从事件目标传播经过其祖先节点传播到window。这个阶段被称之为冒泡阶段。在此阶段注册的事件监听器会对相应的冒泡事件进行处理。</p>\n<h2 id=\"跨浏览器EventUtil\"><a href=\"#跨浏览器EventUtil\" class=\"headerlink\" title=\"跨浏览器EventUtil\"></a>跨浏览器EventUtil</h2><p>以下是js大神<a href=\"https://github.com/nzakas/\">Nicholas Zakas</a>写的<a href=\"https://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY\">Professional JavaScript for Web Developers</a>中的Cross Browser Event Utility<br>查看<a href=\"https://gist.github.com/HughDai/a365e2515643e861ceff6b6181400449\">Hugh Dai Gist</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventUtil = &#123;</div><div class=\"line\">            addHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> element, type, handler </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( element.addEventListener ) &#123;</div><div class=\"line\">                    element.addEventListener ( type, handler, <span class=\"literal\">false</span> );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( element.attachEvent ) &#123;</div><div class=\"line\">                    element.attachEvent ( <span class=\"string\">\"on\"</span> + type, handler );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    element[<span class=\"string\">\"on\"</span> + type] = handler;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> event ? event : <span class=\"built_in\">window</span>.event;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getTarget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> event.target || event.srcElement;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            preventDefault: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( event.preventDefault ) &#123;</div><div class=\"line\">                    event.preventDefault();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    event.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            removeHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> element, type, handler </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( element.removeEventListener ) &#123;</div><div class=\"line\">                    element.removeEventListener ( type, handler, <span class=\"literal\">false</span> );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( element.detachEvent ) &#123;</div><div class=\"line\">                    element.detachEvent ( <span class=\"string\">\"on\"</span> + type, handler );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    element[<span class=\"string\">\"on\"</span> + type] = <span class=\"literal\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            stopPropagation: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( event.stopPropagation ) &#123;</div><div class=\"line\">                    event.stopPropagation();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    event.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>这里修改一下大神<a href=\"https://github.com/wilsonpage\">Wilson Page</a>的一个demo，更形象的描述事件流模型。</p>\n<p><p data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"BzNjax\" data-default-tab=\"js,result\" data-user=\"HughDai\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/BzNjax/\">BzNjax</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\">@HughDai</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>"},{"layout":"post","title":"函数柯里化","date":"2016-04-21T14:57:42.000Z","comments":1,"keywords":"JS, 柯里化, currying, 函数柯里化","description":"js函数柯里化","_content":"转自[jcouyang的gist](https://gist.github.com/jcouyang/b56a830cd55bd230049f)\n\n还记得 Haskell Curry吗，![](http://s3.amazonaws.com/lyah/curry.png)\n\n多巧啊, 人家姓 Curry 名 Haskell, 难怪 Haskell 语言会自动柯里化, 呵呵. 但是不奇怪吗, 为什么要柯里化呢. 为什么如此重要导致 Haskell 会默认自动柯里化所有函数, 不就是返回一个部分配置好的函数吗.\n\n我们来看一个 Haskell 的代码.\n```haskell\nmax 3 4\n(max 3) 4\n```\n结果都是4, 这有设么用呢.\n\n这里看不出来, 放到`高阶函数`试试. 什么? 看不懂天书 Haskell, 来看看 JavaScript 吧.\n\n### 我们来解一个问题\n\n#### 1. 写一个函数, 可以连接字符数组, 如 `f(['1','2']) => '12'`\n\n好吧,如果不用柯里化, 怎么写? 啊哈 `reduce`\n\n```javascript\nvar concatArray = function(chars){\n  return chars.reduce(function(a, b){\n  \treturn a.concat(b);\n  });\n}\nconcat(['1','2','3']) // => '123'\n```\n很简单,对吧.\n\n#### 2. 现在我要其中所有数字加1, 然后在连接\n```javascript\nvar concatArray = function(chars, inc){\n  return chars.map(function(char){\n  \treturn (+char)+inc + '';\n  }).reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], 1))// => '234'\n```\n#### 3. 所有数字乘以2, 再重构试试看\n\n```javascript\nvar multiple = function(a, b){\n  return +a*b + ''\n}\nvar concatArray = function(chars, inc){\n  return chars.map(function(char){\n  \treturn multiple(char, inc);\n  }).reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], 2)) // => '246'\n```\n\n是不是已经看出问题了呢? 如果我在需要每个数字都减2,是不是很麻烦呢.需要将`map` 参数匿名函数中的 multiple 函数换掉. 这样一来`concatArray`就不能同时处理加, 乘和减? 那么怎么能把他提取出来呢? 来对比下柯里化的解法.\n\n### 柯里化函数接口\n```javascript\nvar multiple = function(a){\n  return function(b){\n    return +b*a + ''\n  }\n}\n\nvar plus = function(a){\n  return function(b){\n    return (+b)+a + ''\n  }\n}\nvar concatArray = function(chars, stylishChar){\n  return chars.map(stylishChar)\n    .reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], multiple(2)))\nconsole.log(concatArray(['1','2','3'], plus(2)))\n```\n有什么不一样呢\n1. 处理数组中字符的函数被提取出来, 作为参数传入\n2. 提取成柯里化的函数, 部分配置好后传入, 好处显而易见, 这下接口非常通畅\n无论是外层调用\n```\nconcatArray(['1','2','3'], multiple(2))\n```\n还是内部的 map 函数\n```\nchars.map(stylishChar)\n```\n这些接口都清晰了很多, 不是吗\n\n这就是函数式的思想, 用已有的函数组合出新的函数, 而柯里化每消费一个参数, 都会返回一个新的部分配置的函数, 这为函数组合提供了更灵活的手段, 并且使得接口更为流畅.\n\n再加上自动柯里化的库 [ramda](https://github.com/CrossEye/ramda), 简直就完美了\n```\nvar multiple = ramda.curry(function(a, b){\n  return +b*a + ''\n})\nvar plus = ramda.curry(function(a, b){\n  return (+b)+a + ''\n})\n```\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/hamoq/3/embed\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n","source":"_posts/2016-04-21-函数柯里化(转).md","raw":"---\nlayout: post\ntitle: 函数柯里化\ndate: 2016-04-21 22:57:42\ncomments: true\ncategories: JS\ntags: [柯里化, 面向对象]\nkeywords: JS, 柯里化, currying, 函数柯里化\ndescription: js函数柯里化\n---\n转自[jcouyang的gist](https://gist.github.com/jcouyang/b56a830cd55bd230049f)\n\n还记得 Haskell Curry吗，![](http://s3.amazonaws.com/lyah/curry.png)\n\n多巧啊, 人家姓 Curry 名 Haskell, 难怪 Haskell 语言会自动柯里化, 呵呵. 但是不奇怪吗, 为什么要柯里化呢. 为什么如此重要导致 Haskell 会默认自动柯里化所有函数, 不就是返回一个部分配置好的函数吗.\n\n我们来看一个 Haskell 的代码.\n```haskell\nmax 3 4\n(max 3) 4\n```\n结果都是4, 这有设么用呢.\n\n这里看不出来, 放到`高阶函数`试试. 什么? 看不懂天书 Haskell, 来看看 JavaScript 吧.\n\n### 我们来解一个问题\n\n#### 1. 写一个函数, 可以连接字符数组, 如 `f(['1','2']) => '12'`\n\n好吧,如果不用柯里化, 怎么写? 啊哈 `reduce`\n\n```javascript\nvar concatArray = function(chars){\n  return chars.reduce(function(a, b){\n  \treturn a.concat(b);\n  });\n}\nconcat(['1','2','3']) // => '123'\n```\n很简单,对吧.\n\n#### 2. 现在我要其中所有数字加1, 然后在连接\n```javascript\nvar concatArray = function(chars, inc){\n  return chars.map(function(char){\n  \treturn (+char)+inc + '';\n  }).reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], 1))// => '234'\n```\n#### 3. 所有数字乘以2, 再重构试试看\n\n```javascript\nvar multiple = function(a, b){\n  return +a*b + ''\n}\nvar concatArray = function(chars, inc){\n  return chars.map(function(char){\n  \treturn multiple(char, inc);\n  }).reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], 2)) // => '246'\n```\n\n是不是已经看出问题了呢? 如果我在需要每个数字都减2,是不是很麻烦呢.需要将`map` 参数匿名函数中的 multiple 函数换掉. 这样一来`concatArray`就不能同时处理加, 乘和减? 那么怎么能把他提取出来呢? 来对比下柯里化的解法.\n\n### 柯里化函数接口\n```javascript\nvar multiple = function(a){\n  return function(b){\n    return +b*a + ''\n  }\n}\n\nvar plus = function(a){\n  return function(b){\n    return (+b)+a + ''\n  }\n}\nvar concatArray = function(chars, stylishChar){\n  return chars.map(stylishChar)\n    .reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], multiple(2)))\nconsole.log(concatArray(['1','2','3'], plus(2)))\n```\n有什么不一样呢\n1. 处理数组中字符的函数被提取出来, 作为参数传入\n2. 提取成柯里化的函数, 部分配置好后传入, 好处显而易见, 这下接口非常通畅\n无论是外层调用\n```\nconcatArray(['1','2','3'], multiple(2))\n```\n还是内部的 map 函数\n```\nchars.map(stylishChar)\n```\n这些接口都清晰了很多, 不是吗\n\n这就是函数式的思想, 用已有的函数组合出新的函数, 而柯里化每消费一个参数, 都会返回一个新的部分配置的函数, 这为函数组合提供了更灵活的手段, 并且使得接口更为流畅.\n\n再加上自动柯里化的库 [ramda](https://github.com/CrossEye/ramda), 简直就完美了\n```\nvar multiple = ramda.curry(function(a, b){\n  return +b*a + ''\n})\nvar plus = ramda.curry(function(a, b){\n  return (+b)+a + ''\n})\n```\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/hamoq/3/embed\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n","slug":"函数柯里化(转)","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxsi9000fqjs64slrajnx","content":"<p>转自<a href=\"https://gist.github.com/jcouyang/b56a830cd55bd230049f\" target=\"_blank\" rel=\"external\">jcouyang的gist</a></p>\n<p>还记得 Haskell Curry吗，<img src=\"http://s3.amazonaws.com/lyah/curry.png\" alt=\"\"></p>\n<p>多巧啊, 人家姓 Curry 名 Haskell, 难怪 Haskell 语言会自动柯里化, 呵呵. 但是不奇怪吗, 为什么要柯里化呢. 为什么如此重要导致 Haskell 会默认自动柯里化所有函数, 不就是返回一个部分配置好的函数吗.</p>\n<p>我们来看一个 Haskell 的代码.<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">max</span> <span class=\"number\">3</span> <span class=\"number\">4</span></div><div class=\"line\">(max <span class=\"number\">3</span>) <span class=\"number\">4</span></div></pre></td></tr></table></figure></p>\n<p>结果都是4, 这有设么用呢.</p>\n<p>这里看不出来, 放到<code>高阶函数</code>试试. 什么? 看不懂天书 Haskell, 来看看 JavaScript 吧.</p>\n<h3 id=\"我们来解一个问题\"><a href=\"#我们来解一个问题\" class=\"headerlink\" title=\"我们来解一个问题\"></a>我们来解一个问题</h3><h4 id=\"1-写一个函数-可以连接字符数组-如-f-39-1-39-39-2-39-gt-39-12-39\"><a href=\"#1-写一个函数-可以连接字符数组-如-f-39-1-39-39-2-39-gt-39-12-39\" class=\"headerlink\" title=\"1. 写一个函数, 可以连接字符数组, 如 f([&#39;1&#39;,&#39;2&#39;]) =&gt; &#39;12&#39;\"></a>1. 写一个函数, 可以连接字符数组, 如 <code>f([&#39;1&#39;,&#39;2&#39;]) =&gt; &#39;12&#39;</code></h4><p>好吧,如果不用柯里化, 怎么写? 啊哈 <code>reduce</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> a.concat(b);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">concat([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>]) <span class=\"comment\">// =&gt; '123'</span></div></pre></td></tr></table></figure>\n<p>很简单,对吧.</p>\n<h4 id=\"2-现在我要其中所有数字加1-然后在连接\"><a href=\"#2-现在我要其中所有数字加1-然后在连接\" class=\"headerlink\" title=\"2. 现在我要其中所有数字加1, 然后在连接\"></a>2. 现在我要其中所有数字加1, 然后在连接</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, inc</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">char</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> (+char)+inc + <span class=\"string\">''</span>;</div><div class=\"line\">  &#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], <span class=\"number\">1</span>))<span class=\"comment\">// =&gt; '234'</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-所有数字乘以2-再重构试试看\"><a href=\"#3-所有数字乘以2-再重构试试看\" class=\"headerlink\" title=\"3. 所有数字乘以2, 再重构试试看\"></a>3. 所有数字乘以2, 再重构试试看</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> multiple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> +a*b + <span class=\"string\">''</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, inc</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">char</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> multiple(char, inc);</div><div class=\"line\">  &#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], <span class=\"number\">2</span>)) <span class=\"comment\">// =&gt; '246'</span></div></pre></td></tr></table></figure>\n<p>是不是已经看出问题了呢? 如果我在需要每个数字都减2,是不是很麻烦呢.需要将<code>map</code> 参数匿名函数中的 multiple 函数换掉. 这样一来<code>concatArray</code>就不能同时处理加, 乘和减? 那么怎么能把他提取出来呢? 来对比下柯里化的解法.</p>\n<h3 id=\"柯里化函数接口\"><a href=\"#柯里化函数接口\" class=\"headerlink\" title=\"柯里化函数接口\"></a>柯里化函数接口</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> multiple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> +b*a + <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> plus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (+b)+a + <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, stylishChar</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(stylishChar)</div><div class=\"line\">    .reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], multiple(<span class=\"number\">2</span>)))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], plus(<span class=\"number\">2</span>)))</div></pre></td></tr></table></figure>\n<p>有什么不一样呢</p>\n<ol>\n<li>处理数组中字符的函数被提取出来, 作为参数传入</li>\n<li>提取成柯里化的函数, 部分配置好后传入, 好处显而易见, 这下接口非常通畅<br>无论是外层调用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">concatArray([&apos;1&apos;,&apos;2&apos;,&apos;3&apos;], multiple(2))</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>还是内部的 map 函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chars.map(stylishChar)</div></pre></td></tr></table></figure></p>\n<p>这些接口都清晰了很多, 不是吗</p>\n<p>这就是函数式的思想, 用已有的函数组合出新的函数, 而柯里化每消费一个参数, 都会返回一个新的部分配置的函数, 这为函数组合提供了更灵活的手段, 并且使得接口更为流畅.</p>\n<p>再加上自动柯里化的库 <a href=\"https://github.com/CrossEye/ramda\" target=\"_blank\" rel=\"external\">ramda</a>, 简直就完美了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var multiple = ramda.curry(function(a, b)&#123;</div><div class=\"line\">  return +b*a + &apos;&apos;</div><div class=\"line\">&#125;)</div><div class=\"line\">var plus = ramda.curry(function(a, b)&#123;</div><div class=\"line\">  return (+b)+a + &apos;&apos;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/hamoq/3/embed\" target=\"_blank\" rel=\"external\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n","excerpt":"","more":"<p>转自<a href=\"https://gist.github.com/jcouyang/b56a830cd55bd230049f\">jcouyang的gist</a></p>\n<p>还记得 Haskell Curry吗，<img src=\"http://s3.amazonaws.com/lyah/curry.png\" alt=\"\"></p>\n<p>多巧啊, 人家姓 Curry 名 Haskell, 难怪 Haskell 语言会自动柯里化, 呵呵. 但是不奇怪吗, 为什么要柯里化呢. 为什么如此重要导致 Haskell 会默认自动柯里化所有函数, 不就是返回一个部分配置好的函数吗.</p>\n<p>我们来看一个 Haskell 的代码.<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">max</span> <span class=\"number\">3</span> <span class=\"number\">4</span></div><div class=\"line\">(max <span class=\"number\">3</span>) <span class=\"number\">4</span></div></pre></td></tr></table></figure></p>\n<p>结果都是4, 这有设么用呢.</p>\n<p>这里看不出来, 放到<code>高阶函数</code>试试. 什么? 看不懂天书 Haskell, 来看看 JavaScript 吧.</p>\n<h3 id=\"我们来解一个问题\"><a href=\"#我们来解一个问题\" class=\"headerlink\" title=\"我们来解一个问题\"></a>我们来解一个问题</h3><h4 id=\"1-写一个函数-可以连接字符数组-如-f-39-1-39-39-2-39-gt-39-12-39\"><a href=\"#1-写一个函数-可以连接字符数组-如-f-39-1-39-39-2-39-gt-39-12-39\" class=\"headerlink\" title=\"1. 写一个函数, 可以连接字符数组, 如 f([&#39;1&#39;,&#39;2&#39;]) =&gt; &#39;12&#39;\"></a>1. 写一个函数, 可以连接字符数组, 如 <code>f([&#39;1&#39;,&#39;2&#39;]) =&gt; &#39;12&#39;</code></h4><p>好吧,如果不用柯里化, 怎么写? 啊哈 <code>reduce</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> a.concat(b);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">concat([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>]) <span class=\"comment\">// =&gt; '123'</span></div></pre></td></tr></table></figure>\n<p>很简单,对吧.</p>\n<h4 id=\"2-现在我要其中所有数字加1-然后在连接\"><a href=\"#2-现在我要其中所有数字加1-然后在连接\" class=\"headerlink\" title=\"2. 现在我要其中所有数字加1, 然后在连接\"></a>2. 现在我要其中所有数字加1, 然后在连接</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, inc</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">char</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> (+char)+inc + <span class=\"string\">''</span>;</div><div class=\"line\">  &#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], <span class=\"number\">1</span>))<span class=\"comment\">// =&gt; '234'</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-所有数字乘以2-再重构试试看\"><a href=\"#3-所有数字乘以2-再重构试试看\" class=\"headerlink\" title=\"3. 所有数字乘以2, 再重构试试看\"></a>3. 所有数字乘以2, 再重构试试看</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> multiple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> +a*b + <span class=\"string\">''</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, inc</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">char</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> multiple(char, inc);</div><div class=\"line\">  &#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], <span class=\"number\">2</span>)) <span class=\"comment\">// =&gt; '246'</span></div></pre></td></tr></table></figure>\n<p>是不是已经看出问题了呢? 如果我在需要每个数字都减2,是不是很麻烦呢.需要将<code>map</code> 参数匿名函数中的 multiple 函数换掉. 这样一来<code>concatArray</code>就不能同时处理加, 乘和减? 那么怎么能把他提取出来呢? 来对比下柯里化的解法.</p>\n<h3 id=\"柯里化函数接口\"><a href=\"#柯里化函数接口\" class=\"headerlink\" title=\"柯里化函数接口\"></a>柯里化函数接口</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> multiple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> +b*a + <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> plus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (+b)+a + <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, stylishChar</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(stylishChar)</div><div class=\"line\">    .reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], multiple(<span class=\"number\">2</span>)))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], plus(<span class=\"number\">2</span>)))</div></pre></td></tr></table></figure>\n<p>有什么不一样呢</p>\n<ol>\n<li>处理数组中字符的函数被提取出来, 作为参数传入</li>\n<li>提取成柯里化的函数, 部分配置好后传入, 好处显而易见, 这下接口非常通畅<br>无论是外层调用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">concatArray([&apos;1&apos;,&apos;2&apos;,&apos;3&apos;], multiple(2))</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>还是内部的 map 函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chars.map(stylishChar)</div></pre></td></tr></table></figure></p>\n<p>这些接口都清晰了很多, 不是吗</p>\n<p>这就是函数式的思想, 用已有的函数组合出新的函数, 而柯里化每消费一个参数, 都会返回一个新的部分配置的函数, 这为函数组合提供了更灵活的手段, 并且使得接口更为流畅.</p>\n<p>再加上自动柯里化的库 <a href=\"https://github.com/CrossEye/ramda\">ramda</a>, 简直就完美了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var multiple = ramda.curry(function(a, b)&#123;</div><div class=\"line\">  return +b*a + &apos;&apos;</div><div class=\"line\">&#125;)</div><div class=\"line\">var plus = ramda.curry(function(a, b)&#123;</div><div class=\"line\">  return (+b)+a + &apos;&apos;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/hamoq/3/embed\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n"},{"layout":"post","title":"原生ajax","date":"2016-04-21T14:55:15.000Z","comments":1,"keywords":"JS, ajax, 原生","description":"原生js实现ajax","_content":"原生js实现ajax包括get和post\n\n```javascript\nfunction Ajax(type, url, data, success, failed) {\n            // 创建ajax对象\n            var xhr = null;\n            if (window.XMLHttpRequest) {\n                xhr = new XMLHttpRequest();\n            } else {\n                xhr = new ActiveXObject('Microsoft.XMLHTTP')\n            }\n\n            var type = type.toUpperCase();\n            // 用于清除缓存\n            var random = Math.random();\n\n            if (typeof data == 'object') {\n                var str = '';\n                for (var key in data) {\n                    str += key + '=' + data[key] + '&';\n                }\n                data = str.replace(/&$/, '');\n            }\n\n            if (type == 'GET') {\n                if (data) {\n                    xhr.open('GET', url + '?' + data, true);\n                } else {\n                    xhr.open('GET', url + '?t=' + random, true);\n                }\n                xhr.send();\n\n            } else if (type == 'POST') {\n                xhr.open('POST', url, true);\n                // 如果需要像 html 表单那样 POST 数据，请使用 setRequestHeader() 来添加 http 头。\n                xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n                xhr.send(data);\n            }\n\n            // 处理返回数据\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4) {\n                    if (xhr.status == 200) {\n                        success(xhr.responseText);\n                    } else {\n                        if (failed) {\n                            failed(xhr.status);\n                        }\n                    }\n                }\n            }\n        }\n```","source":"_posts/2016-04-21-原生ajax.md","raw":"---\nlayout: post\ntitle: 原生ajax\ndate: 2016-04-21 22:55:15\ncomments: true\ncategories: JS\ntags: [ajax]\nkeywords: JS, ajax, 原生\ndescription: 原生js实现ajax\n---\n原生js实现ajax包括get和post\n\n```javascript\nfunction Ajax(type, url, data, success, failed) {\n            // 创建ajax对象\n            var xhr = null;\n            if (window.XMLHttpRequest) {\n                xhr = new XMLHttpRequest();\n            } else {\n                xhr = new ActiveXObject('Microsoft.XMLHTTP')\n            }\n\n            var type = type.toUpperCase();\n            // 用于清除缓存\n            var random = Math.random();\n\n            if (typeof data == 'object') {\n                var str = '';\n                for (var key in data) {\n                    str += key + '=' + data[key] + '&';\n                }\n                data = str.replace(/&$/, '');\n            }\n\n            if (type == 'GET') {\n                if (data) {\n                    xhr.open('GET', url + '?' + data, true);\n                } else {\n                    xhr.open('GET', url + '?t=' + random, true);\n                }\n                xhr.send();\n\n            } else if (type == 'POST') {\n                xhr.open('POST', url, true);\n                // 如果需要像 html 表单那样 POST 数据，请使用 setRequestHeader() 来添加 http 头。\n                xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n                xhr.send(data);\n            }\n\n            // 处理返回数据\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4) {\n                    if (xhr.status == 200) {\n                        success(xhr.responseText);\n                    } else {\n                        if (failed) {\n                            failed(xhr.status);\n                        }\n                    }\n                }\n            }\n        }\n```","slug":"原生ajax","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxsia000iqjs6l4sy55bc","content":"<p>原生js实现ajax包括get和post</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ajax</span>(<span class=\"params\">type, url, data, success, failed</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 创建ajax对象</span></div><div class=\"line\">            <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">                xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">var</span> type = type.toUpperCase();</div><div class=\"line\">            <span class=\"comment\">// 用于清除缓存</span></div><div class=\"line\">            <span class=\"keyword\">var</span> random = <span class=\"built_in\">Math</span>.random();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data == <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> data) &#123;</div><div class=\"line\">                    str += key + <span class=\"string\">'='</span> + data[key] + <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                data = str.replace(<span class=\"regexp\">/&amp;$/</span>, <span class=\"string\">''</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (type == <span class=\"string\">'GET'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (data) &#123;</div><div class=\"line\">                    xhr.open(<span class=\"string\">'GET'</span>, url + <span class=\"string\">'?'</span> + data, <span class=\"literal\">true</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    xhr.open(<span class=\"string\">'GET'</span>, url + <span class=\"string\">'?t='</span> + random, <span class=\"literal\">true</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                xhr.send();</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">'POST'</span>) &#123;</div><div class=\"line\">                xhr.open(<span class=\"string\">'POST'</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\">                <span class=\"comment\">// 如果需要像 html 表单那样 POST 数据，请使用 setRequestHeader() 来添加 http 头。</span></div><div class=\"line\">                xhr.setRequestHeader(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</div><div class=\"line\">                xhr.send(data);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 处理返回数据</span></div><div class=\"line\">            xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                        success(xhr.responseText);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (failed) &#123;</div><div class=\"line\">                            failed(xhr.status);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>原生js实现ajax包括get和post</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ajax</span>(<span class=\"params\">type, url, data, success, failed</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 创建ajax对象</span></div><div class=\"line\">            <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">                xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">var</span> type = type.toUpperCase();</div><div class=\"line\">            <span class=\"comment\">// 用于清除缓存</span></div><div class=\"line\">            <span class=\"keyword\">var</span> random = <span class=\"built_in\">Math</span>.random();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data == <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> data) &#123;</div><div class=\"line\">                    str += key + <span class=\"string\">'='</span> + data[key] + <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                data = str.replace(<span class=\"regexp\">/&amp;$/</span>, <span class=\"string\">''</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (type == <span class=\"string\">'GET'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (data) &#123;</div><div class=\"line\">                    xhr.open(<span class=\"string\">'GET'</span>, url + <span class=\"string\">'?'</span> + data, <span class=\"literal\">true</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    xhr.open(<span class=\"string\">'GET'</span>, url + <span class=\"string\">'?t='</span> + random, <span class=\"literal\">true</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                xhr.send();</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">'POST'</span>) &#123;</div><div class=\"line\">                xhr.open(<span class=\"string\">'POST'</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\">                <span class=\"comment\">// 如果需要像 html 表单那样 POST 数据，请使用 setRequestHeader() 来添加 http 头。</span></div><div class=\"line\">                xhr.setRequestHeader(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</div><div class=\"line\">                xhr.send(data);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 处理返回数据</span></div><div class=\"line\">            xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                        success(xhr.responseText);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (failed) &#123;</div><div class=\"line\">                            failed(xhr.status);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"js依赖注入","date":"2016-05-04T03:12:27.000Z","comments":1,"keywords":"JS, 依赖注入, DI, IOC, 控制反转","description":"js版依赖注入","_content":"相信用过AngularJS框架的jser应该都知道依赖注入的概念。依赖注入(Dependency Injection)简称DI,做过后台的程序员应该都不会陌生,因为很多后端语言，诸如C#、JAVA都有很好的框架支持，如JAVA中的Spring和C#中的Autofac。\n关于控制反转(IOC)、依赖注入(DI)，博客园有一篇好文[依赖注入那些事儿](http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html)。\n##  分析\n依赖注入本质用途就是解决项目中的硬编码，降低代码耦合度，有效的管理模块依赖。RequireJS和AngularJS都有依赖注入的解决方案,AngularJS有一个内在的依赖注入机制，使用AngularJS，你可以把你的App分成许多个可以重复使用的组件，当需要这些组件的时候，可以通过依赖注入把这些组件注入到你的App中去。\nRequireJS\n```javascript\ndefine(['module1','module2'], function(module1, module2) {\n    // ...\n});\n```\nAngularJS\n```javascript\nangular.module('gulpAngular',\n [\n    'ngAnimate',\n    'ngCookies',\n    'ngTouch'\n    ]);\n```\n使用依赖注入我们应该要达到以下目标\n1、我们应该能够注册依赖关系\n2、注入应该接受一个函数，并返回一个我们需要的函数\n3、我们不能写太多东西——我们需要精简漂亮的语法\n4、注入应该保持被传递函数的作用域\n5、被传递的函数应该能够接受自定义参数，而不仅仅是依赖描述\n6、堪称完美的清单，下面 让我们实现它。\n##  代码实现\n首先，定义一个对象叫做injector，\n```javascript\nvar injector = {\n  dependencies: {},\n  register: function(name, src) {\n    this.dependencies[name] = src;\n  },\n  resolve: function(target) {\n\n  }\n};\n````\ninjector对象中有两个方法，regist负责注册需要依赖的模块并存在dependencies中，第二个方法是resolve，这个方法接收的参数是我们我们要注入依赖的对象，这里的关键的点就是这个注入器不应该调用我们的函数，所以我们在resolve方法中返回一个闭包来包裹我们的target,然后再调用它：\n```javascript\nresolve: function(target) {\n  return function() {\n    target();\n  };\n}\n```\n下一步到AngularJS源码中找到annotate方法，此方法将目标函数转换为一个字符串，删除它的注释(如果有)，然后提取他的参数(依赖项)：\n```javascript\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nfnText = target.toString().replace(STRIP_COMMENTS, '');\nargDecl = fnText.match(FN_ARGS)[1].split(/, ?/g);\nvar args = [];\nfor (var i = 0; i < argDecl.length; i++) {\n    if (this.dependencies[argDecl[i]]) {\n       args.push(this.dependencies[argDecl[i]]);\n     }\n}\nreturn function () {\n     target.apply({}, args);\n}\n```\n```javascript\nvar injector = {\n            //依赖库\n            dependencies: {},\n            //注册依赖\n            regist: function (name, src) {\n                this.dependencies[name] = src;\n            },\n            /**\n             * 返回闭包包裹要调用的函数\n             * @param target 需要注入的对象\n             * @returns {Function}\n             */\n            resolve: function (target) {\n                var FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n                var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n                fnText = target.toString().replace(STRIP_COMMENTS, '');\n                argDecl = fnText.match(FN_ARGS)[1].split(/, ?/g);\n                var args = [];\n                for (var i = 0; i < argDecl.length; i++) {\n                    if (this.dependencies[argDecl[i]]) {\n                        args.push(this.dependencies[argDecl[i]]);\n                    }\n                }\n                return function () {\n                    target.apply({}, args);\n                }\n            }\n        };\n```\n","source":"_posts/2016-05-04-js依赖注入.md","raw":"---\nlayout: post\ntitle: js依赖注入\ndate: 2016-05-04 11:12:27\ncomments: true\ncategories: JS\ntags: [依赖注入]\nkeywords: JS, 依赖注入, DI, IOC, 控制反转\ndescription: js版依赖注入\n---\n相信用过AngularJS框架的jser应该都知道依赖注入的概念。依赖注入(Dependency Injection)简称DI,做过后台的程序员应该都不会陌生,因为很多后端语言，诸如C#、JAVA都有很好的框架支持，如JAVA中的Spring和C#中的Autofac。\n关于控制反转(IOC)、依赖注入(DI)，博客园有一篇好文[依赖注入那些事儿](http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html)。\n##  分析\n依赖注入本质用途就是解决项目中的硬编码，降低代码耦合度，有效的管理模块依赖。RequireJS和AngularJS都有依赖注入的解决方案,AngularJS有一个内在的依赖注入机制，使用AngularJS，你可以把你的App分成许多个可以重复使用的组件，当需要这些组件的时候，可以通过依赖注入把这些组件注入到你的App中去。\nRequireJS\n```javascript\ndefine(['module1','module2'], function(module1, module2) {\n    // ...\n});\n```\nAngularJS\n```javascript\nangular.module('gulpAngular',\n [\n    'ngAnimate',\n    'ngCookies',\n    'ngTouch'\n    ]);\n```\n使用依赖注入我们应该要达到以下目标\n1、我们应该能够注册依赖关系\n2、注入应该接受一个函数，并返回一个我们需要的函数\n3、我们不能写太多东西——我们需要精简漂亮的语法\n4、注入应该保持被传递函数的作用域\n5、被传递的函数应该能够接受自定义参数，而不仅仅是依赖描述\n6、堪称完美的清单，下面 让我们实现它。\n##  代码实现\n首先，定义一个对象叫做injector，\n```javascript\nvar injector = {\n  dependencies: {},\n  register: function(name, src) {\n    this.dependencies[name] = src;\n  },\n  resolve: function(target) {\n\n  }\n};\n````\ninjector对象中有两个方法，regist负责注册需要依赖的模块并存在dependencies中，第二个方法是resolve，这个方法接收的参数是我们我们要注入依赖的对象，这里的关键的点就是这个注入器不应该调用我们的函数，所以我们在resolve方法中返回一个闭包来包裹我们的target,然后再调用它：\n```javascript\nresolve: function(target) {\n  return function() {\n    target();\n  };\n}\n```\n下一步到AngularJS源码中找到annotate方法，此方法将目标函数转换为一个字符串，删除它的注释(如果有)，然后提取他的参数(依赖项)：\n```javascript\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nfnText = target.toString().replace(STRIP_COMMENTS, '');\nargDecl = fnText.match(FN_ARGS)[1].split(/, ?/g);\nvar args = [];\nfor (var i = 0; i < argDecl.length; i++) {\n    if (this.dependencies[argDecl[i]]) {\n       args.push(this.dependencies[argDecl[i]]);\n     }\n}\nreturn function () {\n     target.apply({}, args);\n}\n```\n```javascript\nvar injector = {\n            //依赖库\n            dependencies: {},\n            //注册依赖\n            regist: function (name, src) {\n                this.dependencies[name] = src;\n            },\n            /**\n             * 返回闭包包裹要调用的函数\n             * @param target 需要注入的对象\n             * @returns {Function}\n             */\n            resolve: function (target) {\n                var FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n                var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n                fnText = target.toString().replace(STRIP_COMMENTS, '');\n                argDecl = fnText.match(FN_ARGS)[1].split(/, ?/g);\n                var args = [];\n                for (var i = 0; i < argDecl.length; i++) {\n                    if (this.dependencies[argDecl[i]]) {\n                        args.push(this.dependencies[argDecl[i]]);\n                    }\n                }\n                return function () {\n                    target.apply({}, args);\n                }\n            }\n        };\n```\n","slug":"js依赖注入","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxsib000kqjs6r6q7xre9","content":"<p>相信用过AngularJS框架的jser应该都知道依赖注入的概念。依赖注入(Dependency Injection)简称DI,做过后台的程序员应该都不会陌生,因为很多后端语言，诸如C#、JAVA都有很好的框架支持，如JAVA中的Spring和C#中的Autofac。<br>关于控制反转(IOC)、依赖注入(DI)，博客园有一篇好文<a href=\"http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html\" target=\"_blank\" rel=\"external\">依赖注入那些事儿</a>。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>依赖注入本质用途就是解决项目中的硬编码，降低代码耦合度，有效的管理模块依赖。RequireJS和AngularJS都有依赖注入的解决方案,AngularJS有一个内在的依赖注入机制，使用AngularJS，你可以把你的App分成许多个可以重复使用的组件，当需要这些组件的时候，可以通过依赖注入把这些组件注入到你的App中去。<br>RequireJS<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'module1'</span>,<span class=\"string\">'module2'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module1, module2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>AngularJS<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'gulpAngular'</span>,</div><div class=\"line\"> [</div><div class=\"line\">    <span class=\"string\">'ngAnimate'</span>,</div><div class=\"line\">    <span class=\"string\">'ngCookies'</span>,</div><div class=\"line\">    <span class=\"string\">'ngTouch'</span></div><div class=\"line\">    ]);</div></pre></td></tr></table></figure></p>\n<p>使用依赖注入我们应该要达到以下目标<br>1、我们应该能够注册依赖关系<br>2、注入应该接受一个函数，并返回一个我们需要的函数<br>3、我们不能写太多东西——我们需要精简漂亮的语法<br>4、注入应该保持被传递函数的作用域<br>5、被传递的函数应该能够接受自定义参数，而不仅仅是依赖描述<br>6、堪称完美的清单，下面 让我们实现它。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>首先，定义一个对象叫做injector，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector = &#123;</div><div class=\"line\">  dependencies: &#123;&#125;,</div><div class=\"line\">  register: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, src</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dependencies[name] = src;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  resolve: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<p>injector对象中有两个方法，regist负责注册需要依赖的模块并存在dependencies中，第二个方法是resolve，这个方法接收的参数是我们我们要注入依赖的对象，这里的关键的点就是这个注入器不应该调用我们的函数，所以我们在resolve方法中返回一个闭包来包裹我们的target,然后再调用它：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    target();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下一步到AngularJS源码中找到annotate方法，此方法将目标函数转换为一个字符串，删除它的注释(如果有)，然后提取他的参数(依赖项)：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> FN_ARGS = <span class=\"regexp\">/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> STRIP_COMMENTS = <span class=\"regexp\">/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg</span>;</div><div class=\"line\">fnText = target.toString().replace(STRIP_COMMENTS, <span class=\"string\">''</span>);</div><div class=\"line\">argDecl = fnText.match(FN_ARGS)[<span class=\"number\">1</span>].split(<span class=\"regexp\">/, ?/g</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> args = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; argDecl.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dependencies[argDecl[i]]) &#123;</div><div class=\"line\">       args.push(<span class=\"keyword\">this</span>.dependencies[argDecl[i]]);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     target.apply(&#123;&#125;, args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector = &#123;</div><div class=\"line\">            <span class=\"comment\">//依赖库</span></div><div class=\"line\">            dependencies: &#123;&#125;,</div><div class=\"line\">            <span class=\"comment\">//注册依赖</span></div><div class=\"line\">            regist: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, src</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.dependencies[name] = src;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             * 返回闭包包裹要调用的函数</div><div class=\"line\">             * @param target 需要注入的对象</div><div class=\"line\">             * @returns &#123;Function&#125;</div><div class=\"line\">             */</div><div class=\"line\">            resolve: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> FN_ARGS = <span class=\"regexp\">/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m</span>;</div><div class=\"line\">                <span class=\"keyword\">var</span> STRIP_COMMENTS = <span class=\"regexp\">/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg</span>;</div><div class=\"line\">                fnText = target.toString().replace(STRIP_COMMENTS, <span class=\"string\">''</span>);</div><div class=\"line\">                argDecl = fnText.match(FN_ARGS)[<span class=\"number\">1</span>].split(<span class=\"regexp\">/, ?/g</span>);</div><div class=\"line\">                <span class=\"keyword\">var</span> args = [];</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; argDecl.length; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dependencies[argDecl[i]]) &#123;</div><div class=\"line\">                        args.push(<span class=\"keyword\">this</span>.dependencies[argDecl[i]]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    target.apply(&#123;&#125;, args);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>相信用过AngularJS框架的jser应该都知道依赖注入的概念。依赖注入(Dependency Injection)简称DI,做过后台的程序员应该都不会陌生,因为很多后端语言，诸如C#、JAVA都有很好的框架支持，如JAVA中的Spring和C#中的Autofac。<br>关于控制反转(IOC)、依赖注入(DI)，博客园有一篇好文<a href=\"http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html\">依赖注入那些事儿</a>。</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>依赖注入本质用途就是解决项目中的硬编码，降低代码耦合度，有效的管理模块依赖。RequireJS和AngularJS都有依赖注入的解决方案,AngularJS有一个内在的依赖注入机制，使用AngularJS，你可以把你的App分成许多个可以重复使用的组件，当需要这些组件的时候，可以通过依赖注入把这些组件注入到你的App中去。<br>RequireJS<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'module1'</span>,<span class=\"string\">'module2'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module1, module2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>AngularJS<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'gulpAngular'</span>,</div><div class=\"line\"> [</div><div class=\"line\">    <span class=\"string\">'ngAnimate'</span>,</div><div class=\"line\">    <span class=\"string\">'ngCookies'</span>,</div><div class=\"line\">    <span class=\"string\">'ngTouch'</span></div><div class=\"line\">    ]);</div></pre></td></tr></table></figure></p>\n<p>使用依赖注入我们应该要达到以下目标<br>1、我们应该能够注册依赖关系<br>2、注入应该接受一个函数，并返回一个我们需要的函数<br>3、我们不能写太多东西——我们需要精简漂亮的语法<br>4、注入应该保持被传递函数的作用域<br>5、被传递的函数应该能够接受自定义参数，而不仅仅是依赖描述<br>6、堪称完美的清单，下面 让我们实现它。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>首先，定义一个对象叫做injector，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector = &#123;</div><div class=\"line\">  dependencies: &#123;&#125;,</div><div class=\"line\">  register: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, src</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dependencies[name] = src;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  resolve: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<p>injector对象中有两个方法，regist负责注册需要依赖的模块并存在dependencies中，第二个方法是resolve，这个方法接收的参数是我们我们要注入依赖的对象，这里的关键的点就是这个注入器不应该调用我们的函数，所以我们在resolve方法中返回一个闭包来包裹我们的target,然后再调用它：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    target();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下一步到AngularJS源码中找到annotate方法，此方法将目标函数转换为一个字符串，删除它的注释(如果有)，然后提取他的参数(依赖项)：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> FN_ARGS = <span class=\"regexp\">/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> STRIP_COMMENTS = <span class=\"regexp\">/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg</span>;</div><div class=\"line\">fnText = target.toString().replace(STRIP_COMMENTS, <span class=\"string\">''</span>);</div><div class=\"line\">argDecl = fnText.match(FN_ARGS)[<span class=\"number\">1</span>].split(<span class=\"regexp\">/, ?/g</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> args = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; argDecl.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dependencies[argDecl[i]]) &#123;</div><div class=\"line\">       args.push(<span class=\"keyword\">this</span>.dependencies[argDecl[i]]);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     target.apply(&#123;&#125;, args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector = &#123;</div><div class=\"line\">            <span class=\"comment\">//依赖库</span></div><div class=\"line\">            dependencies: &#123;&#125;,</div><div class=\"line\">            <span class=\"comment\">//注册依赖</span></div><div class=\"line\">            regist: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, src</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.dependencies[name] = src;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"comment\">/**</div><div class=\"line\">             * 返回闭包包裹要调用的函数</div><div class=\"line\">             * @param target 需要注入的对象</div><div class=\"line\">             * @returns &#123;Function&#125;</div><div class=\"line\">             */</span></div><div class=\"line\">            resolve: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> FN_ARGS = <span class=\"regexp\">/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m</span>;</div><div class=\"line\">                <span class=\"keyword\">var</span> STRIP_COMMENTS = <span class=\"regexp\">/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg</span>;</div><div class=\"line\">                fnText = target.toString().replace(STRIP_COMMENTS, <span class=\"string\">''</span>);</div><div class=\"line\">                argDecl = fnText.match(FN_ARGS)[<span class=\"number\">1</span>].split(<span class=\"regexp\">/, ?/g</span>);</div><div class=\"line\">                <span class=\"keyword\">var</span> args = [];</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; argDecl.length; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dependencies[argDecl[i]]) &#123;</div><div class=\"line\">                        args.push(<span class=\"keyword\">this</span>.dependencies[argDecl[i]]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    target.apply(&#123;&#125;, args);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"跨域和jsonp","date":"2016-06-15T02:44:33.000Z","comments":1,"keywords":"JS, 跨域, JSONP","description":"JSONP跨域","_content":"## 前言\n在开发过程中往往会遇到js跨域问题，在面试中跨域几乎是必考题。js跨域有很多方式，jsonp只是其中一种，许多人对jsonp似懂非懂，下面说一下js跨域原因以及jsonp原理。\n## 同源策略\n为安全考虑，Netscape提出了同源策略 Same-Origin-Policy(SOP)。url组成包括协议名，子域名，主域名，端口号只要协议，域名，端口有任何一个的不同，就被认为是跨域，即禁止页面加载或执行与自身来源不同的域的任何脚本。即使是 localhost:8080 请求 127.0.0.1:8080 也会被认为是跨域。\n实现跨域有很多种方法：\n1. 服务端代理\n2. 服务端返回响应头Access-Control-Allow-Origin\n3. jsonp\n4. iframe嵌入页面\n5. html5 postMessage\n## jsonp原理\n我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。\n浏览器中script、img、iframe、link这些包含 src 属性的标签可以加载跨域资源。但浏览器限制了JavaScript的权限使其不能读、写加载的内容。\n简单来说，jsonp就是动态添加script标签引入src来实现跨域。\n\n原生js\n```javascript\n//客户端\nfunction addScriptTag(src) {\n     var script = document.createElement('script');\n     script.setAttribute('type', 'text/javascript');\n     script.src = src;\n     document.body.appendChild(script);\n };\n//如：在onload后，跨域请求\nwindow.onload = function () {\n     addScriptTag('http://127.0.0.1:8080?callback=callback');\n};\n//回调的方法,且必须为全局方法，不然会报错\nfunction callback(data) {\n     console.log(data);\n};\n//服务端 node.js\nvar http = require('http');\nvar url = require('url');\nvar querystring = require('querystring');\nvar server = http.createServer();\nserver.on('request', function (req, res) {\n    console.log(url.parse(req.url));\n    var urlPath = url.parse(req.url).pathname;\n    var qs = querystring.parse(req.url.split('?')[1]);\n    console.log(qs);\n    if (qs.callback) {\n        res.writeHead(200, {'Content-Type': 'application/json;charset=utf-8'});\n        var data = {\n            \"name\": \"hugh dai\"\n        };\n        data = JSON.stringify(data);\n        var callback = qs.callback+'('+data+');';\n        res.end(callback);\n    }\n    else {\n        res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'});\n        res.end('Hell World\\n');\n    }\n})\nserver.listen('8080');\nconsole.log('Server running...');\n```\njquery实现\n```javascript\n$.ajax({\n        type: \"get\",\n        async: false,\n        url: \"http://127.0.0.1:8080\",\n        dataType: \"jsonp\",\n        jsonpCallback:\"callback\", //callback函数(jsonp回调函数，默认是callback)\n        success: function(data){\n            //如果有callback函数的话两者都会执行\n            console.log(data);\n        },\n        error: function(){\n            console.log('fail');\n        }\n    });\n```","source":"_posts/2016-06-15-跨域和jsonp.md","raw":"---\nlayout: post\ntitle: 跨域和jsonp\ndate: 2016-06-15 10:44:33\ncomments: true\ncategories: JS\ntags: [跨域]\nkeywords: JS, 跨域, JSONP\ndescription: JSONP跨域\n---\n## 前言\n在开发过程中往往会遇到js跨域问题，在面试中跨域几乎是必考题。js跨域有很多方式，jsonp只是其中一种，许多人对jsonp似懂非懂，下面说一下js跨域原因以及jsonp原理。\n## 同源策略\n为安全考虑，Netscape提出了同源策略 Same-Origin-Policy(SOP)。url组成包括协议名，子域名，主域名，端口号只要协议，域名，端口有任何一个的不同，就被认为是跨域，即禁止页面加载或执行与自身来源不同的域的任何脚本。即使是 localhost:8080 请求 127.0.0.1:8080 也会被认为是跨域。\n实现跨域有很多种方法：\n1. 服务端代理\n2. 服务端返回响应头Access-Control-Allow-Origin\n3. jsonp\n4. iframe嵌入页面\n5. html5 postMessage\n## jsonp原理\n我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。\n浏览器中script、img、iframe、link这些包含 src 属性的标签可以加载跨域资源。但浏览器限制了JavaScript的权限使其不能读、写加载的内容。\n简单来说，jsonp就是动态添加script标签引入src来实现跨域。\n\n原生js\n```javascript\n//客户端\nfunction addScriptTag(src) {\n     var script = document.createElement('script');\n     script.setAttribute('type', 'text/javascript');\n     script.src = src;\n     document.body.appendChild(script);\n };\n//如：在onload后，跨域请求\nwindow.onload = function () {\n     addScriptTag('http://127.0.0.1:8080?callback=callback');\n};\n//回调的方法,且必须为全局方法，不然会报错\nfunction callback(data) {\n     console.log(data);\n};\n//服务端 node.js\nvar http = require('http');\nvar url = require('url');\nvar querystring = require('querystring');\nvar server = http.createServer();\nserver.on('request', function (req, res) {\n    console.log(url.parse(req.url));\n    var urlPath = url.parse(req.url).pathname;\n    var qs = querystring.parse(req.url.split('?')[1]);\n    console.log(qs);\n    if (qs.callback) {\n        res.writeHead(200, {'Content-Type': 'application/json;charset=utf-8'});\n        var data = {\n            \"name\": \"hugh dai\"\n        };\n        data = JSON.stringify(data);\n        var callback = qs.callback+'('+data+');';\n        res.end(callback);\n    }\n    else {\n        res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'});\n        res.end('Hell World\\n');\n    }\n})\nserver.listen('8080');\nconsole.log('Server running...');\n```\njquery实现\n```javascript\n$.ajax({\n        type: \"get\",\n        async: false,\n        url: \"http://127.0.0.1:8080\",\n        dataType: \"jsonp\",\n        jsonpCallback:\"callback\", //callback函数(jsonp回调函数，默认是callback)\n        success: function(data){\n            //如果有callback函数的话两者都会执行\n            console.log(data);\n        },\n        error: function(){\n            console.log('fail');\n        }\n    });\n```","slug":"跨域和jsonp","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxsie000oqjs6t79h42t2","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在开发过程中往往会遇到js跨域问题，在面试中跨域几乎是必考题。js跨域有很多方式，jsonp只是其中一种，许多人对jsonp似懂非懂，下面说一下js跨域原因以及jsonp原理。</p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>为安全考虑，Netscape提出了同源策略 Same-Origin-Policy(SOP)。url组成包括协议名，子域名，主域名，端口号只要协议，域名，端口有任何一个的不同，就被认为是跨域，即禁止页面加载或执行与自身来源不同的域的任何脚本。即使是 localhost:8080 请求 127.0.0.1:8080 也会被认为是跨域。<br>实现跨域有很多种方法：</p>\n<ol>\n<li>服务端代理</li>\n<li>服务端返回响应头Access-Control-Allow-Origin</li>\n<li>jsonp</li>\n<li>iframe嵌入页面</li>\n<li>html5 postMessage<h2 id=\"jsonp原理\"><a href=\"#jsonp原理\" class=\"headerlink\" title=\"jsonp原理\"></a>jsonp原理</h2>我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。<br>浏览器中script、img、iframe、link这些包含 src 属性的标签可以加载跨域资源。但浏览器限制了JavaScript的权限使其不能读、写加载的内容。<br>简单来说，jsonp就是动态添加script标签引入src来实现跨域。</li>\n</ol>\n<p>原生js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//客户端</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addScriptTag</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">     script.setAttribute(<span class=\"string\">'type'</span>, <span class=\"string\">'text/javascript'</span>);</div><div class=\"line\">     script.src = src;</div><div class=\"line\">     <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\"> &#125;;</div><div class=\"line\"><span class=\"comment\">//如：在onload后，跨域请求</span></div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     addScriptTag(<span class=\"string\">'http://127.0.0.1:8080?callback=callback'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//回调的方法,且必须为全局方法，不然会报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//服务端 node.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</div><div class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(url.parse(req.url));</div><div class=\"line\">    <span class=\"keyword\">var</span> urlPath = url.parse(req.url).pathname;</div><div class=\"line\">    <span class=\"keyword\">var</span> qs = querystring.parse(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(qs);</div><div class=\"line\">    <span class=\"keyword\">if</span> (qs.callback) &#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json;charset=utf-8'</span>&#125;);</div><div class=\"line\">        <span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"hugh dai\"</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        data = <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">        <span class=\"keyword\">var</span> callback = qs.callback+<span class=\"string\">'('</span>+data+<span class=\"string\">');'</span>;</div><div class=\"line\">        res.end(callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html;charset=utf-8'</span>&#125;);</div><div class=\"line\">        res.end(<span class=\"string\">'Hell World\\n'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">server.listen(<span class=\"string\">'8080'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running...'</span>);</div></pre></td></tr></table></figure></p>\n<p>jquery实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">        type: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">        <span class=\"keyword\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        url: <span class=\"string\">\"http://127.0.0.1:8080\"</span>,</div><div class=\"line\">        dataType: <span class=\"string\">\"jsonp\"</span>,</div><div class=\"line\">        jsonpCallback:<span class=\"string\">\"callback\"</span>, <span class=\"comment\">//callback函数(jsonp回调函数，默认是callback)</span></div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//如果有callback函数的话两者都会执行</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在开发过程中往往会遇到js跨域问题，在面试中跨域几乎是必考题。js跨域有很多方式，jsonp只是其中一种，许多人对jsonp似懂非懂，下面说一下js跨域原因以及jsonp原理。</p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>为安全考虑，Netscape提出了同源策略 Same-Origin-Policy(SOP)。url组成包括协议名，子域名，主域名，端口号只要协议，域名，端口有任何一个的不同，就被认为是跨域，即禁止页面加载或执行与自身来源不同的域的任何脚本。即使是 localhost:8080 请求 127.0.0.1:8080 也会被认为是跨域。<br>实现跨域有很多种方法：</p>\n<ol>\n<li>服务端代理</li>\n<li>服务端返回响应头Access-Control-Allow-Origin</li>\n<li>jsonp</li>\n<li>iframe嵌入页面</li>\n<li>html5 postMessage<h2 id=\"jsonp原理\"><a href=\"#jsonp原理\" class=\"headerlink\" title=\"jsonp原理\"></a>jsonp原理</h2>我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。<br>浏览器中script、img、iframe、link这些包含 src 属性的标签可以加载跨域资源。但浏览器限制了JavaScript的权限使其不能读、写加载的内容。<br>简单来说，jsonp就是动态添加script标签引入src来实现跨域。</li>\n</ol>\n<p>原生js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//客户端</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addScriptTag</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">     script.setAttribute(<span class=\"string\">'type'</span>, <span class=\"string\">'text/javascript'</span>);</div><div class=\"line\">     script.src = src;</div><div class=\"line\">     <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\"> &#125;;</div><div class=\"line\"><span class=\"comment\">//如：在onload后，跨域请求</span></div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     addScriptTag(<span class=\"string\">'http://127.0.0.1:8080?callback=callback'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//回调的方法,且必须为全局方法，不然会报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//服务端 node.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</div><div class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(url.parse(req.url));</div><div class=\"line\">    <span class=\"keyword\">var</span> urlPath = url.parse(req.url).pathname;</div><div class=\"line\">    <span class=\"keyword\">var</span> qs = querystring.parse(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(qs);</div><div class=\"line\">    <span class=\"keyword\">if</span> (qs.callback) &#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json;charset=utf-8'</span>&#125;);</div><div class=\"line\">        <span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"hugh dai\"</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        data = <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">        <span class=\"keyword\">var</span> callback = qs.callback+<span class=\"string\">'('</span>+data+<span class=\"string\">');'</span>;</div><div class=\"line\">        res.end(callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html;charset=utf-8'</span>&#125;);</div><div class=\"line\">        res.end(<span class=\"string\">'Hell World\\n'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">server.listen(<span class=\"string\">'8080'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running...'</span>);</div></pre></td></tr></table></figure></p>\n<p>jquery实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">        type: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">        <span class=\"keyword\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        url: <span class=\"string\">\"http://127.0.0.1:8080\"</span>,</div><div class=\"line\">        dataType: <span class=\"string\">\"jsonp\"</span>,</div><div class=\"line\">        jsonpCallback:<span class=\"string\">\"callback\"</span>, <span class=\"comment\">//callback函数(jsonp回调函数，默认是callback)</span></div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//如果有callback函数的话两者都会执行</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n"},{"layout":"post","title":"Github/Gitlab多账户SSH Key切换","date":"2016-07-01T09:38:13.000Z","comments":1,"keywords":"ssh, GitLab, GitHub","description":"使用ssh config实现GitLab 和 GitHub账户切换","_content":"由于目前公司使用GitLab托管代码,本人又在GitHub上有自己的代码仓库。同时用来生成public key的邮箱也不一样,公司GitLab用的是 daixu@zuche.com ,自己GitHub用的是 cynicism2011@gmail.com 。\n这样用起来就非常操蛋了,每次切换的时候都得切换public key。google了一下发现用ssh config轻松解决。\n\n### 配置Git邮箱\n\n```bash\n    #默认全局 GitHub使用\n    git config --global user.name 'hughdai' && git config --global user.email 'cynicism2011@gmail.com'\n    #公司项目 GitLab使用\n    git config --local user.name 'daixu' && git config --local user.email 'daixu@zuche.com'\n```\n\n### 生成SSH Key\n\nssh有不会的话自行google\n\n```bash\n    # 默认文件名 GitHub使用\n    ssh-keygen -t rsa -C 'cynicism2011@gmail.com'\n    # 指定文件名 GitLab使用\n    ssh-keygen -t rsa -f ~/.ssh/id_rsa.zuche -C 'daixu@zuche.com'\n```\n分别把.pub文件添加到SSH Keys中\n\n### 配置ssh config\n执行 touch ~/.ssh/config,创建config文件,添加相应配置\n\n```bash\n    Host *.zuche.com\n         HostName zuche.com\n         IdentityFile ~/.ssh/id_rsa.zuche\n```\n\n### 验证\n```bash\n    ssh -T git@github.com\n```","source":"_posts/2016-07-01-Github-Gitlab多账户SSH-Key切换.md","raw":"---\nlayout: post\ntitle: Github/Gitlab多账户SSH Key切换\ndate: 2016-07-01 17:38:13\ncomments: true\ncategories: tool config\ntags: [Git]\nkeywords: ssh, GitLab, GitHub\ndescription: 使用ssh config实现GitLab 和 GitHub账户切换\n---\n由于目前公司使用GitLab托管代码,本人又在GitHub上有自己的代码仓库。同时用来生成public key的邮箱也不一样,公司GitLab用的是 daixu@zuche.com ,自己GitHub用的是 cynicism2011@gmail.com 。\n这样用起来就非常操蛋了,每次切换的时候都得切换public key。google了一下发现用ssh config轻松解决。\n\n### 配置Git邮箱\n\n```bash\n    #默认全局 GitHub使用\n    git config --global user.name 'hughdai' && git config --global user.email 'cynicism2011@gmail.com'\n    #公司项目 GitLab使用\n    git config --local user.name 'daixu' && git config --local user.email 'daixu@zuche.com'\n```\n\n### 生成SSH Key\n\nssh有不会的话自行google\n\n```bash\n    # 默认文件名 GitHub使用\n    ssh-keygen -t rsa -C 'cynicism2011@gmail.com'\n    # 指定文件名 GitLab使用\n    ssh-keygen -t rsa -f ~/.ssh/id_rsa.zuche -C 'daixu@zuche.com'\n```\n分别把.pub文件添加到SSH Keys中\n\n### 配置ssh config\n执行 touch ~/.ssh/config,创建config文件,添加相应配置\n\n```bash\n    Host *.zuche.com\n         HostName zuche.com\n         IdentityFile ~/.ssh/id_rsa.zuche\n```\n\n### 验证\n```bash\n    ssh -T git@github.com\n```","slug":"Github-Gitlab多账户SSH-Key切换","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxsif000qqjs62xc0cjlc","content":"<p>由于目前公司使用GitLab托管代码,本人又在GitHub上有自己的代码仓库。同时用来生成public key的邮箱也不一样,公司GitLab用的是 daixu@zuche.com ,自己GitHub用的是 cynicism2011@gmail.com 。<br>这样用起来就非常操蛋了,每次切换的时候都得切换public key。google了一下发现用ssh config轻松解决。</p>\n<h3 id=\"配置Git邮箱\"><a href=\"#配置Git邮箱\" class=\"headerlink\" title=\"配置Git邮箱\"></a>配置Git邮箱</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#默认全局 GitHub使用</span></div><div class=\"line\">git config --global user.name <span class=\"string\">'hughdai'</span> &amp;&amp; git config --global user.email <span class=\"string\">'cynicism2011@gmail.com'</span></div><div class=\"line\"><span class=\"comment\">#公司项目 GitLab使用</span></div><div class=\"line\">git config --local user.name <span class=\"string\">'daixu'</span> &amp;&amp; git config --local user.email <span class=\"string\">'daixu@zuche.com'</span></div></pre></td></tr></table></figure>\n<h3 id=\"生成SSH-Key\"><a href=\"#生成SSH-Key\" class=\"headerlink\" title=\"生成SSH Key\"></a>生成SSH Key</h3><p>ssh有不会的话自行google</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 默认文件名 GitHub使用</span></div><div class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">'cynicism2011@gmail.com'</span></div><div class=\"line\"><span class=\"comment\"># 指定文件名 GitLab使用</span></div><div class=\"line\">ssh-keygen -t rsa <span class=\"_\">-f</span> ~/.ssh/id_rsa.zuche -C <span class=\"string\">'daixu@zuche.com'</span></div></pre></td></tr></table></figure>\n<p>分别把.pub文件添加到SSH Keys中</p>\n<h3 id=\"配置ssh-config\"><a href=\"#配置ssh-config\" class=\"headerlink\" title=\"配置ssh config\"></a>配置ssh config</h3><p>执行 touch ~/.ssh/config,创建config文件,添加相应配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host *.zuche.com</div><div class=\"line\">     HostName zuche.com</div><div class=\"line\">     IdentityFile ~/.ssh/id_rsa.zuche</div></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>由于目前公司使用GitLab托管代码,本人又在GitHub上有自己的代码仓库。同时用来生成public key的邮箱也不一样,公司GitLab用的是 daixu@zuche.com ,自己GitHub用的是 cynicism2011@gmail.com 。<br>这样用起来就非常操蛋了,每次切换的时候都得切换public key。google了一下发现用ssh config轻松解决。</p>\n<h3 id=\"配置Git邮箱\"><a href=\"#配置Git邮箱\" class=\"headerlink\" title=\"配置Git邮箱\"></a>配置Git邮箱</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#默认全局 GitHub使用</span></div><div class=\"line\">git config --global user.name <span class=\"string\">'hughdai'</span> &amp;&amp; git config --global user.email <span class=\"string\">'cynicism2011@gmail.com'</span></div><div class=\"line\"><span class=\"comment\">#公司项目 GitLab使用</span></div><div class=\"line\">git config --local user.name <span class=\"string\">'daixu'</span> &amp;&amp; git config --local user.email <span class=\"string\">'daixu@zuche.com'</span></div></pre></td></tr></table></figure>\n<h3 id=\"生成SSH-Key\"><a href=\"#生成SSH-Key\" class=\"headerlink\" title=\"生成SSH Key\"></a>生成SSH Key</h3><p>ssh有不会的话自行google</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 默认文件名 GitHub使用</span></div><div class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">'cynicism2011@gmail.com'</span></div><div class=\"line\"><span class=\"comment\"># 指定文件名 GitLab使用</span></div><div class=\"line\">ssh-keygen -t rsa <span class=\"_\">-f</span> ~/.ssh/id_rsa.zuche -C <span class=\"string\">'daixu@zuche.com'</span></div></pre></td></tr></table></figure>\n<p>分别把.pub文件添加到SSH Keys中</p>\n<h3 id=\"配置ssh-config\"><a href=\"#配置ssh-config\" class=\"headerlink\" title=\"配置ssh config\"></a>配置ssh config</h3><p>执行 touch ~/.ssh/config,创建config文件,添加相应配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host *.zuche.com</div><div class=\"line\">     HostName zuche.com</div><div class=\"line\">     IdentityFile ~/.ssh/id_rsa.zuche</div></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>"},{"layout":"post","title":"打字动画","date":"2016-06-16T06:13:30.000Z","comments":1,"keywords":"css, animation, 动画, typing","description":"css3打字动画,typing animation","_content":"CSS typing animation\n最近在看[CSS大牛张鹏译著 CSS SECRETS](https://github.com/cssmagic)，学到了不少，有种醍醐灌顶的感觉。\n以下是从书中摘出的打字动画部分(CSS typing animation)。详情请看[本书作者LEA VEROU的博客](http://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/)\n\n效果\n\n<h1 id=\"h1\">CSS typing animation </h1>\n<style type=\"text/css\">\n            @keyframes typing {\n                from {\n                    width: 0\n                }\n            }\n            @keyframes caret {\n                50% {\n                    border-color: transparent;\n                }\n            }\n            #h1{\n                width: 21ch;\n                overflow: hidden;\n                white-space: nowrap;\n                border-right: .05em solid;\n                animation:typing 6s steps(21) infinite,\n                            caret 1s steps(1) infinite;\n            }\n</style>\n\n代码\n```html\n        <h1 id=\"h1\">CSS typing animation </h1>\n```\n```css\n        @keyframes typing {\n            from {\n                width: 0\n            }\n        }\n        @keyframes caret {\n            50% {\n                border-color: transparent;\n            }\n        }\n        #h1{\n            width: 21ch;\n            overflow: hidden;\n            white-space: nowrap;\n            border-right: .05em solid;\n            animation:typing 6s steps(21) infinite,\n                        caret 1s steps(1) infinite;\n        }\n```\n","source":"_posts/2016-06-16-打字动画.md","raw":"---\nlayout: post\ntitle: 打字动画\ndate: 2016-06-16 14:13:30\ncomments: true\ncategories: CSS\ntags: [animation]\nkeywords: css, animation, 动画, typing\ndescription: css3打字动画,typing animation\n---\nCSS typing animation\n最近在看[CSS大牛张鹏译著 CSS SECRETS](https://github.com/cssmagic)，学到了不少，有种醍醐灌顶的感觉。\n以下是从书中摘出的打字动画部分(CSS typing animation)。详情请看[本书作者LEA VEROU的博客](http://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/)\n\n效果\n\n<h1 id=\"h1\">CSS typing animation </h1>\n<style type=\"text/css\">\n            @keyframes typing {\n                from {\n                    width: 0\n                }\n            }\n            @keyframes caret {\n                50% {\n                    border-color: transparent;\n                }\n            }\n            #h1{\n                width: 21ch;\n                overflow: hidden;\n                white-space: nowrap;\n                border-right: .05em solid;\n                animation:typing 6s steps(21) infinite,\n                            caret 1s steps(1) infinite;\n            }\n</style>\n\n代码\n```html\n        <h1 id=\"h1\">CSS typing animation </h1>\n```\n```css\n        @keyframes typing {\n            from {\n                width: 0\n            }\n        }\n        @keyframes caret {\n            50% {\n                border-color: transparent;\n            }\n        }\n        #h1{\n            width: 21ch;\n            overflow: hidden;\n            white-space: nowrap;\n            border-right: .05em solid;\n            animation:typing 6s steps(21) infinite,\n                        caret 1s steps(1) infinite;\n        }\n```\n","slug":"打字动画","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxsih000uqjs68l2no823","content":"<p>CSS typing animation<br>最近在看<a href=\"https://github.com/cssmagic\" target=\"_blank\" rel=\"external\">CSS大牛张鹏译著 CSS SECRETS</a>，学到了不少，有种醍醐灌顶的感觉。<br>以下是从书中摘出的打字动画部分(CSS typing animation)。详情请看<a href=\"http://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/\" target=\"_blank\" rel=\"external\">本书作者LEA VEROU的博客</a></p>\n<p>效果</p>\n<p></p><h1 id=\"h1\">CSS typing animation </h1><p></p>\n<style type=\"text/css\">\n            @keyframes typing {\n                from {\n                    width: 0\n                }\n            }\n            @keyframes caret {\n                50% {\n                    border-color: transparent;\n                }\n            }\n            #h1{\n                width: 21ch;\n                overflow: hidden;\n                white-space: nowrap;\n                border-right: .05em solid;\n                animation:typing 6s steps(21) infinite,\n                            caret 1s steps(1) infinite;\n            }\n</style>\n\n<p>代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"h1\"</span>&gt;</span>CSS typing animation <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> typing &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> caret &#123;</div><div class=\"line\">    50% &#123;</div><div class=\"line\">        <span class=\"attribute\">border-color</span>: transparent;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-id\">#h1</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">21ch</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: .<span class=\"number\">05em</span> solid;</div><div class=\"line\">    <span class=\"attribute\">animation</span>:typing <span class=\"number\">6s</span> <span class=\"built_in\">steps</span>(21) infinite,</div><div class=\"line\">                caret <span class=\"number\">1s</span> <span class=\"built_in\">steps</span>(1) infinite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>CSS typing animation<br>最近在看<a href=\"https://github.com/cssmagic\">CSS大牛张鹏译著 CSS SECRETS</a>，学到了不少，有种醍醐灌顶的感觉。<br>以下是从书中摘出的打字动画部分(CSS typing animation)。详情请看<a href=\"http://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/\">本书作者LEA VEROU的博客</a></p>\n<p>效果</p>\n<p><h1 id=\"h1\">CSS typing animation </h1></p>\n<style type=\"text/css\">\n            @keyframes typing {\n                from {\n                    width: 0\n                }\n            }\n            @keyframes caret {\n                50% {\n                    border-color: transparent;\n                }\n            }\n            #h1{\n                width: 21ch;\n                overflow: hidden;\n                white-space: nowrap;\n                border-right: .05em solid;\n                animation:typing 6s steps(21) infinite,\n                            caret 1s steps(1) infinite;\n            }\n</style>\n\n<p>代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"h1\"</span>&gt;</span>CSS typing animation <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> typing &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> caret &#123;</div><div class=\"line\">    50% &#123;</div><div class=\"line\">        <span class=\"attribute\">border-color</span>: transparent;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-id\">#h1</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">21ch</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: .<span class=\"number\">05em</span> solid;</div><div class=\"line\">    <span class=\"attribute\">animation</span>:typing <span class=\"number\">6s</span> <span class=\"built_in\">steps</span>(21) infinite,</div><div class=\"line\">                caret <span class=\"number\">1s</span> <span class=\"built_in\">steps</span>(1) infinite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"date":"2017-03-24T06:31:27.000Z","layout":"post","title":"js多维数组扁平化","comments":1,"keywords":"js,数组,扁平化","description":"js多维数组扁平化","_content":"一次面试,笔试题中有一道题目实现js多维数组扁平化。类似这种效果:\n\n```javascript\n[1,[2, 3],[4, 5, 6], [7, 8, 9,0]] -> [1,2,3,4,5,6,7,8,9,0]\n```\n\n博主脑子进水,凡是笔试碰见这种题目一律不看不答。面试结束后自己想了想不就是用Array的concat的方法吗,这么简单都答不上,估计面试官要一万个瞧不起了。\n\n于是我就写下这篇博客记录一下。\n\n以下就提供几种数组扁平化的方法:\n\n1、concat方法\n\n```javascript\nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = Array.prototype.concat.apply([],dimensionalArr)\nconsole.log(flatArr)\n```\n\n2、ES6的reset参数...\n\n```javascript\nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = [].concat(...dimensionalArr)\nconsole.log(flatArr)\n```\n3、reduce concat,在网上查了下api,reduce这个ES5的方法我一直不咋用\n\n```javascript\n//判断是否是数组\nfunction isArray(o) {  \n  return Object.prototype.toString.call(o) === '[object Array]';   \n} \nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = dimensionalArr.reduce((prev,curr)=>{\n    //如果不是数组,转成数组\n    pre = isArray(prev) ? prev : Array.of(prev)\n    curr = isArray(curr) ? curr : Array.of(curr)\n    return pre.concat(curr)\n})\nconsole.log(flatArr)\n```\n\n4、后来自己又google了一下,lodash和underscore都有现成的方法flattern,并且在多层嵌套的情况也有对应的方法flatternDeep。\n```javascript\nvar array = [1, [2, [3, [4]], 5]];\n \n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n \n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]\n```\n\n","source":"_posts/2017-03-24-js多维数组扁平化.md","raw":"---\ndate: 2017-03-24 14:31:27\nlayout: post\ntitle: js多维数组扁平化\ncomments: true\ncategories: js\ntags: [js]\nkeywords: js,数组,扁平化\ndescription: js多维数组扁平化\n---\n一次面试,笔试题中有一道题目实现js多维数组扁平化。类似这种效果:\n\n```javascript\n[1,[2, 3],[4, 5, 6], [7, 8, 9,0]] -> [1,2,3,4,5,6,7,8,9,0]\n```\n\n博主脑子进水,凡是笔试碰见这种题目一律不看不答。面试结束后自己想了想不就是用Array的concat的方法吗,这么简单都答不上,估计面试官要一万个瞧不起了。\n\n于是我就写下这篇博客记录一下。\n\n以下就提供几种数组扁平化的方法:\n\n1、concat方法\n\n```javascript\nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = Array.prototype.concat.apply([],dimensionalArr)\nconsole.log(flatArr)\n```\n\n2、ES6的reset参数...\n\n```javascript\nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = [].concat(...dimensionalArr)\nconsole.log(flatArr)\n```\n3、reduce concat,在网上查了下api,reduce这个ES5的方法我一直不咋用\n\n```javascript\n//判断是否是数组\nfunction isArray(o) {  \n  return Object.prototype.toString.call(o) === '[object Array]';   \n} \nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = dimensionalArr.reduce((prev,curr)=>{\n    //如果不是数组,转成数组\n    pre = isArray(prev) ? prev : Array.of(prev)\n    curr = isArray(curr) ? curr : Array.of(curr)\n    return pre.concat(curr)\n})\nconsole.log(flatArr)\n```\n\n4、后来自己又google了一下,lodash和underscore都有现成的方法flattern,并且在多层嵌套的情况也有对应的方法flatternDeep。\n```javascript\nvar array = [1, [2, [3, [4]], 5]];\n \n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n \n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]\n```\n\n","slug":"js多维数组扁平化","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj0vuxsik000wqjs62cn0or3a","content":"<p>一次面试,笔试题中有一道题目实现js多维数组扁平化。类似这种效果:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]] -&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n<p>博主脑子进水,凡是笔试碰见这种题目一律不看不答。面试结束后自己想了想不就是用Array的concat的方法吗,这么简单都答不上,估计面试官要一万个瞧不起了。</p>\n<p>于是我就写下这篇博客记录一下。</p>\n<p>以下就提供几种数组扁平化的方法:</p>\n<p>1、concat方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = <span class=\"built_in\">Array</span>.prototype.concat.apply([],dimensionalArr)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>2、ES6的reset参数…</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = [].concat(...dimensionalArr)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>3、reduce concat,在网上查了下api,reduce这个ES5的方法我一直不咋用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//判断是否是数组</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">o</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o) === <span class=\"string\">'[object Array]'</span>;   </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = dimensionalArr.reduce((prev,curr)=&gt;&#123;</div><div class=\"line\">    <span class=\"comment\">//如果不是数组,转成数组</span></div><div class=\"line\">    pre = isArray(prev) ? prev : <span class=\"built_in\">Array</span>.of(prev)</div><div class=\"line\">    curr = isArray(curr) ? curr : <span class=\"built_in\">Array</span>.of(curr)</div><div class=\"line\">    <span class=\"keyword\">return</span> pre.concat(curr)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>4、后来自己又google了一下,lodash和underscore都有现成的方法flattern,并且在多层嵌套的情况也有对应的方法flatternDeep。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]];</div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, <span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; [1, 2, [3, [4]], 5]</span></div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3, [4], 5]</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>一次面试,笔试题中有一道题目实现js多维数组扁平化。类似这种效果:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]] -&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n<p>博主脑子进水,凡是笔试碰见这种题目一律不看不答。面试结束后自己想了想不就是用Array的concat的方法吗,这么简单都答不上,估计面试官要一万个瞧不起了。</p>\n<p>于是我就写下这篇博客记录一下。</p>\n<p>以下就提供几种数组扁平化的方法:</p>\n<p>1、concat方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = <span class=\"built_in\">Array</span>.prototype.concat.apply([],dimensionalArr)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>2、ES6的reset参数…</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = [].concat(...dimensionalArr)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>3、reduce concat,在网上查了下api,reduce这个ES5的方法我一直不咋用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//判断是否是数组</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">o</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o) === <span class=\"string\">'[object Array]'</span>;   </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = dimensionalArr.reduce((prev,curr)=&gt;&#123;</div><div class=\"line\">    <span class=\"comment\">//如果不是数组,转成数组</span></div><div class=\"line\">    pre = isArray(prev) ? prev : <span class=\"built_in\">Array</span>.of(prev)</div><div class=\"line\">    curr = isArray(curr) ? curr : <span class=\"built_in\">Array</span>.of(curr)</div><div class=\"line\">    <span class=\"keyword\">return</span> pre.concat(curr)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>4、后来自己又google了一下,lodash和underscore都有现成的方法flattern,并且在多层嵌套的情况也有对应的方法flatternDeep。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]];</div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, <span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; [1, 2, [3, [4]], 5]</span></div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3, [4], 5]</span></div></pre></td></tr></table></figure></p>\n"},{"date":"2017-03-24T17:20:13.000Z","layout":"post","title":"箭头函数与普通函数的区别","comments":1,"keywords":"js,函数,箭头函数","description":"箭头函数","_content":"同样是面试被问到的问题,ES6既然允许使用lamda(=>)函数,使用起来简单方便,那么普通函数还有没有存在的意义?箭头函数和普通函数的区别在哪?\n这种问题实在是坑,普通函数当然有存在的意义,而且lamda函数在js中有很多限制,达不到普通函数的功效。但是被问到有什么区别,还是一时语塞,不知道从何说起。\n一般的了解在做回调的时候用箭头函数更加顺手一些,翻看了一下MDN[箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)又有了更深的了解。\n\n1、首先箭头函数作为匿名函数,是不能作为构造函数的,不能使用new\n2、this,普通函数构造函数的 this 指向了一个新的对象；如果函数是作为对象的方法被调用的，则其 this 指向了那个调用它的对象;但是箭头函数的则会捕获其所在上下文的  this 值，作为自己的 this 值。在使用call或apply绑定时,相当于只是传入了参数,对this没有影响\n3、箭头函数不绑定arguments,取而代之用rest参数...解决\n4、箭头函数当方法使用的时候没有定义this绑定\n    ```javascript\n    var obj = {\n      i: 10,\n      b: () => console.log(this.i, this),\n      c: function() {\n        console.log( this.i, this)\n      }\n    }\n    obj.b(); // prints undefined, Window\n    obj.c(); // prints 10, Object {...}\n    \n    ```\n5、箭头函数不能当做Generator函数,不能使用yield关键字\n6、不能简单返回对象字面量\n    ```javascript\n    var func = () => {  foo: 1  };\n    // Calling func() returns undefined!\n    \n    var func = () => {  foo: function() {}  };\n    // SyntaxError: function statement requires a name\n    //如果要返回对象字面量,用括号包裹字面量\n    var func = () => ({ foo: 1 });\n    ```\n7、箭头函数不能换行\n    ```javascript\n    var func = ()\n               => 1; // SyntaxError: expected expression, got '=>'\n               \n    ```\n所以有空多刷刷MDN看看文档还是有好处的","source":"_posts/2017-03-25-箭头函数与普通函数的区别.md","raw":"---\ndate: 2017-03-25 01:20:13\nlayout: post\ntitle: 箭头函数与普通函数的区别\ncomments: true\ncategories: js\ntags: [js]\nkeywords: js,函数,箭头函数\ndescription: 箭头函数\n---\n同样是面试被问到的问题,ES6既然允许使用lamda(=>)函数,使用起来简单方便,那么普通函数还有没有存在的意义?箭头函数和普通函数的区别在哪?\n这种问题实在是坑,普通函数当然有存在的意义,而且lamda函数在js中有很多限制,达不到普通函数的功效。但是被问到有什么区别,还是一时语塞,不知道从何说起。\n一般的了解在做回调的时候用箭头函数更加顺手一些,翻看了一下MDN[箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)又有了更深的了解。\n\n1、首先箭头函数作为匿名函数,是不能作为构造函数的,不能使用new\n2、this,普通函数构造函数的 this 指向了一个新的对象；如果函数是作为对象的方法被调用的，则其 this 指向了那个调用它的对象;但是箭头函数的则会捕获其所在上下文的  this 值，作为自己的 this 值。在使用call或apply绑定时,相当于只是传入了参数,对this没有影响\n3、箭头函数不绑定arguments,取而代之用rest参数...解决\n4、箭头函数当方法使用的时候没有定义this绑定\n    ```javascript\n    var obj = {\n      i: 10,\n      b: () => console.log(this.i, this),\n      c: function() {\n        console.log( this.i, this)\n      }\n    }\n    obj.b(); // prints undefined, Window\n    obj.c(); // prints 10, Object {...}\n    \n    ```\n5、箭头函数不能当做Generator函数,不能使用yield关键字\n6、不能简单返回对象字面量\n    ```javascript\n    var func = () => {  foo: 1  };\n    // Calling func() returns undefined!\n    \n    var func = () => {  foo: function() {}  };\n    // SyntaxError: function statement requires a name\n    //如果要返回对象字面量,用括号包裹字面量\n    var func = () => ({ foo: 1 });\n    ```\n7、箭头函数不能换行\n    ```javascript\n    var func = ()\n               => 1; // SyntaxError: expected expression, got '=>'\n               \n    ```\n所以有空多刷刷MDN看看文档还是有好处的","slug":"箭头函数与普通函数的区别","published":1,"updated":"2017-03-24T18:03:39.000Z","photos":[],"link":"","_id":"cj0vuxsim0011qjs6h05b1dmg","content":"<p>同样是面试被问到的问题,ES6既然允许使用lamda(=&gt;)函数,使用起来简单方便,那么普通函数还有没有存在的意义?箭头函数和普通函数的区别在哪?<br>这种问题实在是坑,普通函数当然有存在的意义,而且lamda函数在js中有很多限制,达不到普通函数的功效。但是被问到有什么区别,还是一时语塞,不知道从何说起。<br>一般的了解在做回调的时候用箭头函数更加顺手一些,翻看了一下MDN<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">箭头函数</a>又有了更深的了解。</p>\n<p>1、首先箭头函数作为匿名函数,是不能作为构造函数的,不能使用new<br>2、this,普通函数构造函数的 this 指向了一个新的对象；如果函数是作为对象的方法被调用的，则其 this 指向了那个调用它的对象;但是箭头函数的则会捕获其所在上下文的  this 值，作为自己的 this 值。在使用call或apply绑定时,相当于只是传入了参数,对this没有影响<br>3、箭头函数不绑定arguments,取而代之用rest参数…解决<br>4、箭头函数当方法使用的时候没有定义this绑定<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  i: <span class=\"number\">10</span>,</div><div class=\"line\">  b: () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.i, <span class=\"keyword\">this</span>),</div><div class=\"line\">  c: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.i, <span class=\"keyword\">this</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">obj.b(); <span class=\"comment\">// prints undefined, Window</span></div><div class=\"line\">obj.c(); <span class=\"comment\">// prints 10, Object &#123;...&#125;</span></div></pre></td></tr></table></figure></p>\n<p>5、箭头函数不能当做Generator函数,不能使用yield关键字<br>6、不能简单返回对象字面量<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; &#123;  foo: <span class=\"number\">1</span>  &#125;;</div><div class=\"line\"><span class=\"comment\">// Calling func() returns undefined!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; &#123;  foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;  &#125;;</div><div class=\"line\"><span class=\"comment\">// SyntaxError: function statement requires a name</span></div><div class=\"line\"><span class=\"comment\">//如果要返回对象字面量,用括号包裹字面量</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; (&#123; foo: <span class=\"number\">1</span> &#125;);</div></pre></td></tr></table></figure></p>\n<p>7、箭头函数不能换行<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> func = ()</div><div class=\"line\">           =&gt; <span class=\"number\">1</span>; <span class=\"comment\">// SyntaxError: expected expression, got '=&gt;'</span></div></pre></td></tr></table></figure></p>\n<p>所以有空多刷刷MDN看看文档还是有好处的</p>\n","excerpt":"","more":"<p>同样是面试被问到的问题,ES6既然允许使用lamda(=&gt;)函数,使用起来简单方便,那么普通函数还有没有存在的意义?箭头函数和普通函数的区别在哪?<br>这种问题实在是坑,普通函数当然有存在的意义,而且lamda函数在js中有很多限制,达不到普通函数的功效。但是被问到有什么区别,还是一时语塞,不知道从何说起。<br>一般的了解在做回调的时候用箭头函数更加顺手一些,翻看了一下MDN<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭头函数</a>又有了更深的了解。</p>\n<p>1、首先箭头函数作为匿名函数,是不能作为构造函数的,不能使用new<br>2、this,普通函数构造函数的 this 指向了一个新的对象；如果函数是作为对象的方法被调用的，则其 this 指向了那个调用它的对象;但是箭头函数的则会捕获其所在上下文的  this 值，作为自己的 this 值。在使用call或apply绑定时,相当于只是传入了参数,对this没有影响<br>3、箭头函数不绑定arguments,取而代之用rest参数…解决<br>4、箭头函数当方法使用的时候没有定义this绑定<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  i: <span class=\"number\">10</span>,</div><div class=\"line\">  b: () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.i, <span class=\"keyword\">this</span>),</div><div class=\"line\">  c: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.i, <span class=\"keyword\">this</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">obj.b(); <span class=\"comment\">// prints undefined, Window</span></div><div class=\"line\">obj.c(); <span class=\"comment\">// prints 10, Object &#123;...&#125;</span></div></pre></td></tr></table></figure></p>\n<p>5、箭头函数不能当做Generator函数,不能使用yield关键字<br>6、不能简单返回对象字面量<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; &#123;  foo: <span class=\"number\">1</span>  &#125;;</div><div class=\"line\"><span class=\"comment\">// Calling func() returns undefined!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; &#123;  foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;  &#125;;</div><div class=\"line\"><span class=\"comment\">// SyntaxError: function statement requires a name</span></div><div class=\"line\"><span class=\"comment\">//如果要返回对象字面量,用括号包裹字面量</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; (&#123; foo: <span class=\"number\">1</span> &#125;);</div></pre></td></tr></table></figure></p>\n<p>7、箭头函数不能换行<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> func = ()</div><div class=\"line\">           =&gt; <span class=\"number\">1</span>; <span class=\"comment\">// SyntaxError: expected expression, got '=&gt;'</span></div></pre></td></tr></table></figure></p>\n<p>所以有空多刷刷MDN看看文档还是有好处的</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0vuxshl0000qjs63h8ormz2","category_id":"cj0vuxshw0005qjs6sd9a82oo","_id":"cj0vuxsi7000dqjs6p2xgz6l1"},{"post_id":"cj0vuxshq0002qjs6askmgy40","category_id":"cj0vuxshw0005qjs6sd9a82oo","_id":"cj0vuxsib000jqjs6qtz20azs"},{"post_id":"cj0vuxsia000iqjs6l4sy55bc","category_id":"cj0vuxsi9000gqjs6dc8tukdt","_id":"cj0vuxsif000pqjs608u35pw7"},{"post_id":"cj0vuxshx0006qjs6knmk8y92","category_id":"cj0vuxsi9000gqjs6dc8tukdt","_id":"cj0vuxsih000tqjs6gn97dgnu"},{"post_id":"cj0vuxsib000kqjs6r6q7xre9","category_id":"cj0vuxsi9000gqjs6dc8tukdt","_id":"cj0vuxsik000vqjs6vtglytd3"},{"post_id":"cj0vuxsie000oqjs6t79h42t2","category_id":"cj0vuxsi9000gqjs6dc8tukdt","_id":"cj0vuxsim0010qjs6v8luys5p"},{"post_id":"cj0vuxsi10009qjs62z2bkeff","category_id":"cj0vuxsi9000gqjs6dc8tukdt","_id":"cj0vuxsin0013qjs6uxyc4chq"},{"post_id":"cj0vuxsih000uqjs68l2no823","category_id":"cj0vuxshw0005qjs6sd9a82oo","_id":"cj0vuxsio0017qjs6zx4skyc3"},{"post_id":"cj0vuxsi6000cqjs6uytklmxh","category_id":"cj0vuxsi9000gqjs6dc8tukdt","_id":"cj0vuxsip0019qjs62fo2vwye"},{"post_id":"cj0vuxsi9000fqjs64slrajnx","category_id":"cj0vuxsi9000gqjs6dc8tukdt","_id":"cj0vuxsip001bqjs67u9gwdw0"},{"post_id":"cj0vuxsif000qqjs62xc0cjlc","category_id":"cj0vuxsin0014qjs6lbwoijlv","_id":"cj0vuxsiq001dqjs6hybn7b1b"},{"post_id":"cj0vuxsik000wqjs62cn0or3a","category_id":"cj0vuxsip001aqjs61jx2zaws","_id":"cj0vuxsir001hqjs6nf4m05y4"},{"post_id":"cj0vuxsim0011qjs6h05b1dmg","category_id":"cj0vuxsip001aqjs61jx2zaws","_id":"cj0vuxsis001lqjs63jqhimqv"}],"PostTag":[{"post_id":"cj0vuxshl0000qjs63h8ormz2","tag_id":"cj0vuxsht0004qjs60tgqtl98","_id":"cj0vuxsi5000bqjs6wnm4cr5l"},{"post_id":"cj0vuxshq0002qjs6askmgy40","tag_id":"cj0vuxsht0004qjs60tgqtl98","_id":"cj0vuxsia000hqjs616vqt6ve"},{"post_id":"cj0vuxshx0006qjs6knmk8y92","tag_id":"cj0vuxsi8000eqjs6frj9j2u7","_id":"cj0vuxsie000nqjs6ov3ixu62"},{"post_id":"cj0vuxsih000uqjs68l2no823","tag_id":"cj0vuxsht0004qjs60tgqtl98","_id":"cj0vuxsim000yqjs68acy8sqg"},{"post_id":"cj0vuxsi10009qjs62z2bkeff","tag_id":"cj0vuxsic000lqjs6eyarawzs","_id":"cj0vuxsin0012qjs6lousn0o0"},{"post_id":"cj0vuxsi10009qjs62z2bkeff","tag_id":"cj0vuxsih000sqjs6pknpsxoy","_id":"cj0vuxsin0015qjs66d0mi4qa"},{"post_id":"cj0vuxsi6000cqjs6uytklmxh","tag_id":"cj0vuxsi8000eqjs6frj9j2u7","_id":"cj0vuxsio0018qjs63swmfw1o"},{"post_id":"cj0vuxsi9000fqjs64slrajnx","tag_id":"cj0vuxsin0016qjs6cntu3j3i","_id":"cj0vuxsir001gqjs661c7etgb"},{"post_id":"cj0vuxsi9000fqjs64slrajnx","tag_id":"cj0vuxsih000sqjs6pknpsxoy","_id":"cj0vuxsir001iqjs619v4tog3"},{"post_id":"cj0vuxsia000iqjs6l4sy55bc","tag_id":"cj0vuxsiq001fqjs6ijukofnp","_id":"cj0vuxsis001kqjs6ocb3dn72"},{"post_id":"cj0vuxsib000kqjs6r6q7xre9","tag_id":"cj0vuxsir001jqjs6tbf4md1d","_id":"cj0vuxsis001nqjs6xgjfkej6"},{"post_id":"cj0vuxsie000oqjs6t79h42t2","tag_id":"cj0vuxsis001mqjs6ih7dm4iz","_id":"cj0vuxsit001pqjs6b61cyfr0"},{"post_id":"cj0vuxsif000qqjs62xc0cjlc","tag_id":"cj0vuxsit001oqjs677j9n3ge","_id":"cj0vuxsiu001rqjs661ragjes"},{"post_id":"cj0vuxsik000wqjs62cn0or3a","tag_id":"cj0vuxsiu001qqjs6d05s483n","_id":"cj0vuxsiw001tqjs6sucu34hm"},{"post_id":"cj0vuxsim0011qjs6h05b1dmg","tag_id":"cj0vuxsiu001qqjs6d05s483n","_id":"cj0vuxsix001uqjs6isa0s34y"}],"Tag":[{"name":"animation","_id":"cj0vuxsht0004qjs60tgqtl98"},{"name":"Event","_id":"cj0vuxsi8000eqjs6frj9j2u7"},{"name":"this","_id":"cj0vuxsic000lqjs6eyarawzs"},{"name":"面向对象","_id":"cj0vuxsih000sqjs6pknpsxoy"},{"name":"柯里化","_id":"cj0vuxsin0016qjs6cntu3j3i"},{"name":"ajax","_id":"cj0vuxsiq001fqjs6ijukofnp"},{"name":"依赖注入","_id":"cj0vuxsir001jqjs6tbf4md1d"},{"name":"跨域","_id":"cj0vuxsis001mqjs6ih7dm4iz"},{"name":"Git","_id":"cj0vuxsit001oqjs677j9n3ge"},{"name":"js","_id":"cj0vuxsiu001qqjs6d05s483n"}]}}