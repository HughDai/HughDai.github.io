{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1492501851000},{"_id":"themes/next/.DS_Store","hash":"8d4481a6abfb92b6409316537363b47062128fdc","modified":1492508626000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1492501851000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1492501851000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1492501851000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1492501851000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1492501851000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1492501851000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1492501851000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1492501851000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1492501851000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1492501851000},{"_id":"themes/next/_config.yml","hash":"184b509ba83308db5aa49c33744e64eca1d0a723","modified":1502100294000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1492501851000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1492501851000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1492501851000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1492501851000},{"_id":"source/_posts/2015-01-15-my-first-blog.markdown","hash":"3ba59507db167661a08e97a50d47c29924b2d6ff","modified":1490341508000},{"_id":"source/_posts/2015-01-16-css3clock.markdown","hash":"2665da7a2efa4ca17dad716e40965bf728b8ea3b","modified":1493269732000},{"_id":"source/_posts/2015-01-16-太极阴阳图.markdown","hash":"f167f88adadbf63af8b2b08013cbbbb544a36b92","modified":1493269723000},{"_id":"source/_posts/2016-03-30-js拖拽实现.md","hash":"f75e8c91d8bba14084fda678db706051e426798c","modified":1493269713000},{"_id":"source/_posts/2016-04-03-事件模型.md","hash":"450ff79ebcf131bf54f6bc7e2825380393fbb17b","modified":1496640715000},{"_id":"source/_posts/2016-04-04-理解javascript中的this.md","hash":"b7f4451af76996125fa4e42a36f0c3bf35f009f3","modified":1493269685000},{"_id":"source/_posts/2016-04-21-函数柯里化(转).md","hash":"894ad7c69ba08ee140edfee5d4964fa71b83599f","modified":1493269670000},{"_id":"source/_posts/2016-04-21-原生ajax.md","hash":"a7baf77c7a9b9b0b7a1d6da4a96db4cfb9eaec6b","modified":1493269662000},{"_id":"source/_posts/2016-06-15-跨域和jsonp.md","hash":"f112d5616c4a27b6ef7e49a6ac16d4fc5d145a10","modified":1493269639000},{"_id":"source/_posts/2016-05-04-js依赖注入.md","hash":"4e2d2f373b812a6442b0e8fde1ac38d22ca6b598","modified":1493269650000},{"_id":"source/_posts/2016-06-16-打字动画.md","hash":"213dd6b5cd8510dd0127f9cf8adfa86e747510f8","modified":1493269629000},{"_id":"source/_posts/2016-07-01-Github-Gitlab多账户SSH-Key切换.md","hash":"c7af23389ed864b781dcac576c12d71888a5023f","modified":1493269619000},{"_id":"source/_posts/2017-03-24-js多维数组扁平化.md","hash":"9045d47760e0f6fb76783700f2fed665f05f3939","modified":1499920539000},{"_id":"source/_posts/2017-03-25-箭头函数与普通函数的区别.md","hash":"b41acd7ff1efa0b230725e799f8b2bf83374faf2","modified":1493269603000},{"_id":"source/_posts/2017-04-01-BEM-CSS命名规范.md","hash":"95f24f2e619c2237337c1d1a5e8266761544956c","modified":1493269594000},{"_id":"source/_posts/2017-04-01-为Date添加add方法.md","hash":"0fa5bfff1bb11fb06902567206061aca5325e761","modified":1493269760000},{"_id":"source/_posts/2017-04-01-简单实现Promise.md","hash":"6c13b75ad2938df4b1fd94c4d9430ee99bb917bc","modified":1495602474000},{"_id":"source/_posts/2017-04-26-使用font-spider压缩字体.md","hash":"bf23f73ca47dcc9c0f75be8b35e364a675eb6168","modified":1493269553000},{"_id":"source/_posts/2017-04-14-实现移动设备Ritina屏下1px.md","hash":"39eade2beffc463c4cfb2cbd4af8175920655acc","modified":1493269574000},{"_id":"source/_posts/2017-07-21-一些js基础算法.md","hash":"54dbcd237f926bdb6c2db73847209199fe29adfe","modified":1501230876000},{"_id":"source/_posts/2017-08-07-深度优先和广度优先遍历DOM树.md","hash":"016a797f82293b4176c23222d4e29713be080efc","modified":1502100073000},{"_id":"source/_posts/2017-08-07-js实现Math-sqrt开平方根.md","hash":"2be1831315ce7795097f3922b5b5bf0283e3404d","modified":1502106509000},{"_id":"source/categories/index.md","hash":"15c9ecf85a8b32bf0904281db2bfef799eac992c","modified":1492505253000},{"_id":"source/about/index.md","hash":"5ab748a2ae3b569e8a816f7ae4893661cebba2bd","modified":1493348876000},{"_id":"source/tags/index.md","hash":"8c3d781f7ddca7dceba0c47a36765f7401747a68","modified":1492505225000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1492501851000},{"_id":"themes/next/.git/config","hash":"a33539305f85ea695520b496f67659d5751acff8","modified":1492501851000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1492500801000},{"_id":"themes/next/.git/packed-refs","hash":"3ec038d0eca4e6b05fdd27842ca8a09de1b61d2d","modified":1492501851000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1492501851000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1492501851000},{"_id":"themes/next/.git/index","hash":"b61e23ea177410983a5f8afbc81ccea96baae750","modified":1492507683000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1492501851000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1492501851000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1492501851000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1492501851000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1492501851000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1492501851000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1492501851000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1492501851000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1492501851000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1492501851000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1492501851000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1492501851000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1492501851000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1492501851000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1492501851000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1492501851000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1492501851000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1492501851000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1492501851000},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1492501851000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1492501851000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0192b6b63963235a1ce017784d3551b8bcb77617","modified":1493270248000},{"_id":"themes/next/source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1492507686000},{"_id":"themes/next/source/.DS_Store","hash":"b0ac18979bf688791a36b1c5067c09a045e6997a","modified":1492508626000},{"_id":"themes/next/layout/_layout.swig","hash":"9d1a23a6add6f3d0f88c2d17979956f14aaa37a4","modified":1492501851000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1492501851000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1492501851000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1492501851000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492501851000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1492500801000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1492500801000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1492500801000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1492500801000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1492500801000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1492500801000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1492500801000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1492500801000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1492500801000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1492500801000},{"_id":"themes/next/.git/logs/HEAD","hash":"7573c73f0f32e28d8b3aa08bf6c3fc3840440d6c","modified":1492501851000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1492501851000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1492501851000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"55491984964175176e054661a7326e85fa83a7a0","modified":1492501851000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1492501851000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1492501851000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1492501851000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1492501851000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1492501851000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1492501851000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1492501851000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1492501851000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1492501851000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1492501851000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1492501851000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1492501851000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1492501851000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1492501851000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1492501851000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1492501851000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1492501851000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1492501851000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1492501851000},{"_id":"themes/next/layout/_macro/post.swig","hash":"640b431eccbbd27f10c6781f33db5ea9a6e064de","modified":1492501851000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1492501851000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1492501851000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1492501851000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1492501851000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1492501851000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1492501851000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1492501851000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1492501851000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1492501851000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1492501851000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1492501851000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1492501851000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1492501851000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1492501851000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1492501851000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1492501851000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492501851000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1492501851000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492501851000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492501851000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1492501851000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492501851000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492501851000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492501851000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492501851000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492501851000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492501851000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492501851000},{"_id":"themes/next/.git/refs/heads/master","hash":"72ef5010337aeb6ef076961786f83937815e8586","modified":1492501851000},{"_id":"themes/next/.git/objects/e1/49a394349cb3c0686232eeefc0b7f98e351608","hash":"c3d1fda806af9551e59e9b1c3bf5a32b70064f43","modified":1492507683000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1492501851000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1492501851000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1492501851000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1492501851000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1492501851000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1492501851000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1492501851000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1492501851000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1492501851000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1492501851000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1492501851000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1492501851000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1492501851000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1492501851000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1492501851000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1492501851000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1492501851000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1492501851000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1492501851000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1492501851000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1492501851000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1492501851000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1492501851000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1492501851000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1492501851000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1492501851000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1492501851000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492501851000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1492501851000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1492501851000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1492501851000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1492501851000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b614b73ba49ca9136fed7c387ee8df72fe65118f","modified":1492501851000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1492501851000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1492501851000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1492501851000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1492501851000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1492501851000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1492501851000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1492501851000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1492501851000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1492501851000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1492501851000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1492501851000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1492501851000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1492501851000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1492501851000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1492501851000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1492501851000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1492501851000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1492501851000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1492501851000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1492501851000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1492501851000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1492501851000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1492501851000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1492501851000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1492501851000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1492501851000},{"_id":"themes/next/source/js/src/utils.js","hash":"2041eae5ac81c392067bfbd1bba4399cb37beea1","modified":1492501851000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1492501851000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1492501851000},{"_id":"themes/next/source/images/avatar.png","hash":"deebc66530e13a97f1c61dfee9f35289a2ca76cc","modified":1490845350000},{"_id":"themes/next/.git/objects/1a/26ffcc5ce713a5769dc9c88761818a62099777","hash":"c2bfce2de31a465f799a1d99913676b833680a44","modified":1492504679000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1492501851000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"7573c73f0f32e28d8b3aa08bf6c3fc3840440d6c","modified":1492501851000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1492501851000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1492501851000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1492501851000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1492501851000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1492501851000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1492501851000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1492501851000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"b22d6e1b6ec78ae364d9955d5832262d9b58b55d","modified":1492506217000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492501851000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1492501851000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1492501851000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1492501851000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1492501851000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1492501851000},{"_id":"themes/next/.git/objects/pack/pack-995999d7e14b51607f0e31af65cf6879f1a8d8cd.idx","hash":"ae2cdb06e278e6ab57c5a7fc1c4e328ce9e5b84a","modified":1492501851000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1492501851000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"7573c73f0f32e28d8b3aa08bf6c3fc3840440d6c","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"c196401747019d389da09b7a0fe7f27e3a0ec01f","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1492501851000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1492501851000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1492501851000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1492501851000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1492501851000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1492501851000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1492501851000},{"_id":"themes/next/.git/objects/pack/pack-995999d7e14b51607f0e31af65cf6879f1a8d8cd.pack","hash":"09355fbc1b55f10397f51d579c95a7ffcec81457","modified":1492503586000},{"_id":"public/about/index.html","hash":"5c0eb3af53f01965dabd7718dbaced3fe7bd2b70","modified":1502123745154},{"_id":"public/tags/index.html","hash":"8c03eda33c6894f236e43cfa3c92cfe4865bf379","modified":1502123745154},{"_id":"public/categories/index.html","hash":"d0e992d2f01d330513ec040314d6e6ccdcb5c22b","modified":1502123745154},{"_id":"public/2015/01/15/my-first-blog/index.html","hash":"abfba00b44de5f0bd6c57349bdbbed7fb33fa549","modified":1502123745154},{"_id":"public/archives/2015/index.html","hash":"f4319670b68c5c92978d5b1df6d4f8a14e4a8461","modified":1502123745154},{"_id":"public/archives/2016/03/index.html","hash":"60691c40f6806c39b4fcabc04bab335223b2c06a","modified":1502123745154},{"_id":"public/archives/2016/05/index.html","hash":"295d78b21c02b7c3673022388d22453d14281415","modified":1502123745154},{"_id":"public/archives/2016/04/index.html","hash":"0dc8634eaf9cc7bc0393b6fc5f19257bc0a61cab","modified":1502123745154},{"_id":"public/archives/2016/06/index.html","hash":"fa5d3fc0ceacedad644ca065278b6d1f7f038d57","modified":1502123745154},{"_id":"public/archives/page/3/index.html","hash":"9a53e9b1751acdae339ee35159b77737f66754c3","modified":1502123745154},{"_id":"public/archives/2017/04/index.html","hash":"bd19cfa89355df2a3c8460e62e2f79dbef819a4a","modified":1502123745154},{"_id":"public/archives/2017/07/index.html","hash":"5c0684b2a3f5dd2359ac45327774059445d03696","modified":1502123745154},{"_id":"public/archives/2015/01/index.html","hash":"80e18a506083a5ce2075210f70b13d1d94e419cf","modified":1502123745154},{"_id":"public/archives/2016/07/index.html","hash":"c93e58119157bb2848bb0b06814851c4cac4ef3a","modified":1502123745154},{"_id":"public/archives/2017/03/index.html","hash":"3ce2aaf6c94e7651d72bf9a46b8c66663f112cf0","modified":1502123745154},{"_id":"public/categories/CSS/index.html","hash":"718bbbc2513ca726044732f94a38bd6ccc075ba2","modified":1502123745154},{"_id":"public/archives/2017/08/index.html","hash":"d3e23dc292ac69518cb4cd157c34574942209995","modified":1502123745155},{"_id":"public/categories/css/index.html","hash":"e14bbef5d6d0871b93736484e5abf44461f693c5","modified":1502123745155},{"_id":"public/categories/tool/index.html","hash":"a52e2013cbdd524c1cdd48499ed9df16aa23316e","modified":1502123745155},{"_id":"public/categories/JS/index.html","hash":"0af77c330174f69a41e94f71461aecf28650acf4","modified":1502123745155},{"_id":"public/categories/js/index.html","hash":"51cba08ac7e96514af506cfa5a5173755d86a611","modified":1502123745155},{"_id":"public/tags/Event/index.html","hash":"3fe14446775da2cfd66e2d19bee418821d48c442","modified":1502123745155},{"_id":"public/tags/this/index.html","hash":"5eeeb29c688054d789846569b805ba33a7123ff1","modified":1502123745155},{"_id":"public/tags/面向对象/index.html","hash":"9ac39d29bfdc7d527930c914ab009035430b22cb","modified":1502123745155},{"_id":"public/tags/跨域/index.html","hash":"37a06cc0029f81b0321913b3d6d665e229ac60c4","modified":1502123745155},{"_id":"public/tags/animation/index.html","hash":"b9956303fe7f52fb216615b8590fc41eb3ebdc39","modified":1502123745155},{"_id":"public/tags/柯里化/index.html","hash":"3c065a9977e79c96b3aa042deb85c7395ad18eda","modified":1502123745155},{"_id":"public/tags/ajax/index.html","hash":"fd38bd3aa303600174a3cc65fc045a5d1c31be15","modified":1502123745155},{"_id":"public/tags/依赖注入/index.html","hash":"2fd726f01a46590817b1127ae0816bc95e89fbc6","modified":1502123745155},{"_id":"public/tags/Git/index.html","hash":"5c5e8856b88d7de4cb6fa2d75245f4f733c8ed5a","modified":1502123745155},{"_id":"public/tags/js/index.html","hash":"fa5ef0dda8a12c28d0ecf5372cf722d79cbe8696","modified":1502123745155},{"_id":"public/tags/CSS/index.html","hash":"8a66c92dd4a20e403f98a054a8ee1e75382ccd0e","modified":1502123745155},{"_id":"public/tags/date/index.html","hash":"b28ff2db7df183e4b12dee5875fb60d6f11fc065","modified":1502123745155},{"_id":"public/tags/add/index.html","hash":"372540f973dfa5fbdc090f210a487f298496cac2","modified":1502123745155},{"_id":"public/tags/BEM/index.html","hash":"01fe50cd690d6cd7cc1b6c07f60ac9bacdf5d410","modified":1502123745155},{"_id":"public/tags/promise/index.html","hash":"58cc35dc9a935fea08db709bddbe35b80da883c7","modified":1502123745155},{"_id":"public/tags/css/index.html","hash":"1e327d4893c0513f32fde4b40a2459245a8418a5","modified":1502123745155},{"_id":"public/tags/polyfill/index.html","hash":"cc17b23fd3dfca5031d71cc73ecf1c65f2d7b35a","modified":1502123745155},{"_id":"public/tags/font-spider/index.html","hash":"c296e362b5966667ebfd5a635098c22e35a0bf60","modified":1502123745155},{"_id":"public/tags/数学/index.html","hash":"85c5efe5089762812391549a901ba90a5106a309","modified":1502123745155},{"_id":"public/tags/font-face/index.html","hash":"3d8b53ebf301078a961090935bce75e2495bfbdc","modified":1502123745156},{"_id":"public/tags/算法/index.html","hash":"a1888285c9cbdf973f5094ef86a8710b0655770d","modified":1502123745156},{"_id":"public/tags/dom/index.html","hash":"72deacb6cab435a8b1419270a559cbe42256612a","modified":1502123745156},{"_id":"public/baidusitemap.xml","hash":"1792baef2c3c9ddff86d06dc5a16e9a461426ee4","modified":1502123745156},{"_id":"public/sitemap.xml","hash":"356792913bf2d2c19088bdb0f2721513c8cc9646","modified":1502123745156},{"_id":"public/2017/08/07/深度优先和广度优先遍历DOM树/index.html","hash":"a0ca0ae791be593b0024aaa73fbd9fe9bc9db7ac","modified":1502123745156},{"_id":"public/2017/04/26/使用font-spider压缩字体/index.html","hash":"9f0e226c64fb3251c483b933be105c7c8b48ec1c","modified":1502123745156},{"_id":"public/2017/07/21/一些js基础算法/index.html","hash":"867157d515e5b89e5190f59023a3205f522b9216","modified":1502123745156},{"_id":"public/2017/08/07/js实现Math-sqrt开平方根/index.html","hash":"2197383bcc280659fc25534ff4f608517b56aa2a","modified":1502123745156},{"_id":"public/2017/04/14/实现移动设备Ritina屏下1px/index.html","hash":"2487c865bcb24206767a024ceef7e9ddb74402d8","modified":1502123745156},{"_id":"public/2017/04/01/BEM-CSS命名规范/index.html","hash":"3c33f112ba4e4254369579afeca1abd13f537ec6","modified":1502123745156},{"_id":"public/2017/03/24/js多维数组扁平化/index.html","hash":"7d26a8d095668d9bed0e769cf1a8eeca9f61d68e","modified":1502123745156},{"_id":"public/2017/04/01/为Date添加add方法/index.html","hash":"be6b7377b9f7bdffe9b6228e1a496e67f43f2376","modified":1502123745156},{"_id":"public/2016/07/01/Github-Gitlab多账户SSH-Key切换/index.html","hash":"48f6b3b219aedb7dc67c03133983376583c7d2d5","modified":1502123745156},{"_id":"public/2017/04/01/简单实现Promise/index.html","hash":"1f7f176908410816c0f5fd3f7c3322530a2f99df","modified":1502123745156},{"_id":"public/2017/03/25/箭头函数与普通函数的区别/index.html","hash":"6384dcb433847376eb1fdcbc40c59982b8787b54","modified":1502123745156},{"_id":"public/2016/05/04/js依赖注入/index.html","hash":"a263602b9f1901f919d746348e6e668c242deaf1","modified":1502123745156},{"_id":"public/2016/06/16/打字动画/index.html","hash":"14536ca2d188aee1c63e3ac8d57a776b612d85a2","modified":1502123745156},{"_id":"public/2016/06/15/跨域和jsonp/index.html","hash":"2472ca172a060c73f890c8e7bb5c3ec5552e7a6d","modified":1502123745156},{"_id":"public/2016/04/21/函数柯里化(转)/index.html","hash":"ab474f0cca9930e028ece7fb148a4078ffca45c4","modified":1502123745157},{"_id":"public/2016/04/21/原生ajax/index.html","hash":"53f894a0976772a853fca3a032575222875c7325","modified":1502123745157},{"_id":"public/2016/04/03/事件模型/index.html","hash":"887e31fc3ffd8397d43203d6724d8af14d126afa","modified":1502123745157},{"_id":"public/2016/04/04/理解javascript中的this/index.html","hash":"bc6b7a6e4e759bbca1d610bf5cbc6ca74930ef7a","modified":1502123745157},{"_id":"public/2015/01/16/css3clock/index.html","hash":"51647462a9ec518ad79d32bfd6c831c89fcd9a28","modified":1502123745157},{"_id":"public/2015/01/16/太极阴阳图/index.html","hash":"85121b311d19fea045e6520d32029174b47040d8","modified":1502123745157},{"_id":"public/2016/03/30/js拖拽实现/index.html","hash":"bd63adedb1789fe228737235a8e5b50d547b7480","modified":1502123745165},{"_id":"public/archives/page/2/index.html","hash":"0cf76a369c6860fc33bb1182379483c8c7fec9e8","modified":1502123745165},{"_id":"public/archives/2016/index.html","hash":"172f793b3dd4559f8ff6dad9ab0c05d640099226","modified":1502123745166},{"_id":"public/archives/index.html","hash":"b167326cb97ab46f75d492d05be1078c0ca46493","modified":1502123745166},{"_id":"public/archives/2017/index.html","hash":"1bb766930a32cec0917efcf2b68ebc480228e1b6","modified":1502123745166},{"_id":"public/index.html","hash":"b9233044e78ea132c38feb6946809d4cc8555016","modified":1502123745166},{"_id":"public/page/2/index.html","hash":"825ed42ec871cbb63d7d40267fdc5e00fd197813","modified":1502123745166},{"_id":"public/page/3/index.html","hash":"17eefda596f6a9fc1cdc5312388606ae677adc1d","modified":1502123745166},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1502123745172},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1502123745172},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1502123745172},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1502123745172},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1502123745172},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1502123745172},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1502123745172},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1502123745172},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1502123745172},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502123745172},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1502123745172},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502123745172},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502123745173},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1502123745173},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1502123745173},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1502123745173},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502123745173},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502123745173},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502123745173},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502123745173},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502123745173},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502123745173},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1502123745173},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502123745173},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502123745749},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502123745761},{"_id":"public/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1502123745766},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1502123745767},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502123745771},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"b614b73ba49ca9136fed7c387ee8df72fe65118f","modified":1502123745771},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1502123745771},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1502123745771},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1502123745771},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1502123745771},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1502123745771},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1502123745771},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1502123745771},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1502123745771},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1502123745771},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1502123745771},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1502123745771},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1502123745771},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1502123745771},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1502123745771},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1502123745771},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1502123745772},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1502123745772},{"_id":"public/js/src/utils.js","hash":"2041eae5ac81c392067bfbd1bba4399cb37beea1","modified":1502123745772},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1502123745772},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1502123745772},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1502123745772},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1502123745772},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502123745772},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1502123745772},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1502123745772},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502123745772},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502123745772},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1502123745772},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1502123745772},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1502123745772},{"_id":"public/css/main.css","hash":"74cd062143e33b4c2ef2c9023bf68792d007f492","modified":1502123745773},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1502123745773},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1502123745773},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1502123745773},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502123745773},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1502123745773},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1502123745773},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1502123745773},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1502123745773},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1502123745773},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1502123745773},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502123745773},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1502123745778},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1502123745778},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1502123745778},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502123745778},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502123745778},{"_id":"public/images/avatar.png","hash":"deebc66530e13a97f1c61dfee9f35289a2ca76cc","modified":1502123745778},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1502123745784}],"Category":[{"name":"CSS","_id":"cj62dowwr0004lusz9neb9fgd"},{"name":"JS","_id":"cj62dowx3000flusz96gc7fhm"},{"name":"tool","_id":"cj62dox38001ilusznbsnulor"},{"name":"js","_id":"cj62dox3f001pluszx06p3qh2"},{"name":"css","_id":"cj62dox410028luszfx2fgk1s"}],"Data":[],"Page":[{"title":"categories","date":"2015-03-28T06:48:22.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2015-03-28 14:48:22\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-04-18T08:47:33.000Z","path":"categories/index.html","layout":"page","_id":"cj62dox2u0015luszds0any6o","content":"","excerpt":"","more":""},{"title":"关于我","date":"2016-03-28T06:47:54.000Z","type":"about","comments":0,"_content":"戴旭,前端工程师,目前就职于神州优车集团汽车金融部门,正在寻求好的工作机会。\n* email:    cynicism2011@gmail.com\n* wechat:   cynicismdai","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-03-28 14:47:54\ntype: \"about\"\ncomments: false\n---\n戴旭,前端工程师,目前就职于神州优车集团汽车金融部门,正在寻求好的工作机会。\n* email:    cynicism2011@gmail.com\n* wechat:   cynicismdai","updated":"2017-04-28T03:07:56.000Z","path":"about/index.html","layout":"page","_id":"cj62dox2w0017luszvrmarza5","content":"<p>戴旭,前端工程师,目前就职于神州优车集团汽车金融部门,正在寻求好的工作机会。</p>\n<ul>\n<li>email:    cynicism2011@gmail.com</li>\n<li>wechat:   cynicismdai</li>\n</ul>\n","excerpt":"","more":"<p>戴旭,前端工程师,目前就职于神州优车集团汽车金融部门,正在寻求好的工作机会。</p>\n<ul>\n<li>email:    cynicism2011@gmail.com</li>\n<li>wechat:   cynicismdai</li>\n</ul>\n"},{"title":"tags","date":"2015-03-28T06:48:07.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2015-03-28 14:48:07\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-04-18T08:47:05.000Z","path":"tags/index.html","layout":"page","_id":"cj62dox32001aluszwey9zffg","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"my first blog","date":"2015-01-15T07:29:07.000Z","comments":1,"_content":"I need to start learning Ruby\n","source":"_posts/2015-01-15-my-first-blog.markdown","raw":"---\nlayout: post\ntitle: \"my first blog\"\ndate: 2015-01-15 15:29:07 +0800\ncomments: true\ncategories:\n---\nI need to start learning Ruby\n","slug":"my-first-blog","published":1,"updated":"2017-03-24T07:45:08.000Z","photos":[],"link":"","_id":"cj62dowwe0000luszgdu32lb4","content":"<p>I need to start learning Ruby</p>\n","excerpt":"","more":"<p>I need to start learning Ruby</p>\n"},{"layout":"post","title":"css3 Clock","date":"2015-01-16T10:50:56.000Z","comments":1,"keywords":"CSS, 动画, clock, animation, 钟表","<!--description":"css3和js实现钟表-->","_content":"reference http://segmentfault.com/a/1190000003055672\n\n<link rel=\"stylesheet\" href=\"/css/post_clock.css\"/>\n<div id=\"wrapper\"><div class=\"clock-wrapper\"><div class=\"clock-base\"><div class=\"click-indicator\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div class=\"clock-hour\"></div><div class=\"clock-minute\"></div><div class=\"clock-second\"></div><div class=\"clock-center\"></div></div></div></div>\n<style id=\"clock-animations\"></style><script src='/js/post_clock.js'></script>\n\n<p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"MKKXJp\" data-default-tab=\"js\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/MKKXJp/'>clock</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<!-- more -->","source":"_posts/2015-01-16-css3clock.markdown","raw":"---\nlayout: post\ntitle: \"css3 Clock\"\ndate: 2015-01-16 18:50:56 +0800\ncomments: true\ncategories: CSS\ntags: [animation]\nkeywords: CSS, 动画, clock, animation, 钟表\n<!--description: css3和js实现钟表-->\n---\nreference http://segmentfault.com/a/1190000003055672\n\n<link rel=\"stylesheet\" href=\"/css/post_clock.css\"/>\n<div id=\"wrapper\"><div class=\"clock-wrapper\"><div class=\"clock-base\"><div class=\"click-indicator\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div class=\"clock-hour\"></div><div class=\"clock-minute\"></div><div class=\"clock-second\"></div><div class=\"clock-center\"></div></div></div></div>\n<style id=\"clock-animations\"></style><script src='/js/post_clock.js'></script>\n\n<p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"MKKXJp\" data-default-tab=\"js\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/MKKXJp/'>clock</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<!-- more -->","slug":"css3clock","published":1,"updated":"2017-04-27T05:08:52.000Z","photos":[],"link":"","_id":"cj62dowwj0001lusz3lf7p46l","content":"<p>reference <a href=\"http://segmentfault.com/a/1190000003055672\" target=\"_blank\" rel=\"external\">http://segmentfault.com/a/1190000003055672</a></p>\n<p><link rel=\"stylesheet\" href=\"/css/post_clock.css\"></p>\n<p><div id=\"wrapper\"><div class=\"clock-wrapper\"><div class=\"clock-base\"><div class=\"click-indicator\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div class=\"clock-hour\"></div><div class=\"clock-minute\"></div><div class=\"clock-second\"></div><div class=\"clock-center\"></div></div></div></div></p>\n<p><style id=\"clock-animations\"></style><script src=\"/js/post_clock.js\"></script></p>\n<p></p><p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"MKKXJp\" data-default-tab=\"js\" data-user=\"HughDai\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/MKKXJp/\" target=\"_blank\" rel=\"external\">clock</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\" target=\"_blank\" rel=\"external\">@HughDai</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><p></p>\n<p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script><br><a id=\"more\"></a></p>\n","excerpt":"<p>reference <a href=\"http://segmentfault.com/a/1190000003055672\">http://segmentfault.com/a/1190000003055672</a></p>\n<p><link rel=\"stylesheet\" href=\"/css/post_clock.css\"/></p>\n<p><div id=\"wrapper\"><div class=\"clock-wrapper\"><div class=\"clock-base\"><div class=\"click-indicator\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div class=\"clock-hour\"></div><div class=\"clock-minute\"></div><div class=\"clock-second\"></div><div class=\"clock-center\"></div></div></div></div></p>\n<p><style id=\"clock-animations\"></style><script src='/js/post_clock.js'></script></p>\n<p><p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"MKKXJp\" data-default-tab=\"js\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/MKKXJp/'>clock</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>\n<p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script><br>","more":"</p>"},{"layout":"post","title":"太极阴阳图","date":"2015-01-16T06:33:26.000Z","comments":1,"keywords":"CSS, 动画, clock, animation, 太极, 八卦, 阴阳, 太极阴阳图","<!--description":"css3实现太极阴阳图-->","_content":"\n<link rel=\"stylesheet\" href=\"/css/post_yinyang.css\"/>\n<div id=\"wrapper\"><div class=\"Yin-Yang\"></div></div>\n\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"XXXZeV\" data-default-tab=\"css\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/XXXZeV/'>XXXZeV</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<!-- more -->","source":"_posts/2015-01-16-太极阴阳图.markdown","raw":"---\nlayout: post\ntitle: \"太极阴阳图\"\ndate: 2015-01-16 14:33:26 +0800\ncomments: true\ncategories: CSS\ntags: [animation]\nkeywords: CSS, 动画, clock, animation, 太极, 八卦, 阴阳, 太极阴阳图\n<!--description: css3实现太极阴阳图-->\n---\n\n<link rel=\"stylesheet\" href=\"/css/post_yinyang.css\"/>\n<div id=\"wrapper\"><div class=\"Yin-Yang\"></div></div>\n\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"XXXZeV\" data-default-tab=\"css\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/XXXZeV/'>XXXZeV</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n<!-- more -->","slug":"太极阴阳图","published":1,"updated":"2017-04-27T05:08:43.000Z","photos":[],"link":"","_id":"cj62dowwl0002luszzlquh6ej","content":"<p><link rel=\"stylesheet\" href=\"/css/post_yinyang.css\"></p>\n<div id=\"wrapper\"><div class=\"Yin-Yang\"></div></div>\n\n<p></p><p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"XXXZeV\" data-default-tab=\"css\" data-user=\"HughDai\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/XXXZeV/\" target=\"_blank\" rel=\"external\">XXXZeV</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\" target=\"_blank\" rel=\"external\">@HughDai</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><p></p>\n<p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script><br><a id=\"more\"></a></p>\n","excerpt":"<p><link rel=\"stylesheet\" href=\"/css/post_yinyang.css\"/></p>\n<div id=\"wrapper\"><div class=\"Yin-Yang\"></div></div>\n\n<p><p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"XXXZeV\" data-default-tab=\"css\" data-user=\"HughDai\" class='codepen'>See the Pen <a href='http://codepen.io/HughDai/pen/XXXZeV/'>XXXZeV</a> by Hugh Dai (<a href='http://codepen.io/HughDai'>@HughDai</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>\n<p><script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script><br>","more":"</p>"},{"layout":"post","title":"原生js拖拽实现","date":"2016-03-30T06:56:37.000Z","comments":1,"keywords":"JS, drag, 拖拽, 原生, 事件模型","<!--description":"原生js实现拖拽-->","_content":"## 实现分析\n&emsp;&emsp;最近为了应付面试，浏览了许多js知识点，试着用原生js实现拖拽效果，鼠标拖动效果很常见，像是百度首页的登录框就是经典案例，究其原因无非就是鼠标的三个事件：mousedown、mousemove和mouseup。\n## 原理分析\n1. 鼠标按下时即mousedown，记录mousedown值为true，此时记录下当前鼠标的坐标以及要拖动元素的坐标\n2. 鼠标按下并移动即mousemove，记录下即时的鼠标新坐标，鼠标新旧坐标相减再加上第一步得到的元素坐标即为新的拖拽元素坐标，也就是拖拽坐标跟随鼠标移动。\n3. 鼠标松开时即mouseup，把鼠标状态mousedown设为false。\n<!-- more -->\n## 代码\n### html\n    ```html\n    <div id=\"dialog\">\n       <div id='drag'>\n           <div id=\"title\">我是title,拖动我试一下</div>\n           <div id=\"content\">我是content，拖动我无效</div>\n       </div>\n   </div>\n    ```\n### css\n    ```css\n    #wrapper {\n       position: relative;\n       height:500px;\n       width:100%;\n       border:1px solid red;\n   }\n   \n   #dialog {\n       position: absolute;\n       width: 300px;\n       height: 200px;\n       padding: 5px;\n       top: 50px;\n       left: 50px;\n       background-color: #d9e1ed;\n       box-shadow: 2px 2px 2px #5c5d6c;\n       border-radius: 5px;\n   }\n   \n   #drag {\n       border: 1px solid rgb(217, 217, 217);\n       background-color: white;\n   }\n   \n   #title {\n       background-color: rgba(198, 232, 255, 0.43);\n       border-bottom: 1px solid rgb(217, 217, 217);\n       cursor: move;\n   }\n   \n   #content {\n       padding: 5px;\n       height: 165px;\n   }\n    ```\n    \n### js\n\n    ``` javascript\n    /**\n    * Created by hughdai on 16/3/30.\n    */\n   //事件处理\n   var EventCtrl = {\n       addEvent: function (ele, type, fn) {\n           if (ele.addEventListener) {\n               ele.addEventListener(type, fn, false);\n           }\n           else {\n               ele.attachEvent('on' + type, fn);\n           }\n       },\n       removeEvent: function (ele, type, fn) {\n           if (ele.removeEventListener) {\n               ele.removeEventListener(type, fn, false);\n           }\n           else {\n               ele.detachEvent('on' + type, fn);\n           }\n       }\n   }\n   //获取元素样式\n   function getStyle(ele, style) {\n       if (getComputedStyle) {\n           return getComputedStyle(ele, false)[style];\n       }\n       else {\n           return ele.currentStyle[style];\n       }\n   }\n   function drag() {\n       var x = 0, y = 0, top = 0, left = 0;\n       var mouseDown = false;\n       var dialog = document.getElementById('dialog');\n       EventCtrl.addEvent(this, 'mousedown', function (event) {\n           mouseDown = true;\n           this.onselectstart = function () {\n               return false;\n           };\n           var e = event || window.event;\n           left = parseInt(getStyle(dialog, 'left'));//记录当前元素偏移\n           top = parseInt(getStyle(dialog, 'top'));\n           x = parseInt(e.clientX || e.x);//记录当前鼠标位置\n           y = parseInt(e.clientY || e.y);\n       })\n   \n       EventCtrl.addEvent(document, 'mousemove', function (event) {\n           if (mouseDown) {\n               var e = event || window.event;\n               var container = document.getElementById('wrapper')\n               var currentX = parseInt(e.clientX || e.x);//当前鼠标位置\n               var currentY = parseInt(e.clientY || e.y);\n               var displayX = currentX - x + left;//新鼠标位置减去旧鼠标位置加上元素偏移\n               var displayY = currentY - y + top;\n               var width = container.offsetWidth - dialog.offsetWidth;\n               var height = container.offsetHeight - dialog.offsetHeight;\n               console.log('displayX:' + displayX, 'displayY:' + displayY);\n               //限制元素不被拖出容器范围\n               if (displayX < 0) {\n                   displayX = 0\n               }\n               else if (displayX > width) {\n                   displayX = width\n               }\n               if (displayY < 0) {\n                   displayY = 0\n               }\n               else if (displayY > height) {\n                   displayY = height\n               }\n               dialog.style.left = displayX + 'px';\n               dialog.style.top = displayY + 'px';\n           }\n       })\n   \n       EventCtrl.addEvent(document, 'mouseup', function (event) {\n           mouseDown = false;\n           left = parseInt(getStyle(dialog, 'left'));\n           top = parseInt(getStyle(dialog, 'top'));\n           EventCtrl.removeEvent(document, 'mousemove', function () {\n   \n           })\n           EventCtrl.removeEvent(document, 'mouseup', function () {\n   \n           })\n       })\n   }\n   document.addEventListener('DOMContentLoaded', function () {\n       drag.call(document.getElementById('title'));\n   }, false)\n    ```\n\n## 效果\n\n<link rel=\"stylesheet\" href=\"/css/post_drag.css\"/>\n<div id=\"wrapper\"><div id=\"dialog\"><div id='drag'><div id=\"title\">我是title,拖动我试一下</div><div id=\"content\">我是content，拖动我无效</div></div></div></div>\n<script src='/js/post_drag.js'></script>\n","source":"_posts/2016-03-30-js拖拽实现.md","raw":"---\nlayout: post\ntitle: 原生js拖拽实现\ndate: 2016-03-30 14:56:37\ncomments: true\ncategories: JS\ntags: [Event]\nkeywords: JS, drag, 拖拽, 原生, 事件模型\n<!--description: 原生js实现拖拽-->\n---\n## 实现分析\n&emsp;&emsp;最近为了应付面试，浏览了许多js知识点，试着用原生js实现拖拽效果，鼠标拖动效果很常见，像是百度首页的登录框就是经典案例，究其原因无非就是鼠标的三个事件：mousedown、mousemove和mouseup。\n## 原理分析\n1. 鼠标按下时即mousedown，记录mousedown值为true，此时记录下当前鼠标的坐标以及要拖动元素的坐标\n2. 鼠标按下并移动即mousemove，记录下即时的鼠标新坐标，鼠标新旧坐标相减再加上第一步得到的元素坐标即为新的拖拽元素坐标，也就是拖拽坐标跟随鼠标移动。\n3. 鼠标松开时即mouseup，把鼠标状态mousedown设为false。\n<!-- more -->\n## 代码\n### html\n    ```html\n    <div id=\"dialog\">\n       <div id='drag'>\n           <div id=\"title\">我是title,拖动我试一下</div>\n           <div id=\"content\">我是content，拖动我无效</div>\n       </div>\n   </div>\n    ```\n### css\n    ```css\n    #wrapper {\n       position: relative;\n       height:500px;\n       width:100%;\n       border:1px solid red;\n   }\n   \n   #dialog {\n       position: absolute;\n       width: 300px;\n       height: 200px;\n       padding: 5px;\n       top: 50px;\n       left: 50px;\n       background-color: #d9e1ed;\n       box-shadow: 2px 2px 2px #5c5d6c;\n       border-radius: 5px;\n   }\n   \n   #drag {\n       border: 1px solid rgb(217, 217, 217);\n       background-color: white;\n   }\n   \n   #title {\n       background-color: rgba(198, 232, 255, 0.43);\n       border-bottom: 1px solid rgb(217, 217, 217);\n       cursor: move;\n   }\n   \n   #content {\n       padding: 5px;\n       height: 165px;\n   }\n    ```\n    \n### js\n\n    ``` javascript\n    /**\n    * Created by hughdai on 16/3/30.\n    */\n   //事件处理\n   var EventCtrl = {\n       addEvent: function (ele, type, fn) {\n           if (ele.addEventListener) {\n               ele.addEventListener(type, fn, false);\n           }\n           else {\n               ele.attachEvent('on' + type, fn);\n           }\n       },\n       removeEvent: function (ele, type, fn) {\n           if (ele.removeEventListener) {\n               ele.removeEventListener(type, fn, false);\n           }\n           else {\n               ele.detachEvent('on' + type, fn);\n           }\n       }\n   }\n   //获取元素样式\n   function getStyle(ele, style) {\n       if (getComputedStyle) {\n           return getComputedStyle(ele, false)[style];\n       }\n       else {\n           return ele.currentStyle[style];\n       }\n   }\n   function drag() {\n       var x = 0, y = 0, top = 0, left = 0;\n       var mouseDown = false;\n       var dialog = document.getElementById('dialog');\n       EventCtrl.addEvent(this, 'mousedown', function (event) {\n           mouseDown = true;\n           this.onselectstart = function () {\n               return false;\n           };\n           var e = event || window.event;\n           left = parseInt(getStyle(dialog, 'left'));//记录当前元素偏移\n           top = parseInt(getStyle(dialog, 'top'));\n           x = parseInt(e.clientX || e.x);//记录当前鼠标位置\n           y = parseInt(e.clientY || e.y);\n       })\n   \n       EventCtrl.addEvent(document, 'mousemove', function (event) {\n           if (mouseDown) {\n               var e = event || window.event;\n               var container = document.getElementById('wrapper')\n               var currentX = parseInt(e.clientX || e.x);//当前鼠标位置\n               var currentY = parseInt(e.clientY || e.y);\n               var displayX = currentX - x + left;//新鼠标位置减去旧鼠标位置加上元素偏移\n               var displayY = currentY - y + top;\n               var width = container.offsetWidth - dialog.offsetWidth;\n               var height = container.offsetHeight - dialog.offsetHeight;\n               console.log('displayX:' + displayX, 'displayY:' + displayY);\n               //限制元素不被拖出容器范围\n               if (displayX < 0) {\n                   displayX = 0\n               }\n               else if (displayX > width) {\n                   displayX = width\n               }\n               if (displayY < 0) {\n                   displayY = 0\n               }\n               else if (displayY > height) {\n                   displayY = height\n               }\n               dialog.style.left = displayX + 'px';\n               dialog.style.top = displayY + 'px';\n           }\n       })\n   \n       EventCtrl.addEvent(document, 'mouseup', function (event) {\n           mouseDown = false;\n           left = parseInt(getStyle(dialog, 'left'));\n           top = parseInt(getStyle(dialog, 'top'));\n           EventCtrl.removeEvent(document, 'mousemove', function () {\n   \n           })\n           EventCtrl.removeEvent(document, 'mouseup', function () {\n   \n           })\n       })\n   }\n   document.addEventListener('DOMContentLoaded', function () {\n       drag.call(document.getElementById('title'));\n   }, false)\n    ```\n\n## 效果\n\n<link rel=\"stylesheet\" href=\"/css/post_drag.css\"/>\n<div id=\"wrapper\"><div id=\"dialog\"><div id='drag'><div id=\"title\">我是title,拖动我试一下</div><div id=\"content\">我是content，拖动我无效</div></div></div></div>\n<script src='/js/post_drag.js'></script>\n","slug":"js拖拽实现","published":1,"updated":"2017-04-27T05:08:33.000Z","photos":[],"link":"","_id":"cj62dowws0005lusz3fa8fmmk","content":"<h2 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h2><p>&emsp;&emsp;最近为了应付面试，浏览了许多js知识点，试着用原生js实现拖拽效果，鼠标拖动效果很常见，像是百度首页的登录框就是经典案例，究其原因无非就是鼠标的三个事件：mousedown、mousemove和mouseup。</p>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><ol>\n<li>鼠标按下时即mousedown，记录mousedown值为true，此时记录下当前鼠标的坐标以及要拖动元素的坐标</li>\n<li>鼠标按下并移动即mousemove，记录下即时的鼠标新坐标，鼠标新旧坐标相减再加上第一步得到的元素坐标即为新的拖拽元素坐标，也就是拖拽坐标跟随鼠标移动。</li>\n<li>鼠标松开时即mouseup，把鼠标状态mousedown设为false。<a id=\"more\"></a>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3> <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dialog\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'drag'</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title\"</span>&gt;</span>我是title,拖动我试一下<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span>我是content，拖动我无效<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"selector-id\">#wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#dialog</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#d9e1ed</span>;</div><div class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">#5c5d6c</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#drag</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgb</span>(217, 217, 217);</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: white;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#title</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(198, 232, 255, 0.43);</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgb</span>(217, 217, 217);</div><div class=\"line\">    <span class=\"attribute\">cursor</span>: move;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#content</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">165px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * Created by hughdai on 16/3/30.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"comment\">//事件处理</span></div><div class=\"line\"><span class=\"keyword\">var</span> EventCtrl = &#123;</div><div class=\"line\">    addEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ele.addEventListener) &#123;</div><div class=\"line\">            ele.addEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ele.attachEvent(<span class=\"string\">'on'</span> + type, fn);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    removeEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ele.removeEventListener) &#123;</div><div class=\"line\">            ele.removeEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ele.detachEvent(<span class=\"string\">'on'</span> + type, fn);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获取元素样式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">ele, style</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getComputedStyle) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getComputedStyle(ele, <span class=\"literal\">false</span>)[style];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ele.currentStyle[style];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drag</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, top = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> mouseDown = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dialog'</span>);</div><div class=\"line\">    EventCtrl.addEvent(<span class=\"keyword\">this</span>, <span class=\"string\">'mousedown'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        mouseDown = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.onselectstart = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">        left = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'left'</span>));<span class=\"comment\">//记录当前元素偏移</span></div><div class=\"line\">        top = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'top'</span>));</div><div class=\"line\">        x = <span class=\"built_in\">parseInt</span>(e.clientX || e.x);<span class=\"comment\">//记录当前鼠标位置</span></div><div class=\"line\">        y = <span class=\"built_in\">parseInt</span>(e.clientY || e.y);</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    EventCtrl.addEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mousemove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mouseDown) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">            <span class=\"keyword\">var</span> container = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'wrapper'</span>)</div><div class=\"line\">            <span class=\"keyword\">var</span> currentX = <span class=\"built_in\">parseInt</span>(e.clientX || e.x);<span class=\"comment\">//当前鼠标位置</span></div><div class=\"line\">            <span class=\"keyword\">var</span> currentY = <span class=\"built_in\">parseInt</span>(e.clientY || e.y);</div><div class=\"line\">            <span class=\"keyword\">var</span> displayX = currentX - x + left;<span class=\"comment\">//新鼠标位置减去旧鼠标位置加上元素偏移</span></div><div class=\"line\">            <span class=\"keyword\">var</span> displayY = currentY - y + top;</div><div class=\"line\">            <span class=\"keyword\">var</span> width = container.offsetWidth - dialog.offsetWidth;</div><div class=\"line\">            <span class=\"keyword\">var</span> height = container.offsetHeight - dialog.offsetHeight;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'displayX:'</span> + displayX, <span class=\"string\">'displayY:'</span> + displayY);</div><div class=\"line\">            <span class=\"comment\">//限制元素不被拖出容器范围</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (displayX &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                displayX = <span class=\"number\">0</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (displayX &gt; width) &#123;</div><div class=\"line\">                displayX = width</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (displayY &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                displayY = <span class=\"number\">0</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (displayY &gt; height) &#123;</div><div class=\"line\">                displayY = height</div><div class=\"line\">            &#125;</div><div class=\"line\">            dialog.style.left = displayX + <span class=\"string\">'px'</span>;</div><div class=\"line\">            dialog.style.top = displayY + <span class=\"string\">'px'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    EventCtrl.addEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mouseup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        mouseDown = <span class=\"literal\">false</span>;</div><div class=\"line\">        left = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'left'</span>));</div><div class=\"line\">        top = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'top'</span>));</div><div class=\"line\">        EventCtrl.removeEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mousemove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\">        EventCtrl.removeEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mouseup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    drag.call(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'title'</span>));</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>)</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><link rel=\"stylesheet\" href=\"/css/post_drag.css\"></p>\n<p><div id=\"wrapper\"><div id=\"dialog\"><div id=\"drag\"><div id=\"title\">我是title,拖动我试一下</div><div id=\"content\">我是content，拖动我无效</div></div></div></div></p>\n<script src=\"/js/post_drag.js\"></script>\n","excerpt":"<h2 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h2><p>&emsp;&emsp;最近为了应付面试，浏览了许多js知识点，试着用原生js实现拖拽效果，鼠标拖动效果很常见，像是百度首页的登录框就是经典案例，究其原因无非就是鼠标的三个事件：mousedown、mousemove和mouseup。</p>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><ol>\n<li>鼠标按下时即mousedown，记录mousedown值为true，此时记录下当前鼠标的坐标以及要拖动元素的坐标</li>\n<li>鼠标按下并移动即mousemove，记录下即时的鼠标新坐标，鼠标新旧坐标相减再加上第一步得到的元素坐标即为新的拖拽元素坐标，也就是拖拽坐标跟随鼠标移动。</li>\n<li>鼠标松开时即mouseup，把鼠标状态mousedown设为false。","more":"<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3> <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dialog\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'drag'</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title\"</span>&gt;</span>我是title,拖动我试一下<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span>我是content，拖动我无效<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"selector-id\">#wrapper</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#dialog</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#d9e1ed</span>;</div><div class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">#5c5d6c</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#drag</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgb</span>(217, 217, 217);</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: white;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#title</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(198, 232, 255, 0.43);</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">rgb</span>(217, 217, 217);</div><div class=\"line\">    <span class=\"attribute\">cursor</span>: move;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#content</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">165px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\"> * Created by hughdai on 16/3/30.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"comment\">//事件处理</span></div><div class=\"line\"><span class=\"keyword\">var</span> EventCtrl = &#123;</div><div class=\"line\">    addEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ele.addEventListener) &#123;</div><div class=\"line\">            ele.addEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ele.attachEvent(<span class=\"string\">'on'</span> + type, fn);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    removeEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ele, type, fn</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ele.removeEventListener) &#123;</div><div class=\"line\">            ele.removeEventListener(type, fn, <span class=\"literal\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ele.detachEvent(<span class=\"string\">'on'</span> + type, fn);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//获取元素样式</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">ele, style</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (getComputedStyle) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> getComputedStyle(ele, <span class=\"literal\">false</span>)[style];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ele.currentStyle[style];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drag</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>, top = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> mouseDown = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> dialog = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'dialog'</span>);</div><div class=\"line\">    EventCtrl.addEvent(<span class=\"keyword\">this</span>, <span class=\"string\">'mousedown'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        mouseDown = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.onselectstart = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">        left = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'left'</span>));<span class=\"comment\">//记录当前元素偏移</span></div><div class=\"line\">        top = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'top'</span>));</div><div class=\"line\">        x = <span class=\"built_in\">parseInt</span>(e.clientX || e.x);<span class=\"comment\">//记录当前鼠标位置</span></div><div class=\"line\">        y = <span class=\"built_in\">parseInt</span>(e.clientY || e.y);</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    EventCtrl.addEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mousemove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mouseDown) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> e = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">            <span class=\"keyword\">var</span> container = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'wrapper'</span>)</div><div class=\"line\">            <span class=\"keyword\">var</span> currentX = <span class=\"built_in\">parseInt</span>(e.clientX || e.x);<span class=\"comment\">//当前鼠标位置</span></div><div class=\"line\">            <span class=\"keyword\">var</span> currentY = <span class=\"built_in\">parseInt</span>(e.clientY || e.y);</div><div class=\"line\">            <span class=\"keyword\">var</span> displayX = currentX - x + left;<span class=\"comment\">//新鼠标位置减去旧鼠标位置加上元素偏移</span></div><div class=\"line\">            <span class=\"keyword\">var</span> displayY = currentY - y + top;</div><div class=\"line\">            <span class=\"keyword\">var</span> width = container.offsetWidth - dialog.offsetWidth;</div><div class=\"line\">            <span class=\"keyword\">var</span> height = container.offsetHeight - dialog.offsetHeight;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'displayX:'</span> + displayX, <span class=\"string\">'displayY:'</span> + displayY);</div><div class=\"line\">            <span class=\"comment\">//限制元素不被拖出容器范围</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (displayX &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                displayX = <span class=\"number\">0</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (displayX &gt; width) &#123;</div><div class=\"line\">                displayX = width</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (displayY &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                displayY = <span class=\"number\">0</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (displayY &gt; height) &#123;</div><div class=\"line\">                displayY = height</div><div class=\"line\">            &#125;</div><div class=\"line\">            dialog.style.left = displayX + <span class=\"string\">'px'</span>;</div><div class=\"line\">            dialog.style.top = displayY + <span class=\"string\">'px'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    EventCtrl.addEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mouseup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        mouseDown = <span class=\"literal\">false</span>;</div><div class=\"line\">        left = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'left'</span>));</div><div class=\"line\">        top = <span class=\"built_in\">parseInt</span>(getStyle(dialog, <span class=\"string\">'top'</span>));</div><div class=\"line\">        EventCtrl.removeEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mousemove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\">        EventCtrl.removeEvent(<span class=\"built_in\">document</span>, <span class=\"string\">'mouseup'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'DOMContentLoaded'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    drag.call(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'title'</span>));</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>)</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><link rel=\"stylesheet\" href=\"/css/post_drag.css\"/></p>\n<p><div id=\"wrapper\"><div id=\"dialog\"><div id='drag'><div id=\"title\">我是title,拖动我试一下</div><div id=\"content\">我是content，拖动我无效</div></div></div></div></p>\n<script src='/js/post_drag.js'></script>"},{"layout":"post","title":"函数柯里化","date":"2016-04-21T14:57:42.000Z","comments":1,"keywords":"JS, 柯里化, currying, 函数柯里化","<!--description":"js函数柯里化-->","_content":"转自[jcouyang的gist](https://gist.github.com/jcouyang/b56a830cd55bd230049f)\n<!-- more -->\n还记得 Haskell Curry吗，![](http://s3.amazonaws.com/lyah/curry.png)\n\n多巧啊, 人家姓 Curry 名 Haskell, 难怪 Haskell 语言会自动柯里化, 呵呵. 但是不奇怪吗, 为什么要柯里化呢. 为什么如此重要导致 Haskell 会默认自动柯里化所有函数, 不就是返回一个部分配置好的函数吗.\n\n我们来看一个 Haskell 的代码.\n```haskell\nmax 3 4\n(max 3) 4\n```\n结果都是4, 这有设么用呢.\n\n这里看不出来, 放到`高阶函数`试试. 什么? 看不懂天书 Haskell, 来看看 JavaScript 吧.\n\n### 我们来解一个问题\n\n#### 1. 写一个函数, 可以连接字符数组, 如 `f(['1','2']) => '12'`\n\n好吧,如果不用柯里化, 怎么写? 啊哈 `reduce`\n\n```javascript\nvar concatArray = function(chars){\n  return chars.reduce(function(a, b){\n  \treturn a.concat(b);\n  });\n}\nconcat(['1','2','3']) // => '123'\n```\n很简单,对吧.\n\n#### 2. 现在我要其中所有数字加1, 然后在连接\n```javascript\nvar concatArray = function(chars, inc){\n  return chars.map(function(char){\n  \treturn (+char)+inc + '';\n  }).reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], 1))// => '234'\n```\n#### 3. 所有数字乘以2, 再重构试试看\n\n```javascript\nvar multiple = function(a, b){\n  return +a*b + ''\n}\nvar concatArray = function(chars, inc){\n  return chars.map(function(char){\n  \treturn multiple(char, inc);\n  }).reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], 2)) // => '246'\n```\n\n是不是已经看出问题了呢? 如果我在需要每个数字都减2,是不是很麻烦呢.需要将`map` 参数匿名函数中的 multiple 函数换掉. 这样一来`concatArray`就不能同时处理加, 乘和减? 那么怎么能把他提取出来呢? 来对比下柯里化的解法.\n\n### 柯里化函数接口\n```javascript\nvar multiple = function(a){\n  return function(b){\n    return +b*a + ''\n  }\n}\n\nvar plus = function(a){\n  return function(b){\n    return (+b)+a + ''\n  }\n}\nvar concatArray = function(chars, stylishChar){\n  return chars.map(stylishChar)\n    .reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], multiple(2)))\nconsole.log(concatArray(['1','2','3'], plus(2)))\n```\n有什么不一样呢\n1. 处理数组中字符的函数被提取出来, 作为参数传入\n2. 提取成柯里化的函数, 部分配置好后传入, 好处显而易见, 这下接口非常通畅\n无论是外层调用\n```\nconcatArray(['1','2','3'], multiple(2))\n```\n还是内部的 map 函数\n```\nchars.map(stylishChar)\n```\n这些接口都清晰了很多, 不是吗\n\n这就是函数式的思想, 用已有的函数组合出新的函数, 而柯里化每消费一个参数, 都会返回一个新的部分配置的函数, 这为函数组合提供了更灵活的手段, 并且使得接口更为流畅.\n\n再加上自动柯里化的库 [ramda](https://github.com/CrossEye/ramda), 简直就完美了\n```\nvar multiple = ramda.curry(function(a, b){\n  return +b*a + ''\n})\nvar plus = ramda.curry(function(a, b){\n  return (+b)+a + ''\n})\n```\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/hamoq/3/embed\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n","source":"_posts/2016-04-21-函数柯里化(转).md","raw":"---\nlayout: post\ntitle: 函数柯里化\ndate: 2016-04-21 22:57:42\ncomments: true\ncategories: JS\ntags: [柯里化, 面向对象]\nkeywords: JS, 柯里化, currying, 函数柯里化\n<!--description: js函数柯里化-->\n---\n转自[jcouyang的gist](https://gist.github.com/jcouyang/b56a830cd55bd230049f)\n<!-- more -->\n还记得 Haskell Curry吗，![](http://s3.amazonaws.com/lyah/curry.png)\n\n多巧啊, 人家姓 Curry 名 Haskell, 难怪 Haskell 语言会自动柯里化, 呵呵. 但是不奇怪吗, 为什么要柯里化呢. 为什么如此重要导致 Haskell 会默认自动柯里化所有函数, 不就是返回一个部分配置好的函数吗.\n\n我们来看一个 Haskell 的代码.\n```haskell\nmax 3 4\n(max 3) 4\n```\n结果都是4, 这有设么用呢.\n\n这里看不出来, 放到`高阶函数`试试. 什么? 看不懂天书 Haskell, 来看看 JavaScript 吧.\n\n### 我们来解一个问题\n\n#### 1. 写一个函数, 可以连接字符数组, 如 `f(['1','2']) => '12'`\n\n好吧,如果不用柯里化, 怎么写? 啊哈 `reduce`\n\n```javascript\nvar concatArray = function(chars){\n  return chars.reduce(function(a, b){\n  \treturn a.concat(b);\n  });\n}\nconcat(['1','2','3']) // => '123'\n```\n很简单,对吧.\n\n#### 2. 现在我要其中所有数字加1, 然后在连接\n```javascript\nvar concatArray = function(chars, inc){\n  return chars.map(function(char){\n  \treturn (+char)+inc + '';\n  }).reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], 1))// => '234'\n```\n#### 3. 所有数字乘以2, 再重构试试看\n\n```javascript\nvar multiple = function(a, b){\n  return +a*b + ''\n}\nvar concatArray = function(chars, inc){\n  return chars.map(function(char){\n  \treturn multiple(char, inc);\n  }).reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], 2)) // => '246'\n```\n\n是不是已经看出问题了呢? 如果我在需要每个数字都减2,是不是很麻烦呢.需要将`map` 参数匿名函数中的 multiple 函数换掉. 这样一来`concatArray`就不能同时处理加, 乘和减? 那么怎么能把他提取出来呢? 来对比下柯里化的解法.\n\n### 柯里化函数接口\n```javascript\nvar multiple = function(a){\n  return function(b){\n    return +b*a + ''\n  }\n}\n\nvar plus = function(a){\n  return function(b){\n    return (+b)+a + ''\n  }\n}\nvar concatArray = function(chars, stylishChar){\n  return chars.map(stylishChar)\n    .reduce(function(a,b){\n      return a.concat(b)\n  });\n}\nconsole.log(concatArray(['1','2','3'], multiple(2)))\nconsole.log(concatArray(['1','2','3'], plus(2)))\n```\n有什么不一样呢\n1. 处理数组中字符的函数被提取出来, 作为参数传入\n2. 提取成柯里化的函数, 部分配置好后传入, 好处显而易见, 这下接口非常通畅\n无论是外层调用\n```\nconcatArray(['1','2','3'], multiple(2))\n```\n还是内部的 map 函数\n```\nchars.map(stylishChar)\n```\n这些接口都清晰了很多, 不是吗\n\n这就是函数式的思想, 用已有的函数组合出新的函数, 而柯里化每消费一个参数, 都会返回一个新的部分配置的函数, 这为函数组合提供了更灵活的手段, 并且使得接口更为流畅.\n\n再加上自动柯里化的库 [ramda](https://github.com/CrossEye/ramda), 简直就完美了\n```\nvar multiple = ramda.curry(function(a, b){\n  return +b*a + ''\n})\nvar plus = ramda.curry(function(a, b){\n  return (+b)+a + ''\n})\n```\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/hamoq/3/embed\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script>\n","slug":"函数柯里化(转)","published":1,"updated":"2017-04-27T05:07:50.000Z","photos":[],"link":"","_id":"cj62dowwt0006lusziy0e9kb8","content":"<p>转自<a href=\"https://gist.github.com/jcouyang/b56a830cd55bd230049f\" target=\"_blank\" rel=\"external\">jcouyang的gist</a><br><a id=\"more\"></a><br>还记得 Haskell Curry吗，<img src=\"http://s3.amazonaws.com/lyah/curry.png\" alt=\"\"></p>\n<p>多巧啊, 人家姓 Curry 名 Haskell, 难怪 Haskell 语言会自动柯里化, 呵呵. 但是不奇怪吗, 为什么要柯里化呢. 为什么如此重要导致 Haskell 会默认自动柯里化所有函数, 不就是返回一个部分配置好的函数吗.</p>\n<p>我们来看一个 Haskell 的代码.<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">max</span> <span class=\"number\">3</span> <span class=\"number\">4</span></div><div class=\"line\">(max <span class=\"number\">3</span>) <span class=\"number\">4</span></div></pre></td></tr></table></figure></p>\n<p>结果都是4, 这有设么用呢.</p>\n<p>这里看不出来, 放到<code>高阶函数</code>试试. 什么? 看不懂天书 Haskell, 来看看 JavaScript 吧.</p>\n<h3 id=\"我们来解一个问题\"><a href=\"#我们来解一个问题\" class=\"headerlink\" title=\"我们来解一个问题\"></a>我们来解一个问题</h3><h4 id=\"1-写一个函数-可以连接字符数组-如-f-39-1-39-39-2-39-gt-39-12-39\"><a href=\"#1-写一个函数-可以连接字符数组-如-f-39-1-39-39-2-39-gt-39-12-39\" class=\"headerlink\" title=\"1. 写一个函数, 可以连接字符数组, 如 f([&#39;1&#39;,&#39;2&#39;]) =&gt; &#39;12&#39;\"></a>1. 写一个函数, 可以连接字符数组, 如 <code>f([&#39;1&#39;,&#39;2&#39;]) =&gt; &#39;12&#39;</code></h4><p>好吧,如果不用柯里化, 怎么写? 啊哈 <code>reduce</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> a.concat(b);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">concat([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>]) <span class=\"comment\">// =&gt; '123'</span></div></pre></td></tr></table></figure>\n<p>很简单,对吧.</p>\n<h4 id=\"2-现在我要其中所有数字加1-然后在连接\"><a href=\"#2-现在我要其中所有数字加1-然后在连接\" class=\"headerlink\" title=\"2. 现在我要其中所有数字加1, 然后在连接\"></a>2. 现在我要其中所有数字加1, 然后在连接</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, inc</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">char</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> (+char)+inc + <span class=\"string\">''</span>;</div><div class=\"line\">  &#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], <span class=\"number\">1</span>))<span class=\"comment\">// =&gt; '234'</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-所有数字乘以2-再重构试试看\"><a href=\"#3-所有数字乘以2-再重构试试看\" class=\"headerlink\" title=\"3. 所有数字乘以2, 再重构试试看\"></a>3. 所有数字乘以2, 再重构试试看</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> multiple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> +a*b + <span class=\"string\">''</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, inc</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">char</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> multiple(char, inc);</div><div class=\"line\">  &#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], <span class=\"number\">2</span>)) <span class=\"comment\">// =&gt; '246'</span></div></pre></td></tr></table></figure>\n<p>是不是已经看出问题了呢? 如果我在需要每个数字都减2,是不是很麻烦呢.需要将<code>map</code> 参数匿名函数中的 multiple 函数换掉. 这样一来<code>concatArray</code>就不能同时处理加, 乘和减? 那么怎么能把他提取出来呢? 来对比下柯里化的解法.</p>\n<h3 id=\"柯里化函数接口\"><a href=\"#柯里化函数接口\" class=\"headerlink\" title=\"柯里化函数接口\"></a>柯里化函数接口</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> multiple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> +b*a + <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> plus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (+b)+a + <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, stylishChar</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(stylishChar)</div><div class=\"line\">    .reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], multiple(<span class=\"number\">2</span>)))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], plus(<span class=\"number\">2</span>)))</div></pre></td></tr></table></figure>\n<p>有什么不一样呢</p>\n<ol>\n<li>处理数组中字符的函数被提取出来, 作为参数传入</li>\n<li>提取成柯里化的函数, 部分配置好后传入, 好处显而易见, 这下接口非常通畅<br>无论是外层调用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">concatArray([&apos;1&apos;,&apos;2&apos;,&apos;3&apos;], multiple(2))</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>还是内部的 map 函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chars.map(stylishChar)</div></pre></td></tr></table></figure></p>\n<p>这些接口都清晰了很多, 不是吗</p>\n<p>这就是函数式的思想, 用已有的函数组合出新的函数, 而柯里化每消费一个参数, 都会返回一个新的部分配置的函数, 这为函数组合提供了更灵活的手段, 并且使得接口更为流畅.</p>\n<p>再加上自动柯里化的库 <a href=\"https://github.com/CrossEye/ramda\" target=\"_blank\" rel=\"external\">ramda</a>, 简直就完美了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var multiple = ramda.curry(function(a, b)&#123;</div><div class=\"line\">  return +b*a + &apos;&apos;</div><div class=\"line\">&#125;)</div><div class=\"line\">var plus = ramda.curry(function(a, b)&#123;</div><div class=\"line\">  return (+b)+a + &apos;&apos;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/hamoq/3/embed\" target=\"_blank\" rel=\"external\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n","excerpt":"<p>转自<a href=\"https://gist.github.com/jcouyang/b56a830cd55bd230049f\">jcouyang的gist</a><br>","more":"<br>还记得 Haskell Curry吗，<img src=\"http://s3.amazonaws.com/lyah/curry.png\" alt=\"\"></p>\n<p>多巧啊, 人家姓 Curry 名 Haskell, 难怪 Haskell 语言会自动柯里化, 呵呵. 但是不奇怪吗, 为什么要柯里化呢. 为什么如此重要导致 Haskell 会默认自动柯里化所有函数, 不就是返回一个部分配置好的函数吗.</p>\n<p>我们来看一个 Haskell 的代码.<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">max</span> <span class=\"number\">3</span> <span class=\"number\">4</span></div><div class=\"line\">(max <span class=\"number\">3</span>) <span class=\"number\">4</span></div></pre></td></tr></table></figure></p>\n<p>结果都是4, 这有设么用呢.</p>\n<p>这里看不出来, 放到<code>高阶函数</code>试试. 什么? 看不懂天书 Haskell, 来看看 JavaScript 吧.</p>\n<h3 id=\"我们来解一个问题\"><a href=\"#我们来解一个问题\" class=\"headerlink\" title=\"我们来解一个问题\"></a>我们来解一个问题</h3><h4 id=\"1-写一个函数-可以连接字符数组-如-f-39-1-39-39-2-39-gt-39-12-39\"><a href=\"#1-写一个函数-可以连接字符数组-如-f-39-1-39-39-2-39-gt-39-12-39\" class=\"headerlink\" title=\"1. 写一个函数, 可以连接字符数组, 如 f([&#39;1&#39;,&#39;2&#39;]) =&gt; &#39;12&#39;\"></a>1. 写一个函数, 可以连接字符数组, 如 <code>f([&#39;1&#39;,&#39;2&#39;]) =&gt; &#39;12&#39;</code></h4><p>好吧,如果不用柯里化, 怎么写? 啊哈 <code>reduce</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> a.concat(b);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">concat([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>]) <span class=\"comment\">// =&gt; '123'</span></div></pre></td></tr></table></figure>\n<p>很简单,对吧.</p>\n<h4 id=\"2-现在我要其中所有数字加1-然后在连接\"><a href=\"#2-现在我要其中所有数字加1-然后在连接\" class=\"headerlink\" title=\"2. 现在我要其中所有数字加1, 然后在连接\"></a>2. 现在我要其中所有数字加1, 然后在连接</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, inc</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">char</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> (+char)+inc + <span class=\"string\">''</span>;</div><div class=\"line\">  &#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], <span class=\"number\">1</span>))<span class=\"comment\">// =&gt; '234'</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-所有数字乘以2-再重构试试看\"><a href=\"#3-所有数字乘以2-再重构试试看\" class=\"headerlink\" title=\"3. 所有数字乘以2, 再重构试试看\"></a>3. 所有数字乘以2, 再重构试试看</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> multiple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> +a*b + <span class=\"string\">''</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, inc</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">char</span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"keyword\">return</span> multiple(char, inc);</div><div class=\"line\">  &#125;).reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], <span class=\"number\">2</span>)) <span class=\"comment\">// =&gt; '246'</span></div></pre></td></tr></table></figure>\n<p>是不是已经看出问题了呢? 如果我在需要每个数字都减2,是不是很麻烦呢.需要将<code>map</code> 参数匿名函数中的 multiple 函数换掉. 这样一来<code>concatArray</code>就不能同时处理加, 乘和减? 那么怎么能把他提取出来呢? 来对比下柯里化的解法.</p>\n<h3 id=\"柯里化函数接口\"><a href=\"#柯里化函数接口\" class=\"headerlink\" title=\"柯里化函数接口\"></a>柯里化函数接口</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> multiple = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> +b*a + <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> plus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (+b)+a + <span class=\"string\">''</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> concatArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chars, stylishChar</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> chars.map(stylishChar)</div><div class=\"line\">    .reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a.concat(b)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], multiple(<span class=\"number\">2</span>)))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(concatArray([<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>], plus(<span class=\"number\">2</span>)))</div></pre></td></tr></table></figure>\n<p>有什么不一样呢</p>\n<ol>\n<li>处理数组中字符的函数被提取出来, 作为参数传入</li>\n<li>提取成柯里化的函数, 部分配置好后传入, 好处显而易见, 这下接口非常通畅<br>无论是外层调用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">concatArray([&apos;1&apos;,&apos;2&apos;,&apos;3&apos;], multiple(2))</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>还是内部的 map 函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chars.map(stylishChar)</div></pre></td></tr></table></figure></p>\n<p>这些接口都清晰了很多, 不是吗</p>\n<p>这就是函数式的思想, 用已有的函数组合出新的函数, 而柯里化每消费一个参数, 都会返回一个新的部分配置的函数, 这为函数组合提供了更灵活的手段, 并且使得接口更为流畅.</p>\n<p>再加上自动柯里化的库 <a href=\"https://github.com/CrossEye/ramda\">ramda</a>, 简直就完美了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var multiple = ramda.curry(function(a, b)&#123;</div><div class=\"line\">  return +b*a + &apos;&apos;</div><div class=\"line\">&#125;)</div><div class=\"line\">var plus = ramda.curry(function(a, b)&#123;</div><div class=\"line\">  return (+b)+a + &apos;&apos;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/hamoq/3/embed\">JS Bin</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>"},{"layout":"post","title":"理解javascript中的this","date":"2016-04-04T02:12:38.000Z","comments":1,"keywords":"JS, 原生, this, 面向对象","<!--description":"this指向描述-->","_content":"&emsp;&emsp;在js函数中，除了定义函数时的形参，还有两个附加参数，即this和arguments，本篇就讲一下this关键字的用法以及this在不同场景下值。\n初学时受启发得知this的指向取决于函数的调用方式，总结下来有以下几点：\n<!-- more -->\n1、作为函数调用的模式，this指向window\n```javascript\nfunction func(){\n    console.log(this);\n}\n\nfunc();             //window\n```\n2、作为对象的方法调用的时候,this指向方法所在的对象\n```javascript\nvar obj = {};\nobj.name = 'hugh dai';\nobj.getNmae = function(){\n    console.log(this.name);\n}\n\nobj.getName();      //hugh dai\n```\n3、构造函数模式，this指向构造函数的实例\n```javascript\nfunction Person(name){\n    this.name = name;\n    this.getName = function(){\n        console.log(this.name);\n    }\n}\n\nvar p = new Person('hugh dai');\np.getName();        //hugh dai\n```\n4、bind/call/apply方式调用，this指向方法中的第一个参数\n```javascript\nvar foo = {\n    x: 3\n}\nvar bar = function(){\n    console.log(this.x);\n}\nbar(); // undefined\nbar.bind(foo)();    //3\nbar.call(foo);      //3\nbar.apply(foo);     //3\n```","source":"_posts/2016-04-04-理解javascript中的this.md","raw":"---\nlayout: post\ntitle: 理解javascript中的this\ndate: 2016-04-04 10:12:38\ncomments: true\ncategories: JS\ntags: [this, 面向对象]\nkeywords: JS, 原生, this, 面向对象\n<!--description: this指向描述-->\n---\n&emsp;&emsp;在js函数中，除了定义函数时的形参，还有两个附加参数，即this和arguments，本篇就讲一下this关键字的用法以及this在不同场景下值。\n初学时受启发得知this的指向取决于函数的调用方式，总结下来有以下几点：\n<!-- more -->\n1、作为函数调用的模式，this指向window\n```javascript\nfunction func(){\n    console.log(this);\n}\n\nfunc();             //window\n```\n2、作为对象的方法调用的时候,this指向方法所在的对象\n```javascript\nvar obj = {};\nobj.name = 'hugh dai';\nobj.getNmae = function(){\n    console.log(this.name);\n}\n\nobj.getName();      //hugh dai\n```\n3、构造函数模式，this指向构造函数的实例\n```javascript\nfunction Person(name){\n    this.name = name;\n    this.getName = function(){\n        console.log(this.name);\n    }\n}\n\nvar p = new Person('hugh dai');\np.getName();        //hugh dai\n```\n4、bind/call/apply方式调用，this指向方法中的第一个参数\n```javascript\nvar foo = {\n    x: 3\n}\nvar bar = function(){\n    console.log(this.x);\n}\nbar(); // undefined\nbar.bind(foo)();    //3\nbar.call(foo);      //3\nbar.apply(foo);     //3\n```","slug":"理解javascript中的this","published":1,"updated":"2017-04-27T05:08:05.000Z","photos":[],"link":"","_id":"cj62dowwu0008luszqhl6kf8n","content":"<p>&emsp;&emsp;在js函数中，除了定义函数时的形参，还有两个附加参数，即this和arguments，本篇就讲一下this关键字的用法以及this在不同场景下值。<br>初学时受启发得知this的指向取决于函数的调用方式，总结下来有以下几点：<br><a id=\"more\"></a><br>1、作为函数调用的模式，this指向window<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func();             <span class=\"comment\">//window</span></div></pre></td></tr></table></figure></p>\n<p>2、作为对象的方法调用的时候,this指向方法所在的对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">obj.name = <span class=\"string\">'hugh dai'</span>;</div><div class=\"line\">obj.getNmae = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.getName();      <span class=\"comment\">//hugh dai</span></div></pre></td></tr></table></figure></p>\n<p>3、构造函数模式，this指向构造函数的实例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'hugh dai'</span>);</div><div class=\"line\">p.getName();        <span class=\"comment\">//hugh dai</span></div></pre></td></tr></table></figure></p>\n<p>4、bind/call/apply方式调用，this指向方法中的第一个参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</div><div class=\"line\">    x: <span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); <span class=\"comment\">// undefined</span></div><div class=\"line\">bar.bind(foo)();    <span class=\"comment\">//3</span></div><div class=\"line\">bar.call(foo);      <span class=\"comment\">//3</span></div><div class=\"line\">bar.apply(foo);     <span class=\"comment\">//3</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>&emsp;&emsp;在js函数中，除了定义函数时的形参，还有两个附加参数，即this和arguments，本篇就讲一下this关键字的用法以及this在不同场景下值。<br>初学时受启发得知this的指向取决于函数的调用方式，总结下来有以下几点：<br>","more":"<br>1、作为函数调用的模式，this指向window<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func();             <span class=\"comment\">//window</span></div></pre></td></tr></table></figure></p>\n<p>2、作为对象的方法调用的时候,this指向方法所在的对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\">obj.name = <span class=\"string\">'hugh dai'</span>;</div><div class=\"line\">obj.getNmae = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.getName();      <span class=\"comment\">//hugh dai</span></div></pre></td></tr></table></figure></p>\n<p>3、构造函数模式，this指向构造函数的实例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">'hugh dai'</span>);</div><div class=\"line\">p.getName();        <span class=\"comment\">//hugh dai</span></div></pre></td></tr></table></figure></p>\n<p>4、bind/call/apply方式调用，this指向方法中的第一个参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</div><div class=\"line\">    x: <span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</div><div class=\"line\">&#125;</div><div class=\"line\">bar(); <span class=\"comment\">// undefined</span></div><div class=\"line\">bar.bind(foo)();    <span class=\"comment\">//3</span></div><div class=\"line\">bar.call(foo);      <span class=\"comment\">//3</span></div><div class=\"line\">bar.apply(foo);     <span class=\"comment\">//3</span></div></pre></td></tr></table></figure></p>"},{"layout":"post","title":"事件模型","date":"2016-04-03T09:27:16.000Z","comments":1,"keywords":"JS, 原生, 事件, 事件流, Event flow","<!--description":"js事件流描述-->","_content":"## 事件触发过程\n在前端开发中，经常会遇到事件监听，很多人对事件捕获及事件冒泡不置可否，以下是我对事件模型的一些看法，简单来说就是从外向内捕捉，然后到目标阶段后依次向上冒泡，详情请自行[W3C](https://www.w3.org/TR/DOM-Level-3-Events/#event-flow)。\n图片引用自[W3C](https://www.w3.org/TR/DOM-Level-3-Events/#event-flow)\n![](https://www.w3.org/TR/DOM-Level-3-Events/images/eventflow.svg)\n    1、捕获阶段：在事件对象到达事件目标之前，事件对象必须从window经过目标的祖先节点传播到事件目标。 这个阶段被我们称之为捕获阶段。在这个阶段注册的事件监听器在事件到达其目标前必须先处理事件。\n    2、目标阶段：事件对象到达其事件目标。 这个阶段被我们称为目标阶段。一旦事件对象到达事件目标，该阶段的事件监听器就要对它进行处理。如果一个事件对象类型被标志为不能冒泡。那么对应的事件对象在到达此阶段时就会终止传播。\n    3、冒泡阶段：事件对象以一个与捕获阶段相反的方向从事件目标传播经过其祖先节点传播到window。这个阶段被称之为冒泡阶段。在此阶段注册的事件监听器会对相应的冒泡事件进行处理。\n<!-- more -->\n## 跨浏览器EventUtil\n以下是js大神[Nicholas Zakas](https://github.com/nzakas/)写的[Professional JavaScript for Web Developers](https://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY)中的Cross Browser Event Utility\n查看[Hugh Dai Gist](https://gist.github.com/HughDai/a365e2515643e861ceff6b6181400449)\n```javascript\n    var EventUtil = {\n                addHandler: function( element, type, handler ) {\n                    if ( element.addEventListener ) {\n                        element.addEventListener ( type, handler, false );\n                    } else if ( element.attachEvent ) {\n                        element.attachEvent ( \"on\" + type, handler );\n                    } else {\n                        element[\"on\" + type] = handler;\n                    }\n                },\n                getEvent: function ( event ) {\n                    return event ? event : window.event;\n                },\n                getTarget: function ( event ) {\n                    return event.target || event.srcElement;\n                },\n                preventDefault: function ( event ) {\n                    if ( event.preventDefault ) {\n                        event.preventDefault();\n                    } else {\n                        event.returnValue = false;\n                    }\n                },\n                removeHandler: function( element, type, handler ) {\n                    if ( element.removeEventListener ) {\n                        element.removeEventListener ( type, handler, false );\n                    } else if ( element.detachEvent ) {\n                        element.detachEvent ( \"on\" + type, handler );\n                    } else {\n                        element[\"on\" + type] = null;\n                    }\n                },\n                stopPropagation: function ( event ) {\n                    if ( event.stopPropagation ) {\n                        event.stopPropagation();\n                    } else {\n                        event.cancelBubble = true;\n                    }\n                }\n            };\n```\n\n## Demo\n这里修改一下大神[Wilson Page](https://github.com/wilsonpage)的一个demo，更形象的描述事件流模型。\n\n<p data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"BzNjax\" data-default-tab=\"js,result\" data-user=\"HughDai\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/BzNjax/\">BzNjax</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\">@HughDai</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"assets.codepen.io/assets/embed/ei.js\"></script>","source":"_posts/2016-04-03-事件模型.md","raw":"---\nlayout: post\ntitle: 事件模型\ndate: 2016-04-03 17:27:16\ncomments: true\ncategories: JS\ntags: [Event]\nkeywords: JS, 原生, 事件, 事件流, Event flow\n<!--description: js事件流描述-->\n---\n## 事件触发过程\n在前端开发中，经常会遇到事件监听，很多人对事件捕获及事件冒泡不置可否，以下是我对事件模型的一些看法，简单来说就是从外向内捕捉，然后到目标阶段后依次向上冒泡，详情请自行[W3C](https://www.w3.org/TR/DOM-Level-3-Events/#event-flow)。\n图片引用自[W3C](https://www.w3.org/TR/DOM-Level-3-Events/#event-flow)\n![](https://www.w3.org/TR/DOM-Level-3-Events/images/eventflow.svg)\n    1、捕获阶段：在事件对象到达事件目标之前，事件对象必须从window经过目标的祖先节点传播到事件目标。 这个阶段被我们称之为捕获阶段。在这个阶段注册的事件监听器在事件到达其目标前必须先处理事件。\n    2、目标阶段：事件对象到达其事件目标。 这个阶段被我们称为目标阶段。一旦事件对象到达事件目标，该阶段的事件监听器就要对它进行处理。如果一个事件对象类型被标志为不能冒泡。那么对应的事件对象在到达此阶段时就会终止传播。\n    3、冒泡阶段：事件对象以一个与捕获阶段相反的方向从事件目标传播经过其祖先节点传播到window。这个阶段被称之为冒泡阶段。在此阶段注册的事件监听器会对相应的冒泡事件进行处理。\n<!-- more -->\n## 跨浏览器EventUtil\n以下是js大神[Nicholas Zakas](https://github.com/nzakas/)写的[Professional JavaScript for Web Developers](https://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY)中的Cross Browser Event Utility\n查看[Hugh Dai Gist](https://gist.github.com/HughDai/a365e2515643e861ceff6b6181400449)\n```javascript\n    var EventUtil = {\n                addHandler: function( element, type, handler ) {\n                    if ( element.addEventListener ) {\n                        element.addEventListener ( type, handler, false );\n                    } else if ( element.attachEvent ) {\n                        element.attachEvent ( \"on\" + type, handler );\n                    } else {\n                        element[\"on\" + type] = handler;\n                    }\n                },\n                getEvent: function ( event ) {\n                    return event ? event : window.event;\n                },\n                getTarget: function ( event ) {\n                    return event.target || event.srcElement;\n                },\n                preventDefault: function ( event ) {\n                    if ( event.preventDefault ) {\n                        event.preventDefault();\n                    } else {\n                        event.returnValue = false;\n                    }\n                },\n                removeHandler: function( element, type, handler ) {\n                    if ( element.removeEventListener ) {\n                        element.removeEventListener ( type, handler, false );\n                    } else if ( element.detachEvent ) {\n                        element.detachEvent ( \"on\" + type, handler );\n                    } else {\n                        element[\"on\" + type] = null;\n                    }\n                },\n                stopPropagation: function ( event ) {\n                    if ( event.stopPropagation ) {\n                        event.stopPropagation();\n                    } else {\n                        event.cancelBubble = true;\n                    }\n                }\n            };\n```\n\n## Demo\n这里修改一下大神[Wilson Page](https://github.com/wilsonpage)的一个demo，更形象的描述事件流模型。\n\n<p data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"BzNjax\" data-default-tab=\"js,result\" data-user=\"HughDai\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/BzNjax/\">BzNjax</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\">@HughDai</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"assets.codepen.io/assets/embed/ei.js\"></script>","slug":"事件模型","published":1,"updated":"2017-06-05T05:31:55.000Z","photos":[],"link":"","_id":"cj62dowwz000bluszc2pca0rw","content":"<h2 id=\"事件触发过程\"><a href=\"#事件触发过程\" class=\"headerlink\" title=\"事件触发过程\"></a>事件触发过程</h2><p>在前端开发中，经常会遇到事件监听，很多人对事件捕获及事件冒泡不置可否，以下是我对事件模型的一些看法，简单来说就是从外向内捕捉，然后到目标阶段后依次向上冒泡，详情请自行<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\" target=\"_blank\" rel=\"external\">W3C</a>。<br>图片引用自<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\" target=\"_blank\" rel=\"external\">W3C</a><br><img src=\"https://www.w3.org/TR/DOM-Level-3-Events/images/eventflow.svg\" alt=\"\"><br>    1、捕获阶段：在事件对象到达事件目标之前，事件对象必须从window经过目标的祖先节点传播到事件目标。 这个阶段被我们称之为捕获阶段。在这个阶段注册的事件监听器在事件到达其目标前必须先处理事件。<br>    2、目标阶段：事件对象到达其事件目标。 这个阶段被我们称为目标阶段。一旦事件对象到达事件目标，该阶段的事件监听器就要对它进行处理。如果一个事件对象类型被标志为不能冒泡。那么对应的事件对象在到达此阶段时就会终止传播。<br>    3、冒泡阶段：事件对象以一个与捕获阶段相反的方向从事件目标传播经过其祖先节点传播到window。这个阶段被称之为冒泡阶段。在此阶段注册的事件监听器会对相应的冒泡事件进行处理。<br><a id=\"more\"></a></p>\n<h2 id=\"跨浏览器EventUtil\"><a href=\"#跨浏览器EventUtil\" class=\"headerlink\" title=\"跨浏览器EventUtil\"></a>跨浏览器EventUtil</h2><p>以下是js大神<a href=\"https://github.com/nzakas/\" target=\"_blank\" rel=\"external\">Nicholas Zakas</a>写的<a href=\"https://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY\" target=\"_blank\" rel=\"external\">Professional JavaScript for Web Developers</a>中的Cross Browser Event Utility<br>查看<a href=\"https://gist.github.com/HughDai/a365e2515643e861ceff6b6181400449\" target=\"_blank\" rel=\"external\">Hugh Dai Gist</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventUtil = &#123;</div><div class=\"line\">            addHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> element, type, handler </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( element.addEventListener ) &#123;</div><div class=\"line\">                    element.addEventListener ( type, handler, <span class=\"literal\">false</span> );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( element.attachEvent ) &#123;</div><div class=\"line\">                    element.attachEvent ( <span class=\"string\">\"on\"</span> + type, handler );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    element[<span class=\"string\">\"on\"</span> + type] = handler;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> event ? event : <span class=\"built_in\">window</span>.event;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getTarget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> event.target || event.srcElement;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            preventDefault: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( event.preventDefault ) &#123;</div><div class=\"line\">                    event.preventDefault();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    event.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            removeHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> element, type, handler </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( element.removeEventListener ) &#123;</div><div class=\"line\">                    element.removeEventListener ( type, handler, <span class=\"literal\">false</span> );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( element.detachEvent ) &#123;</div><div class=\"line\">                    element.detachEvent ( <span class=\"string\">\"on\"</span> + type, handler );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    element[<span class=\"string\">\"on\"</span> + type] = <span class=\"literal\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            stopPropagation: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( event.stopPropagation ) &#123;</div><div class=\"line\">                    event.stopPropagation();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    event.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>这里修改一下大神<a href=\"https://github.com/wilsonpage\" target=\"_blank\" rel=\"external\">Wilson Page</a>的一个demo，更形象的描述事件流模型。</p>\n<p></p><p data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"BzNjax\" data-default-tab=\"js,result\" data-user=\"HughDai\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/BzNjax/\" target=\"_blank\" rel=\"external\">BzNjax</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\" target=\"_blank\" rel=\"external\">@HughDai</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><p></p>\n<script async src=\"assets.codepen.io/assets/embed/ei.js\"></script>","excerpt":"<h2 id=\"事件触发过程\"><a href=\"#事件触发过程\" class=\"headerlink\" title=\"事件触发过程\"></a>事件触发过程</h2><p>在前端开发中，经常会遇到事件监听，很多人对事件捕获及事件冒泡不置可否，以下是我对事件模型的一些看法，简单来说就是从外向内捕捉，然后到目标阶段后依次向上冒泡，详情请自行<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\">W3C</a>。<br>图片引用自<a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\">W3C</a><br><img src=\"https://www.w3.org/TR/DOM-Level-3-Events/images/eventflow.svg\" alt=\"\"><br>    1、捕获阶段：在事件对象到达事件目标之前，事件对象必须从window经过目标的祖先节点传播到事件目标。 这个阶段被我们称之为捕获阶段。在这个阶段注册的事件监听器在事件到达其目标前必须先处理事件。<br>    2、目标阶段：事件对象到达其事件目标。 这个阶段被我们称为目标阶段。一旦事件对象到达事件目标，该阶段的事件监听器就要对它进行处理。如果一个事件对象类型被标志为不能冒泡。那么对应的事件对象在到达此阶段时就会终止传播。<br>    3、冒泡阶段：事件对象以一个与捕获阶段相反的方向从事件目标传播经过其祖先节点传播到window。这个阶段被称之为冒泡阶段。在此阶段注册的事件监听器会对相应的冒泡事件进行处理。<br>","more":"</p>\n<h2 id=\"跨浏览器EventUtil\"><a href=\"#跨浏览器EventUtil\" class=\"headerlink\" title=\"跨浏览器EventUtil\"></a>跨浏览器EventUtil</h2><p>以下是js大神<a href=\"https://github.com/nzakas/\">Nicholas Zakas</a>写的<a href=\"https://www.amazon.cn/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%B3%BD%E5%8D%A1%E6%96%AF/dp/B007OQQVMY\">Professional JavaScript for Web Developers</a>中的Cross Browser Event Utility<br>查看<a href=\"https://gist.github.com/HughDai/a365e2515643e861ceff6b6181400449\">Hugh Dai Gist</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventUtil = &#123;</div><div class=\"line\">            addHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> element, type, handler </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( element.addEventListener ) &#123;</div><div class=\"line\">                    element.addEventListener ( type, handler, <span class=\"literal\">false</span> );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( element.attachEvent ) &#123;</div><div class=\"line\">                    element.attachEvent ( <span class=\"string\">\"on\"</span> + type, handler );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    element[<span class=\"string\">\"on\"</span> + type] = handler;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getEvent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> event ? event : <span class=\"built_in\">window</span>.event;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            getTarget: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> event.target || event.srcElement;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            preventDefault: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( event.preventDefault ) &#123;</div><div class=\"line\">                    event.preventDefault();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    event.returnValue = <span class=\"literal\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            removeHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> element, type, handler </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( element.removeEventListener ) &#123;</div><div class=\"line\">                    element.removeEventListener ( type, handler, <span class=\"literal\">false</span> );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( element.detachEvent ) &#123;</div><div class=\"line\">                    element.detachEvent ( <span class=\"string\">\"on\"</span> + type, handler );</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    element[<span class=\"string\">\"on\"</span> + type] = <span class=\"literal\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            stopPropagation: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> event </span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ( event.stopPropagation ) &#123;</div><div class=\"line\">                    event.stopPropagation();</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    event.cancelBubble = <span class=\"literal\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p>这里修改一下大神<a href=\"https://github.com/wilsonpage\">Wilson Page</a>的一个demo，更形象的描述事件流模型。</p>\n<p><p data-height=\"600\" data-theme-id=\"0\" data-slug-hash=\"BzNjax\" data-default-tab=\"js,result\" data-user=\"HughDai\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/HughDai/pen/BzNjax/\">BzNjax</a> by Hugh Dai (<a href=\"http://codepen.io/HughDai\">@HughDai</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p></p>\n<script async src=\"assets.codepen.io/assets/embed/ei.js\"></script>"},{"layout":"post","title":"原生ajax","date":"2016-04-21T14:55:15.000Z","comments":1,"keywords":"JS, ajax, 原生","<!--description":"原生js实现ajax-->","_content":"原生js实现ajax包括get和post\n<!-- more -->\n```javascript\nfunction Ajax(type, url, data, success, failed) {\n            // 创建ajax对象\n            var xhr = null;\n            if (window.XMLHttpRequest) {\n                xhr = new XMLHttpRequest();\n            } else {\n                xhr = new ActiveXObject('Microsoft.XMLHTTP')\n            }\n\n            var type = type.toUpperCase();\n            // 用于清除缓存\n            var random = Math.random();\n\n            if (typeof data == 'object') {\n                var str = '';\n                for (var key in data) {\n                    str += key + '=' + data[key] + '&';\n                }\n                data = str.replace(/&$/, '');\n            }\n\n            if (type == 'GET') {\n                if (data) {\n                    xhr.open('GET', url + '?' + data, true);\n                } else {\n                    xhr.open('GET', url + '?t=' + random, true);\n                }\n                xhr.send();\n\n            } else if (type == 'POST') {\n                xhr.open('POST', url, true);\n                // 如果需要像 html 表单那样 POST 数据，请使用 setRequestHeader() 来添加 http 头。\n                xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n                xhr.send(data);\n            }\n\n            // 处理返回数据\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4) {\n                    if (xhr.status == 200) {\n                        success(xhr.responseText);\n                    } else {\n                        if (failed) {\n                            failed(xhr.status);\n                        }\n                    }\n                }\n            }\n        }\n```","source":"_posts/2016-04-21-原生ajax.md","raw":"---\nlayout: post\ntitle: 原生ajax\ndate: 2016-04-21 22:55:15\ncomments: true\ncategories: JS\ntags: [ajax]\nkeywords: JS, ajax, 原生\n<!--description: 原生js实现ajax-->\n---\n原生js实现ajax包括get和post\n<!-- more -->\n```javascript\nfunction Ajax(type, url, data, success, failed) {\n            // 创建ajax对象\n            var xhr = null;\n            if (window.XMLHttpRequest) {\n                xhr = new XMLHttpRequest();\n            } else {\n                xhr = new ActiveXObject('Microsoft.XMLHTTP')\n            }\n\n            var type = type.toUpperCase();\n            // 用于清除缓存\n            var random = Math.random();\n\n            if (typeof data == 'object') {\n                var str = '';\n                for (var key in data) {\n                    str += key + '=' + data[key] + '&';\n                }\n                data = str.replace(/&$/, '');\n            }\n\n            if (type == 'GET') {\n                if (data) {\n                    xhr.open('GET', url + '?' + data, true);\n                } else {\n                    xhr.open('GET', url + '?t=' + random, true);\n                }\n                xhr.send();\n\n            } else if (type == 'POST') {\n                xhr.open('POST', url, true);\n                // 如果需要像 html 表单那样 POST 数据，请使用 setRequestHeader() 来添加 http 头。\n                xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n                xhr.send(data);\n            }\n\n            // 处理返回数据\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4) {\n                    if (xhr.status == 200) {\n                        success(xhr.responseText);\n                    } else {\n                        if (failed) {\n                            failed(xhr.status);\n                        }\n                    }\n                }\n            }\n        }\n```","slug":"原生ajax","published":1,"updated":"2017-04-27T05:07:42.000Z","photos":[],"link":"","_id":"cj62dowx2000eluszwvy9x72w","content":"<p>原生js实现ajax包括get和post<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ajax</span>(<span class=\"params\">type, url, data, success, failed</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 创建ajax对象</span></div><div class=\"line\">            <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">                xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">var</span> type = type.toUpperCase();</div><div class=\"line\">            <span class=\"comment\">// 用于清除缓存</span></div><div class=\"line\">            <span class=\"keyword\">var</span> random = <span class=\"built_in\">Math</span>.random();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data == <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> data) &#123;</div><div class=\"line\">                    str += key + <span class=\"string\">'='</span> + data[key] + <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                data = str.replace(<span class=\"regexp\">/&amp;$/</span>, <span class=\"string\">''</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (type == <span class=\"string\">'GET'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (data) &#123;</div><div class=\"line\">                    xhr.open(<span class=\"string\">'GET'</span>, url + <span class=\"string\">'?'</span> + data, <span class=\"literal\">true</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    xhr.open(<span class=\"string\">'GET'</span>, url + <span class=\"string\">'?t='</span> + random, <span class=\"literal\">true</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                xhr.send();</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">'POST'</span>) &#123;</div><div class=\"line\">                xhr.open(<span class=\"string\">'POST'</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\">                <span class=\"comment\">// 如果需要像 html 表单那样 POST 数据，请使用 setRequestHeader() 来添加 http 头。</span></div><div class=\"line\">                xhr.setRequestHeader(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</div><div class=\"line\">                xhr.send(data);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 处理返回数据</span></div><div class=\"line\">            xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                        success(xhr.responseText);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (failed) &#123;</div><div class=\"line\">                            failed(xhr.status);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>原生js实现ajax包括get和post<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ajax</span>(<span class=\"params\">type, url, data, success, failed</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 创建ajax对象</span></div><div class=\"line\">            <span class=\"keyword\">var</span> xhr = <span class=\"literal\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</div><div class=\"line\">                xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                xhr = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">'Microsoft.XMLHTTP'</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">var</span> type = type.toUpperCase();</div><div class=\"line\">            <span class=\"comment\">// 用于清除缓存</span></div><div class=\"line\">            <span class=\"keyword\">var</span> random = <span class=\"built_in\">Math</span>.random();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data == <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> data) &#123;</div><div class=\"line\">                    str += key + <span class=\"string\">'='</span> + data[key] + <span class=\"string\">'&amp;'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                data = str.replace(<span class=\"regexp\">/&amp;$/</span>, <span class=\"string\">''</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (type == <span class=\"string\">'GET'</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (data) &#123;</div><div class=\"line\">                    xhr.open(<span class=\"string\">'GET'</span>, url + <span class=\"string\">'?'</span> + data, <span class=\"literal\">true</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    xhr.open(<span class=\"string\">'GET'</span>, url + <span class=\"string\">'?t='</span> + random, <span class=\"literal\">true</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                xhr.send();</div><div class=\"line\"></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type == <span class=\"string\">'POST'</span>) &#123;</div><div class=\"line\">                xhr.open(<span class=\"string\">'POST'</span>, url, <span class=\"literal\">true</span>);</div><div class=\"line\">                <span class=\"comment\">// 如果需要像 html 表单那样 POST 数据，请使用 setRequestHeader() 来添加 http 头。</span></div><div class=\"line\">                xhr.setRequestHeader(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"application/x-www-form-urlencoded\"</span>);</div><div class=\"line\">                xhr.send(data);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 处理返回数据</span></div><div class=\"line\">            xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (xhr.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (xhr.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                        success(xhr.responseText);</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (failed) &#123;</div><div class=\"line\">                            failed(xhr.status);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>"},{"layout":"post","title":"跨域和jsonp","date":"2016-06-15T02:44:33.000Z","comments":1,"keywords":"JS, 跨域, JSONP","<!--description":"JSONP跨域-->","_content":"## 前言\n在开发过程中往往会遇到js跨域问题，在面试中跨域几乎是必考题。js跨域有很多方式，jsonp只是其中一种，许多人对jsonp似懂非懂，下面说一下js跨域原因以及jsonp原理。\n## 同源策略\n为安全考虑，Netscape提出了同源策略 Same-Origin-Policy(SOP)。url组成包括协议名，子域名，主域名，端口号只要协议，域名，端口有任何一个的不同，就被认为是跨域，即禁止页面加载或执行与自身来源不同的域的任何脚本。即使是 localhost:8080 请求 127.0.0.1:8080 也会被认为是跨域。\n实现跨域有很多种方法：\n<!-- more -->\n1. 服务端代理\n2. 服务端返回响应头Access-Control-Allow-Origin\n3. jsonp\n4. iframe嵌入页面\n5. html5 postMessage\n## jsonp原理\n我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。\n浏览器中script、img、iframe、link这些包含 src 属性的标签可以加载跨域资源。但浏览器限制了JavaScript的权限使其不能读、写加载的内容。\n简单来说，jsonp就是动态添加script标签引入src来实现跨域。\n\n原生js\n```javascript\n//客户端\nfunction addScriptTag(src) {\n     var script = document.createElement('script');\n     script.setAttribute('type', 'text/javascript');\n     script.src = src;\n     document.body.appendChild(script);\n };\n//如：在onload后，跨域请求\nwindow.onload = function () {\n     addScriptTag('http://127.0.0.1:8080?callback=callback');\n};\n//回调的方法,且必须为全局方法，不然会报错\nfunction callback(data) {\n     console.log(data);\n};\n//服务端 node.js\nvar http = require('http');\nvar url = require('url');\nvar querystring = require('querystring');\nvar server = http.createServer();\nserver.on('request', function (req, res) {\n    console.log(url.parse(req.url));\n    var urlPath = url.parse(req.url).pathname;\n    var qs = querystring.parse(req.url.split('?')[1]);\n    console.log(qs);\n    if (qs.callback) {\n        res.writeHead(200, {'Content-Type': 'application/json;charset=utf-8'});\n        var data = {\n            \"name\": \"hugh dai\"\n        };\n        data = JSON.stringify(data);\n        var callback = qs.callback+'('+data+');';\n        res.end(callback);\n    }\n    else {\n        res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'});\n        res.end('Hell World\\n');\n    }\n})\nserver.listen('8080');\nconsole.log('Server running...');\n```\njquery实现\n```javascript\n$.ajax({\n        type: \"get\",\n        async: false,\n        url: \"http://127.0.0.1:8080\",\n        dataType: \"jsonp\",\n        jsonpCallback:\"callback\", //callback函数(jsonp回调函数，默认是callback)\n        success: function(data){\n            //如果有callback函数的话两者都会执行\n            console.log(data);\n        },\n        error: function(){\n            console.log('fail');\n        }\n    });\n```","source":"_posts/2016-06-15-跨域和jsonp.md","raw":"---\nlayout: post\ntitle: 跨域和jsonp\ndate: 2016-06-15 10:44:33\ncomments: true\ncategories: JS\ntags: [跨域]\nkeywords: JS, 跨域, JSONP\n<!--description: JSONP跨域-->\n---\n## 前言\n在开发过程中往往会遇到js跨域问题，在面试中跨域几乎是必考题。js跨域有很多方式，jsonp只是其中一种，许多人对jsonp似懂非懂，下面说一下js跨域原因以及jsonp原理。\n## 同源策略\n为安全考虑，Netscape提出了同源策略 Same-Origin-Policy(SOP)。url组成包括协议名，子域名，主域名，端口号只要协议，域名，端口有任何一个的不同，就被认为是跨域，即禁止页面加载或执行与自身来源不同的域的任何脚本。即使是 localhost:8080 请求 127.0.0.1:8080 也会被认为是跨域。\n实现跨域有很多种方法：\n<!-- more -->\n1. 服务端代理\n2. 服务端返回响应头Access-Control-Allow-Origin\n3. jsonp\n4. iframe嵌入页面\n5. html5 postMessage\n## jsonp原理\n我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。\n浏览器中script、img、iframe、link这些包含 src 属性的标签可以加载跨域资源。但浏览器限制了JavaScript的权限使其不能读、写加载的内容。\n简单来说，jsonp就是动态添加script标签引入src来实现跨域。\n\n原生js\n```javascript\n//客户端\nfunction addScriptTag(src) {\n     var script = document.createElement('script');\n     script.setAttribute('type', 'text/javascript');\n     script.src = src;\n     document.body.appendChild(script);\n };\n//如：在onload后，跨域请求\nwindow.onload = function () {\n     addScriptTag('http://127.0.0.1:8080?callback=callback');\n};\n//回调的方法,且必须为全局方法，不然会报错\nfunction callback(data) {\n     console.log(data);\n};\n//服务端 node.js\nvar http = require('http');\nvar url = require('url');\nvar querystring = require('querystring');\nvar server = http.createServer();\nserver.on('request', function (req, res) {\n    console.log(url.parse(req.url));\n    var urlPath = url.parse(req.url).pathname;\n    var qs = querystring.parse(req.url.split('?')[1]);\n    console.log(qs);\n    if (qs.callback) {\n        res.writeHead(200, {'Content-Type': 'application/json;charset=utf-8'});\n        var data = {\n            \"name\": \"hugh dai\"\n        };\n        data = JSON.stringify(data);\n        var callback = qs.callback+'('+data+');';\n        res.end(callback);\n    }\n    else {\n        res.writeHead(200, {'Content-Type': 'text/html;charset=utf-8'});\n        res.end('Hell World\\n');\n    }\n})\nserver.listen('8080');\nconsole.log('Server running...');\n```\njquery实现\n```javascript\n$.ajax({\n        type: \"get\",\n        async: false,\n        url: \"http://127.0.0.1:8080\",\n        dataType: \"jsonp\",\n        jsonpCallback:\"callback\", //callback函数(jsonp回调函数，默认是callback)\n        success: function(data){\n            //如果有callback函数的话两者都会执行\n            console.log(data);\n        },\n        error: function(){\n            console.log('fail');\n        }\n    });\n```","slug":"跨域和jsonp","published":1,"updated":"2017-04-27T05:07:19.000Z","photos":[],"link":"","_id":"cj62dox2s0014luszcagzau5r","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在开发过程中往往会遇到js跨域问题，在面试中跨域几乎是必考题。js跨域有很多方式，jsonp只是其中一种，许多人对jsonp似懂非懂，下面说一下js跨域原因以及jsonp原理。</p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>为安全考虑，Netscape提出了同源策略 Same-Origin-Policy(SOP)。url组成包括协议名，子域名，主域名，端口号只要协议，域名，端口有任何一个的不同，就被认为是跨域，即禁止页面加载或执行与自身来源不同的域的任何脚本。即使是 localhost:8080 请求 127.0.0.1:8080 也会被认为是跨域。<br>实现跨域有很多种方法：<br><a id=\"more\"></a></p>\n<ol>\n<li>服务端代理</li>\n<li>服务端返回响应头Access-Control-Allow-Origin</li>\n<li>jsonp</li>\n<li>iframe嵌入页面</li>\n<li>html5 postMessage<h2 id=\"jsonp原理\"><a href=\"#jsonp原理\" class=\"headerlink\" title=\"jsonp原理\"></a>jsonp原理</h2>我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。<br>浏览器中script、img、iframe、link这些包含 src 属性的标签可以加载跨域资源。但浏览器限制了JavaScript的权限使其不能读、写加载的内容。<br>简单来说，jsonp就是动态添加script标签引入src来实现跨域。</li>\n</ol>\n<p>原生js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//客户端</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addScriptTag</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">     script.setAttribute(<span class=\"string\">'type'</span>, <span class=\"string\">'text/javascript'</span>);</div><div class=\"line\">     script.src = src;</div><div class=\"line\">     <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\"> &#125;;</div><div class=\"line\"><span class=\"comment\">//如：在onload后，跨域请求</span></div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     addScriptTag(<span class=\"string\">'http://127.0.0.1:8080?callback=callback'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//回调的方法,且必须为全局方法，不然会报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//服务端 node.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</div><div class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(url.parse(req.url));</div><div class=\"line\">    <span class=\"keyword\">var</span> urlPath = url.parse(req.url).pathname;</div><div class=\"line\">    <span class=\"keyword\">var</span> qs = querystring.parse(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(qs);</div><div class=\"line\">    <span class=\"keyword\">if</span> (qs.callback) &#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json;charset=utf-8'</span>&#125;);</div><div class=\"line\">        <span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"hugh dai\"</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        data = <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">        <span class=\"keyword\">var</span> callback = qs.callback+<span class=\"string\">'('</span>+data+<span class=\"string\">');'</span>;</div><div class=\"line\">        res.end(callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html;charset=utf-8'</span>&#125;);</div><div class=\"line\">        res.end(<span class=\"string\">'Hell World\\n'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">server.listen(<span class=\"string\">'8080'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running...'</span>);</div></pre></td></tr></table></figure></p>\n<p>jquery实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">        type: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">        <span class=\"keyword\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        url: <span class=\"string\">\"http://127.0.0.1:8080\"</span>,</div><div class=\"line\">        dataType: <span class=\"string\">\"jsonp\"</span>,</div><div class=\"line\">        jsonpCallback:<span class=\"string\">\"callback\"</span>, <span class=\"comment\">//callback函数(jsonp回调函数，默认是callback)</span></div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//如果有callback函数的话两者都会执行</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在开发过程中往往会遇到js跨域问题，在面试中跨域几乎是必考题。js跨域有很多方式，jsonp只是其中一种，许多人对jsonp似懂非懂，下面说一下js跨域原因以及jsonp原理。</p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>为安全考虑，Netscape提出了同源策略 Same-Origin-Policy(SOP)。url组成包括协议名，子域名，主域名，端口号只要协议，域名，端口有任何一个的不同，就被认为是跨域，即禁止页面加载或执行与自身来源不同的域的任何脚本。即使是 localhost:8080 请求 127.0.0.1:8080 也会被认为是跨域。<br>实现跨域有很多种方法：<br>","more":"</p>\n<ol>\n<li>服务端代理</li>\n<li>服务端返回响应头Access-Control-Allow-Origin</li>\n<li>jsonp</li>\n<li>iframe嵌入页面</li>\n<li>html5 postMessage<h2 id=\"jsonp原理\"><a href=\"#jsonp原理\" class=\"headerlink\" title=\"jsonp原理\"></a>jsonp原理</h2>我们直接用XMLHttpRequest请求不同域上的数据时，是不可以的。但是，在页面上引入不同域上的js脚本文件却是可以的，jsonp正是利用这个特性来实现的。<br>浏览器中script、img、iframe、link这些包含 src 属性的标签可以加载跨域资源。但浏览器限制了JavaScript的权限使其不能读、写加载的内容。<br>简单来说，jsonp就是动态添加script标签引入src来实现跨域。</li>\n</ol>\n<p>原生js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//客户端</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addScriptTag</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">     script.setAttribute(<span class=\"string\">'type'</span>, <span class=\"string\">'text/javascript'</span>);</div><div class=\"line\">     script.src = src;</div><div class=\"line\">     <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\"> &#125;;</div><div class=\"line\"><span class=\"comment\">//如：在onload后，跨域请求</span></div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     addScriptTag(<span class=\"string\">'http://127.0.0.1:8080?callback=callback'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//回调的方法,且必须为全局方法，不然会报错</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//服务端 node.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer();</div><div class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(url.parse(req.url));</div><div class=\"line\">    <span class=\"keyword\">var</span> urlPath = url.parse(req.url).pathname;</div><div class=\"line\">    <span class=\"keyword\">var</span> qs = querystring.parse(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>]);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(qs);</div><div class=\"line\">    <span class=\"keyword\">if</span> (qs.callback) &#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json;charset=utf-8'</span>&#125;);</div><div class=\"line\">        <span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"hugh dai\"</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        data = <span class=\"built_in\">JSON</span>.stringify(data);</div><div class=\"line\">        <span class=\"keyword\">var</span> callback = qs.callback+<span class=\"string\">'('</span>+data+<span class=\"string\">');'</span>;</div><div class=\"line\">        res.end(callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html;charset=utf-8'</span>&#125;);</div><div class=\"line\">        res.end(<span class=\"string\">'Hell World\\n'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">server.listen(<span class=\"string\">'8080'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running...'</span>);</div></pre></td></tr></table></figure></p>\n<p>jquery实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">        type: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">        <span class=\"keyword\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        url: <span class=\"string\">\"http://127.0.0.1:8080\"</span>,</div><div class=\"line\">        dataType: <span class=\"string\">\"jsonp\"</span>,</div><div class=\"line\">        jsonpCallback:<span class=\"string\">\"callback\"</span>, <span class=\"comment\">//callback函数(jsonp回调函数，默认是callback)</span></div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//如果有callback函数的话两者都会执行</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure></p>"},{"layout":"post","title":"js依赖注入","date":"2016-05-04T03:12:27.000Z","comments":1,"keywords":"JS, 依赖注入, DI, IOC, 控制反转","<!--description":"js版依赖注入-->","_content":"相信用过AngularJS框架的jser应该都知道依赖注入的概念。依赖注入(Dependency Injection)简称DI,做过后台的程序员应该都不会陌生,因为很多后端语言，诸如C#、JAVA都有很好的框架支持，如JAVA中的Spring和C#中的Autofac。\n关于控制反转(IOC)、依赖注入(DI)，博客园有一篇好文[依赖注入那些事儿](http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html)。\n<!-- more -->\n##  分析\n依赖注入本质用途就是解决项目中的硬编码，降低代码耦合度，有效的管理模块依赖。RequireJS和AngularJS都有依赖注入的解决方案,AngularJS有一个内在的依赖注入机制，使用AngularJS，你可以把你的App分成许多个可以重复使用的组件，当需要这些组件的时候，可以通过依赖注入把这些组件注入到你的App中去。\nRequireJS\n```javascript\ndefine(['module1','module2'], function(module1, module2) {\n    // ...\n});\n```\nAngularJS\n```javascript\nangular.module('gulpAngular',\n [\n    'ngAnimate',\n    'ngCookies',\n    'ngTouch'\n    ]);\n```\n使用依赖注入我们应该要达到以下目标\n1、我们应该能够注册依赖关系\n2、注入应该接受一个函数，并返回一个我们需要的函数\n3、我们不能写太多东西——我们需要精简漂亮的语法\n4、注入应该保持被传递函数的作用域\n5、被传递的函数应该能够接受自定义参数，而不仅仅是依赖描述\n6、堪称完美的清单，下面 让我们实现它。\n##  代码实现\n首先，定义一个对象叫做injector，\n```javascript\nvar injector = {\n  dependencies: {},\n  register: function(name, src) {\n    this.dependencies[name] = src;\n  },\n  resolve: function(target) {\n\n  }\n};\n````\ninjector对象中有两个方法，regist负责注册需要依赖的模块并存在dependencies中，第二个方法是resolve，这个方法接收的参数是我们我们要注入依赖的对象，这里的关键的点就是这个注入器不应该调用我们的函数，所以我们在resolve方法中返回一个闭包来包裹我们的target,然后再调用它：\n```javascript\nresolve: function(target) {\n  return function() {\n    target();\n  };\n}\n```\n下一步到AngularJS源码中找到annotate方法，此方法将目标函数转换为一个字符串，删除它的注释(如果有)，然后提取他的参数(依赖项)：\n```javascript\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nfnText = target.toString().replace(STRIP_COMMENTS, '');\nargDecl = fnText.match(FN_ARGS)[1].split(/, ?/g);\nvar args = [];\nfor (var i = 0; i < argDecl.length; i++) {\n    if (this.dependencies[argDecl[i]]) {\n       args.push(this.dependencies[argDecl[i]]);\n     }\n}\nreturn function () {\n     target.apply({}, args);\n}\n```\n```javascript\nvar injector = {\n            //依赖库\n            dependencies: {},\n            //注册依赖\n            regist: function (name, src) {\n                this.dependencies[name] = src;\n            },\n            /**\n             * 返回闭包包裹要调用的函数\n             * @param target 需要注入的对象\n             * @returns {Function}\n             */\n            resolve: function (target) {\n                var FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n                var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n                fnText = target.toString().replace(STRIP_COMMENTS, '');\n                argDecl = fnText.match(FN_ARGS)[1].split(/, ?/g);\n                var args = [];\n                for (var i = 0; i < argDecl.length; i++) {\n                    if (this.dependencies[argDecl[i]]) {\n                        args.push(this.dependencies[argDecl[i]]);\n                    }\n                }\n                return function () {\n                    target.apply({}, args);\n                }\n            }\n        };\n```\n","source":"_posts/2016-05-04-js依赖注入.md","raw":"---\nlayout: post\ntitle: js依赖注入\ndate: 2016-05-04 11:12:27\ncomments: true\ncategories: JS\ntags: [依赖注入]\nkeywords: JS, 依赖注入, DI, IOC, 控制反转\n<!--description: js版依赖注入-->\n---\n相信用过AngularJS框架的jser应该都知道依赖注入的概念。依赖注入(Dependency Injection)简称DI,做过后台的程序员应该都不会陌生,因为很多后端语言，诸如C#、JAVA都有很好的框架支持，如JAVA中的Spring和C#中的Autofac。\n关于控制反转(IOC)、依赖注入(DI)，博客园有一篇好文[依赖注入那些事儿](http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html)。\n<!-- more -->\n##  分析\n依赖注入本质用途就是解决项目中的硬编码，降低代码耦合度，有效的管理模块依赖。RequireJS和AngularJS都有依赖注入的解决方案,AngularJS有一个内在的依赖注入机制，使用AngularJS，你可以把你的App分成许多个可以重复使用的组件，当需要这些组件的时候，可以通过依赖注入把这些组件注入到你的App中去。\nRequireJS\n```javascript\ndefine(['module1','module2'], function(module1, module2) {\n    // ...\n});\n```\nAngularJS\n```javascript\nangular.module('gulpAngular',\n [\n    'ngAnimate',\n    'ngCookies',\n    'ngTouch'\n    ]);\n```\n使用依赖注入我们应该要达到以下目标\n1、我们应该能够注册依赖关系\n2、注入应该接受一个函数，并返回一个我们需要的函数\n3、我们不能写太多东西——我们需要精简漂亮的语法\n4、注入应该保持被传递函数的作用域\n5、被传递的函数应该能够接受自定义参数，而不仅仅是依赖描述\n6、堪称完美的清单，下面 让我们实现它。\n##  代码实现\n首先，定义一个对象叫做injector，\n```javascript\nvar injector = {\n  dependencies: {},\n  register: function(name, src) {\n    this.dependencies[name] = src;\n  },\n  resolve: function(target) {\n\n  }\n};\n````\ninjector对象中有两个方法，regist负责注册需要依赖的模块并存在dependencies中，第二个方法是resolve，这个方法接收的参数是我们我们要注入依赖的对象，这里的关键的点就是这个注入器不应该调用我们的函数，所以我们在resolve方法中返回一个闭包来包裹我们的target,然后再调用它：\n```javascript\nresolve: function(target) {\n  return function() {\n    target();\n  };\n}\n```\n下一步到AngularJS源码中找到annotate方法，此方法将目标函数转换为一个字符串，删除它的注释(如果有)，然后提取他的参数(依赖项)：\n```javascript\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nfnText = target.toString().replace(STRIP_COMMENTS, '');\nargDecl = fnText.match(FN_ARGS)[1].split(/, ?/g);\nvar args = [];\nfor (var i = 0; i < argDecl.length; i++) {\n    if (this.dependencies[argDecl[i]]) {\n       args.push(this.dependencies[argDecl[i]]);\n     }\n}\nreturn function () {\n     target.apply({}, args);\n}\n```\n```javascript\nvar injector = {\n            //依赖库\n            dependencies: {},\n            //注册依赖\n            regist: function (name, src) {\n                this.dependencies[name] = src;\n            },\n            /**\n             * 返回闭包包裹要调用的函数\n             * @param target 需要注入的对象\n             * @returns {Function}\n             */\n            resolve: function (target) {\n                var FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n                var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n                fnText = target.toString().replace(STRIP_COMMENTS, '');\n                argDecl = fnText.match(FN_ARGS)[1].split(/, ?/g);\n                var args = [];\n                for (var i = 0; i < argDecl.length; i++) {\n                    if (this.dependencies[argDecl[i]]) {\n                        args.push(this.dependencies[argDecl[i]]);\n                    }\n                }\n                return function () {\n                    target.apply({}, args);\n                }\n            }\n        };\n```\n","slug":"js依赖注入","published":1,"updated":"2017-04-27T05:07:30.000Z","photos":[],"link":"","_id":"cj62dox2v0016luszdzejxbhz","content":"<p>相信用过AngularJS框架的jser应该都知道依赖注入的概念。依赖注入(Dependency Injection)简称DI,做过后台的程序员应该都不会陌生,因为很多后端语言，诸如C#、JAVA都有很好的框架支持，如JAVA中的Spring和C#中的Autofac。<br>关于控制反转(IOC)、依赖注入(DI)，博客园有一篇好文<a href=\"http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html\" target=\"_blank\" rel=\"external\">依赖注入那些事儿</a>。<br><a id=\"more\"></a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>依赖注入本质用途就是解决项目中的硬编码，降低代码耦合度，有效的管理模块依赖。RequireJS和AngularJS都有依赖注入的解决方案,AngularJS有一个内在的依赖注入机制，使用AngularJS，你可以把你的App分成许多个可以重复使用的组件，当需要这些组件的时候，可以通过依赖注入把这些组件注入到你的App中去。<br>RequireJS<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'module1'</span>,<span class=\"string\">'module2'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module1, module2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>AngularJS<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'gulpAngular'</span>,</div><div class=\"line\"> [</div><div class=\"line\">    <span class=\"string\">'ngAnimate'</span>,</div><div class=\"line\">    <span class=\"string\">'ngCookies'</span>,</div><div class=\"line\">    <span class=\"string\">'ngTouch'</span></div><div class=\"line\">    ]);</div></pre></td></tr></table></figure></p>\n<p>使用依赖注入我们应该要达到以下目标<br>1、我们应该能够注册依赖关系<br>2、注入应该接受一个函数，并返回一个我们需要的函数<br>3、我们不能写太多东西——我们需要精简漂亮的语法<br>4、注入应该保持被传递函数的作用域<br>5、被传递的函数应该能够接受自定义参数，而不仅仅是依赖描述<br>6、堪称完美的清单，下面 让我们实现它。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>首先，定义一个对象叫做injector，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector = &#123;</div><div class=\"line\">  dependencies: &#123;&#125;,</div><div class=\"line\">  register: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, src</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dependencies[name] = src;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  resolve: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<p>injector对象中有两个方法，regist负责注册需要依赖的模块并存在dependencies中，第二个方法是resolve，这个方法接收的参数是我们我们要注入依赖的对象，这里的关键的点就是这个注入器不应该调用我们的函数，所以我们在resolve方法中返回一个闭包来包裹我们的target,然后再调用它：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    target();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下一步到AngularJS源码中找到annotate方法，此方法将目标函数转换为一个字符串，删除它的注释(如果有)，然后提取他的参数(依赖项)：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> FN_ARGS = <span class=\"regexp\">/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> STRIP_COMMENTS = <span class=\"regexp\">/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg</span>;</div><div class=\"line\">fnText = target.toString().replace(STRIP_COMMENTS, <span class=\"string\">''</span>);</div><div class=\"line\">argDecl = fnText.match(FN_ARGS)[<span class=\"number\">1</span>].split(<span class=\"regexp\">/, ?/g</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> args = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; argDecl.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dependencies[argDecl[i]]) &#123;</div><div class=\"line\">       args.push(<span class=\"keyword\">this</span>.dependencies[argDecl[i]]);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     target.apply(&#123;&#125;, args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector = &#123;</div><div class=\"line\">            <span class=\"comment\">//依赖库</span></div><div class=\"line\">            dependencies: &#123;&#125;,</div><div class=\"line\">            <span class=\"comment\">//注册依赖</span></div><div class=\"line\">            regist: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, src</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.dependencies[name] = src;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"comment\">/**</span></div><div class=\"line\">             * 返回闭包包裹要调用的函数</div><div class=\"line\">             * @param target 需要注入的对象</div><div class=\"line\">             * @returns &#123;Function&#125;</div><div class=\"line\">             */</div><div class=\"line\">            resolve: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> FN_ARGS = <span class=\"regexp\">/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m</span>;</div><div class=\"line\">                <span class=\"keyword\">var</span> STRIP_COMMENTS = <span class=\"regexp\">/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg</span>;</div><div class=\"line\">                fnText = target.toString().replace(STRIP_COMMENTS, <span class=\"string\">''</span>);</div><div class=\"line\">                argDecl = fnText.match(FN_ARGS)[<span class=\"number\">1</span>].split(<span class=\"regexp\">/, ?/g</span>);</div><div class=\"line\">                <span class=\"keyword\">var</span> args = [];</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; argDecl.length; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dependencies[argDecl[i]]) &#123;</div><div class=\"line\">                        args.push(<span class=\"keyword\">this</span>.dependencies[argDecl[i]]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    target.apply(&#123;&#125;, args);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n","excerpt":"<p>相信用过AngularJS框架的jser应该都知道依赖注入的概念。依赖注入(Dependency Injection)简称DI,做过后台的程序员应该都不会陌生,因为很多后端语言，诸如C#、JAVA都有很好的框架支持，如JAVA中的Spring和C#中的Autofac。<br>关于控制反转(IOC)、依赖注入(DI)，博客园有一篇好文<a href=\"http://www.cnblogs.com/leoo2sk/archive/2009/06/17/1504693.html\">依赖注入那些事儿</a>。<br>","more":"</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>依赖注入本质用途就是解决项目中的硬编码，降低代码耦合度，有效的管理模块依赖。RequireJS和AngularJS都有依赖注入的解决方案,AngularJS有一个内在的依赖注入机制，使用AngularJS，你可以把你的App分成许多个可以重复使用的组件，当需要这些组件的时候，可以通过依赖注入把这些组件注入到你的App中去。<br>RequireJS<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">'module1'</span>,<span class=\"string\">'module2'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module1, module2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>AngularJS<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular.module(<span class=\"string\">'gulpAngular'</span>,</div><div class=\"line\"> [</div><div class=\"line\">    <span class=\"string\">'ngAnimate'</span>,</div><div class=\"line\">    <span class=\"string\">'ngCookies'</span>,</div><div class=\"line\">    <span class=\"string\">'ngTouch'</span></div><div class=\"line\">    ]);</div></pre></td></tr></table></figure></p>\n<p>使用依赖注入我们应该要达到以下目标<br>1、我们应该能够注册依赖关系<br>2、注入应该接受一个函数，并返回一个我们需要的函数<br>3、我们不能写太多东西——我们需要精简漂亮的语法<br>4、注入应该保持被传递函数的作用域<br>5、被传递的函数应该能够接受自定义参数，而不仅仅是依赖描述<br>6、堪称完美的清单，下面 让我们实现它。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>首先，定义一个对象叫做injector，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector = &#123;</div><div class=\"line\">  dependencies: &#123;&#125;,</div><div class=\"line\">  register: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, src</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.dependencies[name] = src;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  resolve: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<p>injector对象中有两个方法，regist负责注册需要依赖的模块并存在dependencies中，第二个方法是resolve，这个方法接收的参数是我们我们要注入依赖的对象，这里的关键的点就是这个注入器不应该调用我们的函数，所以我们在resolve方法中返回一个闭包来包裹我们的target,然后再调用它：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolve: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    target();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下一步到AngularJS源码中找到annotate方法，此方法将目标函数转换为一个字符串，删除它的注释(如果有)，然后提取他的参数(依赖项)：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> FN_ARGS = <span class=\"regexp\">/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> STRIP_COMMENTS = <span class=\"regexp\">/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg</span>;</div><div class=\"line\">fnText = target.toString().replace(STRIP_COMMENTS, <span class=\"string\">''</span>);</div><div class=\"line\">argDecl = fnText.match(FN_ARGS)[<span class=\"number\">1</span>].split(<span class=\"regexp\">/, ?/g</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> args = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; argDecl.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dependencies[argDecl[i]]) &#123;</div><div class=\"line\">       args.push(<span class=\"keyword\">this</span>.dependencies[argDecl[i]]);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">     target.apply(&#123;&#125;, args);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> injector = &#123;</div><div class=\"line\">            <span class=\"comment\">//依赖库</span></div><div class=\"line\">            dependencies: &#123;&#125;,</div><div class=\"line\">            <span class=\"comment\">//注册依赖</span></div><div class=\"line\">            regist: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, src</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.dependencies[name] = src;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"comment\">/**</div><div class=\"line\">             * 返回闭包包裹要调用的函数</div><div class=\"line\">             * @param target 需要注入的对象</div><div class=\"line\">             * @returns &#123;Function&#125;</div><div class=\"line\">             */</span></div><div class=\"line\">            resolve: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> FN_ARGS = <span class=\"regexp\">/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m</span>;</div><div class=\"line\">                <span class=\"keyword\">var</span> STRIP_COMMENTS = <span class=\"regexp\">/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg</span>;</div><div class=\"line\">                fnText = target.toString().replace(STRIP_COMMENTS, <span class=\"string\">''</span>);</div><div class=\"line\">                argDecl = fnText.match(FN_ARGS)[<span class=\"number\">1</span>].split(<span class=\"regexp\">/, ?/g</span>);</div><div class=\"line\">                <span class=\"keyword\">var</span> args = [];</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; argDecl.length; i++) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dependencies[argDecl[i]]) &#123;</div><div class=\"line\">                        args.push(<span class=\"keyword\">this</span>.dependencies[argDecl[i]]);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    target.apply(&#123;&#125;, args);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"打字动画","date":"2016-06-16T06:13:30.000Z","comments":1,"keywords":"css, animation, 动画, typing","<!--description":"css3打字动画,typing animation-->","_content":"CSS typing animation\n最近在看[CSS大牛张鹏译著 CSS SECRETS](https://github.com/cssmagic)，学到了不少，有种醍醐灌顶的感觉。\n以下是从书中摘出的打字动画部分(CSS typing animation)。详情请看[本书作者LEA VEROU的博客](http://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/)\n<!-- more -->\n效果\n\n<h1 id=\"h1\">CSS typing animation </h1>\n<style type=\"text/css\">\n            @keyframes typing {\n                from {\n                    width: 0\n                }\n            }\n            @keyframes caret {\n                50% {\n                    border-color: transparent;\n                }\n            }\n            #h1{\n                width: 21ch;\n                overflow: hidden;\n                white-space: nowrap;\n                border-right: .05em solid;\n                animation:typing 6s steps(21) infinite,\n                            caret 1s steps(1) infinite;\n            }\n</style>\n\n代码\n```html\n        <h1 id=\"h1\">CSS typing animation </h1>\n```\n```css\n        @keyframes typing {\n            from {\n                width: 0\n            }\n        }\n        @keyframes caret {\n            50% {\n                border-color: transparent;\n            }\n        }\n        #h1{\n            width: 21ch;\n            overflow: hidden;\n            white-space: nowrap;\n            border-right: .05em solid;\n            animation:typing 6s steps(21) infinite,\n                        caret 1s steps(1) infinite;\n        }\n```\n","source":"_posts/2016-06-16-打字动画.md","raw":"---\nlayout: post\ntitle: 打字动画\ndate: 2016-06-16 14:13:30\ncomments: true\ncategories: CSS\ntags: [animation]\nkeywords: css, animation, 动画, typing\n<!--description: css3打字动画,typing animation-->\n---\nCSS typing animation\n最近在看[CSS大牛张鹏译著 CSS SECRETS](https://github.com/cssmagic)，学到了不少，有种醍醐灌顶的感觉。\n以下是从书中摘出的打字动画部分(CSS typing animation)。详情请看[本书作者LEA VEROU的博客](http://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/)\n<!-- more -->\n效果\n\n<h1 id=\"h1\">CSS typing animation </h1>\n<style type=\"text/css\">\n            @keyframes typing {\n                from {\n                    width: 0\n                }\n            }\n            @keyframes caret {\n                50% {\n                    border-color: transparent;\n                }\n            }\n            #h1{\n                width: 21ch;\n                overflow: hidden;\n                white-space: nowrap;\n                border-right: .05em solid;\n                animation:typing 6s steps(21) infinite,\n                            caret 1s steps(1) infinite;\n            }\n</style>\n\n代码\n```html\n        <h1 id=\"h1\">CSS typing animation </h1>\n```\n```css\n        @keyframes typing {\n            from {\n                width: 0\n            }\n        }\n        @keyframes caret {\n            50% {\n                border-color: transparent;\n            }\n        }\n        #h1{\n            width: 21ch;\n            overflow: hidden;\n            white-space: nowrap;\n            border-right: .05em solid;\n            animation:typing 6s steps(21) infinite,\n                        caret 1s steps(1) infinite;\n        }\n```\n","slug":"打字动画","published":1,"updated":"2017-04-27T05:07:09.000Z","photos":[],"link":"","_id":"cj62dox2z0019lusz9e6oj24z","content":"<p>CSS typing animation<br>最近在看<a href=\"https://github.com/cssmagic\" target=\"_blank\" rel=\"external\">CSS大牛张鹏译著 CSS SECRETS</a>，学到了不少，有种醍醐灌顶的感觉。<br>以下是从书中摘出的打字动画部分(CSS typing animation)。详情请看<a href=\"http://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/\" target=\"_blank\" rel=\"external\">本书作者LEA VEROU的博客</a><br><a id=\"more\"></a><br>效果</p>\n<p></p><h1 id=\"h1\">CSS typing animation </h1><p></p>\n<style type=\"text/css\">\n            @keyframes typing {\n                from {\n                    width: 0\n                }\n            }\n            @keyframes caret {\n                50% {\n                    border-color: transparent;\n                }\n            }\n            #h1{\n                width: 21ch;\n                overflow: hidden;\n                white-space: nowrap;\n                border-right: .05em solid;\n                animation:typing 6s steps(21) infinite,\n                            caret 1s steps(1) infinite;\n            }\n</style>\n\n<p>代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"h1\"</span>&gt;</span>CSS typing animation <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> typing &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> caret &#123;</div><div class=\"line\">    50% &#123;</div><div class=\"line\">        <span class=\"attribute\">border-color</span>: transparent;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-id\">#h1</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">21ch</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: .<span class=\"number\">05em</span> solid;</div><div class=\"line\">    <span class=\"attribute\">animation</span>:typing <span class=\"number\">6s</span> <span class=\"built_in\">steps</span>(21) infinite,</div><div class=\"line\">                caret <span class=\"number\">1s</span> <span class=\"built_in\">steps</span>(1) infinite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>CSS typing animation<br>最近在看<a href=\"https://github.com/cssmagic\">CSS大牛张鹏译著 CSS SECRETS</a>，学到了不少，有种醍醐灌顶的感觉。<br>以下是从书中摘出的打字动画部分(CSS typing animation)。详情请看<a href=\"http://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/\">本书作者LEA VEROU的博客</a><br>","more":"<br>效果</p>\n<p><h1 id=\"h1\">CSS typing animation </h1></p>\n<style type=\"text/css\">\n            @keyframes typing {\n                from {\n                    width: 0\n                }\n            }\n            @keyframes caret {\n                50% {\n                    border-color: transparent;\n                }\n            }\n            #h1{\n                width: 21ch;\n                overflow: hidden;\n                white-space: nowrap;\n                border-right: .05em solid;\n                animation:typing 6s steps(21) infinite,\n                            caret 1s steps(1) infinite;\n            }\n</style>\n\n<p>代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"h1\"</span>&gt;</span>CSS typing animation <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> typing &#123;</div><div class=\"line\">    <span class=\"selector-tag\">from</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">keyframes</span> caret &#123;</div><div class=\"line\">    50% &#123;</div><div class=\"line\">        <span class=\"attribute\">border-color</span>: transparent;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-id\">#h1</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">21ch</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: .<span class=\"number\">05em</span> solid;</div><div class=\"line\">    <span class=\"attribute\">animation</span>:typing <span class=\"number\">6s</span> <span class=\"built_in\">steps</span>(21) infinite,</div><div class=\"line\">                caret <span class=\"number\">1s</span> <span class=\"built_in\">steps</span>(1) infinite;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"Github/Gitlab多账户SSH Key切换","date":"2016-07-01T09:38:13.000Z","comments":1,"keywords":"ssh, GitLab, GitHub","<!--description":"使用ssh config实现GitLab 和 GitHub账户切换-->","_content":"由于目前公司使用GitLab托管代码,本人又在GitHub上有自己的代码仓库。同时用来生成public key的邮箱也不一样,公司GitLab用的是 daixu@zuche.com ,自己GitHub用的是 cynicism2011@gmail.com 。\n这样用起来就非常操蛋了,每次切换的时候都得切换public key。google了一下发现用ssh config轻松解决。\n<!-- more -->\n### 配置Git邮箱\n\n```bash\n    #默认全局 GitHub使用\n    git config --global user.name 'hughdai' && git config --global user.email 'cynicism2011@gmail.com'\n    #公司项目 GitLab使用\n    git config --local user.name 'daixu' && git config --local user.email 'daixu@zuche.com'\n```\n\n### 生成SSH Key\n\nssh有不会的话自行google\n\n```bash\n    # 默认文件名 GitHub使用\n    ssh-keygen -t rsa -C 'cynicism2011@gmail.com'\n    # 指定文件名 GitLab使用\n    ssh-keygen -t rsa -f ~/.ssh/id_rsa.zuche -C 'daixu@zuche.com'\n```\n分别把.pub文件添加到SSH Keys中\n\n### 配置ssh config\n执行 touch ~/.ssh/config,创建config文件,添加相应配置\n\n```bash\n    Host *.zuche.com\n         HostName zuche.com\n         IdentityFile ~/.ssh/id_rsa.zuche\n```\n\n### 验证\n```bash\n    ssh -T git@github.com\n```","source":"_posts/2016-07-01-Github-Gitlab多账户SSH-Key切换.md","raw":"---\nlayout: post\ntitle: Github/Gitlab多账户SSH Key切换\ndate: 2016-07-01 17:38:13\ncomments: true\ncategories: tool\ntags: [Git]\nkeywords: ssh, GitLab, GitHub\n<!--description: 使用ssh config实现GitLab 和 GitHub账户切换-->\n---\n由于目前公司使用GitLab托管代码,本人又在GitHub上有自己的代码仓库。同时用来生成public key的邮箱也不一样,公司GitLab用的是 daixu@zuche.com ,自己GitHub用的是 cynicism2011@gmail.com 。\n这样用起来就非常操蛋了,每次切换的时候都得切换public key。google了一下发现用ssh config轻松解决。\n<!-- more -->\n### 配置Git邮箱\n\n```bash\n    #默认全局 GitHub使用\n    git config --global user.name 'hughdai' && git config --global user.email 'cynicism2011@gmail.com'\n    #公司项目 GitLab使用\n    git config --local user.name 'daixu' && git config --local user.email 'daixu@zuche.com'\n```\n\n### 生成SSH Key\n\nssh有不会的话自行google\n\n```bash\n    # 默认文件名 GitHub使用\n    ssh-keygen -t rsa -C 'cynicism2011@gmail.com'\n    # 指定文件名 GitLab使用\n    ssh-keygen -t rsa -f ~/.ssh/id_rsa.zuche -C 'daixu@zuche.com'\n```\n分别把.pub文件添加到SSH Keys中\n\n### 配置ssh config\n执行 touch ~/.ssh/config,创建config文件,添加相应配置\n\n```bash\n    Host *.zuche.com\n         HostName zuche.com\n         IdentityFile ~/.ssh/id_rsa.zuche\n```\n\n### 验证\n```bash\n    ssh -T git@github.com\n```","slug":"Github-Gitlab多账户SSH-Key切换","published":1,"updated":"2017-04-27T05:06:59.000Z","photos":[],"link":"","_id":"cj62dox33001clusz0eu5jb3s","content":"<p>由于目前公司使用GitLab托管代码,本人又在GitHub上有自己的代码仓库。同时用来生成public key的邮箱也不一样,公司GitLab用的是 daixu@zuche.com ,自己GitHub用的是 cynicism2011@gmail.com 。<br>这样用起来就非常操蛋了,每次切换的时候都得切换public key。google了一下发现用ssh config轻松解决。<br><a id=\"more\"></a></p>\n<h3 id=\"配置Git邮箱\"><a href=\"#配置Git邮箱\" class=\"headerlink\" title=\"配置Git邮箱\"></a>配置Git邮箱</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#默认全局 GitHub使用</span></div><div class=\"line\">git config --global user.name <span class=\"string\">'hughdai'</span> &amp;&amp; git config --global user.email <span class=\"string\">'cynicism2011@gmail.com'</span></div><div class=\"line\"><span class=\"comment\">#公司项目 GitLab使用</span></div><div class=\"line\">git config --local user.name <span class=\"string\">'daixu'</span> &amp;&amp; git config --local user.email <span class=\"string\">'daixu@zuche.com'</span></div></pre></td></tr></table></figure>\n<h3 id=\"生成SSH-Key\"><a href=\"#生成SSH-Key\" class=\"headerlink\" title=\"生成SSH Key\"></a>生成SSH Key</h3><p>ssh有不会的话自行google</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 默认文件名 GitHub使用</span></div><div class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">'cynicism2011@gmail.com'</span></div><div class=\"line\"><span class=\"comment\"># 指定文件名 GitLab使用</span></div><div class=\"line\">ssh-keygen -t rsa <span class=\"_\">-f</span> ~/.ssh/id_rsa.zuche -C <span class=\"string\">'daixu@zuche.com'</span></div></pre></td></tr></table></figure>\n<p>分别把.pub文件添加到SSH Keys中</p>\n<h3 id=\"配置ssh-config\"><a href=\"#配置ssh-config\" class=\"headerlink\" title=\"配置ssh config\"></a>配置ssh config</h3><p>执行 touch ~/.ssh/config,创建config文件,添加相应配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host *.zuche.com</div><div class=\"line\">     HostName zuche.com</div><div class=\"line\">     IdentityFile ~/.ssh/id_rsa.zuche</div></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>","excerpt":"<p>由于目前公司使用GitLab托管代码,本人又在GitHub上有自己的代码仓库。同时用来生成public key的邮箱也不一样,公司GitLab用的是 daixu@zuche.com ,自己GitHub用的是 cynicism2011@gmail.com 。<br>这样用起来就非常操蛋了,每次切换的时候都得切换public key。google了一下发现用ssh config轻松解决。<br>","more":"</p>\n<h3 id=\"配置Git邮箱\"><a href=\"#配置Git邮箱\" class=\"headerlink\" title=\"配置Git邮箱\"></a>配置Git邮箱</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#默认全局 GitHub使用</span></div><div class=\"line\">git config --global user.name <span class=\"string\">'hughdai'</span> &amp;&amp; git config --global user.email <span class=\"string\">'cynicism2011@gmail.com'</span></div><div class=\"line\"><span class=\"comment\">#公司项目 GitLab使用</span></div><div class=\"line\">git config --local user.name <span class=\"string\">'daixu'</span> &amp;&amp; git config --local user.email <span class=\"string\">'daixu@zuche.com'</span></div></pre></td></tr></table></figure>\n<h3 id=\"生成SSH-Key\"><a href=\"#生成SSH-Key\" class=\"headerlink\" title=\"生成SSH Key\"></a>生成SSH Key</h3><p>ssh有不会的话自行google</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 默认文件名 GitHub使用</span></div><div class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">'cynicism2011@gmail.com'</span></div><div class=\"line\"><span class=\"comment\"># 指定文件名 GitLab使用</span></div><div class=\"line\">ssh-keygen -t rsa <span class=\"_\">-f</span> ~/.ssh/id_rsa.zuche -C <span class=\"string\">'daixu@zuche.com'</span></div></pre></td></tr></table></figure>\n<p>分别把.pub文件添加到SSH Keys中</p>\n<h3 id=\"配置ssh-config\"><a href=\"#配置ssh-config\" class=\"headerlink\" title=\"配置ssh config\"></a>配置ssh config</h3><p>执行 touch ~/.ssh/config,创建config文件,添加相应配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host *.zuche.com</div><div class=\"line\">     HostName zuche.com</div><div class=\"line\">     IdentityFile ~/.ssh/id_rsa.zuche</div></pre></td></tr></table></figure>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>"},{"date":"2017-03-24T06:31:27.000Z","layout":"post","title":"js多维数组扁平化","comments":1,"keywords":"js,数组,扁平化","<!--description":"js多维数组扁平化-->","_content":"一道题目实现js多维数组扁平化。类似这种效果:\n\n```javascript\n[1,[2, 3],[4, 5, 6], [7, 8, 9,0]] -> [1,2,3,4,5,6,7,8,9,0]\n```\n<!-- more -->\n以下就提供几种数组扁平化的方法:\n\n1、concat方法\n\n```javascript\nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = Array.prototype.concat.apply([],dimensionalArr)\nconsole.log(flatArr)\n```\n\n2、ES6的reset参数...\n\n```javascript\nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = [].concat(...dimensionalArr)\nconsole.log(flatArr)\n```\n3、reduce concat,在网上查了下api,reduce这个ES5的方法我一直不咋用\n\n```javascript\n//判断是否是数组\nfunction isArray(o) {  \n  return Object.prototype.toString.call(o) === '[object Array]';   \n} \nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = dimensionalArr.reduce((prev,curr)=>{\n    //如果不是数组,转成数组\n    pre = isArray(prev) ? prev : Array.of(prev)\n    curr = isArray(curr) ? curr : Array.of(curr)\n    return pre.concat(curr)\n})\nconsole.log(flatArr)\n```\n\n4、后来自己又google了一下,lodash和underscore都有现成的方法flattern,并且在多层嵌套的情况也有对应的方法flatternDeep。\n```javascript\nvar array = [1, [2, [3, [4]], 5]];\n \n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n \n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]\n```\n\n","source":"_posts/2017-03-24-js多维数组扁平化.md","raw":"---\ndate: 2017-03-24 14:31:27\nlayout: post\ntitle: js多维数组扁平化\ncomments: true\ncategories: js\ntags: [js]\nkeywords: js,数组,扁平化\n<!--description: js多维数组扁平化-->\n---\n一道题目实现js多维数组扁平化。类似这种效果:\n\n```javascript\n[1,[2, 3],[4, 5, 6], [7, 8, 9,0]] -> [1,2,3,4,5,6,7,8,9,0]\n```\n<!-- more -->\n以下就提供几种数组扁平化的方法:\n\n1、concat方法\n\n```javascript\nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = Array.prototype.concat.apply([],dimensionalArr)\nconsole.log(flatArr)\n```\n\n2、ES6的reset参数...\n\n```javascript\nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = [].concat(...dimensionalArr)\nconsole.log(flatArr)\n```\n3、reduce concat,在网上查了下api,reduce这个ES5的方法我一直不咋用\n\n```javascript\n//判断是否是数组\nfunction isArray(o) {  \n  return Object.prototype.toString.call(o) === '[object Array]';   \n} \nvar dimensionalArr = [1,[2, 3],[4, 5, 6], [7, 8, 9,0]]\nvar flatArr = dimensionalArr.reduce((prev,curr)=>{\n    //如果不是数组,转成数组\n    pre = isArray(prev) ? prev : Array.of(prev)\n    curr = isArray(curr) ? curr : Array.of(curr)\n    return pre.concat(curr)\n})\nconsole.log(flatArr)\n```\n\n4、后来自己又google了一下,lodash和underscore都有现成的方法flattern,并且在多层嵌套的情况也有对应的方法flatternDeep。\n```javascript\nvar array = [1, [2, [3, [4]], 5]];\n \n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n \n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]\n```\n\n","slug":"js多维数组扁平化","published":1,"updated":"2017-07-13T04:35:39.000Z","photos":[],"link":"","_id":"cj62dox36001gluszojfa6604","content":"<p>一道题目实现js多维数组扁平化。类似这种效果:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]] -&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>以下就提供几种数组扁平化的方法:</p>\n<p>1、concat方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = <span class=\"built_in\">Array</span>.prototype.concat.apply([],dimensionalArr)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>2、ES6的reset参数…</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = [].concat(...dimensionalArr)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>3、reduce concat,在网上查了下api,reduce这个ES5的方法我一直不咋用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//判断是否是数组</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">o</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o) === <span class=\"string\">'[object Array]'</span>;   </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = dimensionalArr.reduce((prev,curr)=&gt;&#123;</div><div class=\"line\">    <span class=\"comment\">//如果不是数组,转成数组</span></div><div class=\"line\">    pre = isArray(prev) ? prev : <span class=\"built_in\">Array</span>.of(prev)</div><div class=\"line\">    curr = isArray(curr) ? curr : <span class=\"built_in\">Array</span>.of(curr)</div><div class=\"line\">    <span class=\"keyword\">return</span> pre.concat(curr)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>4、后来自己又google了一下,lodash和underscore都有现成的方法flattern,并且在多层嵌套的情况也有对应的方法flatternDeep。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]];</div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, <span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; [1, 2, [3, [4]], 5]</span></div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3, [4], 5]</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>一道题目实现js多维数组扁平化。类似这种效果:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]] -&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>","more":"<p>以下就提供几种数组扁平化的方法:</p>\n<p>1、concat方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = <span class=\"built_in\">Array</span>.prototype.concat.apply([],dimensionalArr)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>2、ES6的reset参数…</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = [].concat(...dimensionalArr)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>3、reduce concat,在网上查了下api,reduce这个ES5的方法我一直不咋用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//判断是否是数组</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">o</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o) === <span class=\"string\">'[object Array]'</span>;   </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">var</span> dimensionalArr = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>, <span class=\"number\">3</span>],[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,<span class=\"number\">0</span>]]</div><div class=\"line\"><span class=\"keyword\">var</span> flatArr = dimensionalArr.reduce((prev,curr)=&gt;&#123;</div><div class=\"line\">    <span class=\"comment\">//如果不是数组,转成数组</span></div><div class=\"line\">    pre = isArray(prev) ? prev : <span class=\"built_in\">Array</span>.of(prev)</div><div class=\"line\">    curr = isArray(curr) ? curr : <span class=\"built_in\">Array</span>.of(curr)</div><div class=\"line\">    <span class=\"keyword\">return</span> pre.concat(curr)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(flatArr)</div></pre></td></tr></table></figure>\n<p>4、后来自己又google了一下,lodash和underscore都有现成的方法flattern,并且在多层嵌套的情况也有对应的方法flatternDeep。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>]], <span class=\"number\">5</span>]];</div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, <span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; [1, 2, [3, [4]], 5]</span></div><div class=\"line\"> </div><div class=\"line\">_.flattenDepth(array, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// =&gt; [1, 2, 3, [4], 5]</span></div></pre></td></tr></table></figure></p>"},{"title":"BEM CSS命名规范","date":"2017-04-01T10:11:03.000Z","layout":"post","comments":1,"keywords":"CSS,BEM","<!--description":"CSS命名规范-->","_content":"## 引言\n>BEM, meaning Block, Element, Modifier, is a front-end methodology coined by developers working at Yandex. Whilst BEM is a complete methodology, here we are only concerned with its naming convention. Further, the naming convention here only is BEM-like; the principles are exactly the same, but the actual syntax differs slightly.\n \n>BEM splits components’ classes into three groups:\n \n>Block: The sole root of the component.\n>Element: A component part of the Block.\n>Modifier: A variant or extension of the Block.\n>[CSS Guidelines](http://cssguidelin.es/)\n<!-- more -->\n\nCSS不好维护,因为在项目中存在各种各样的CSS命名格式,ID、标签、层级等等,为了重用、语义化、避免冲突,CSS命名五花八门,造成CSS文件冗烂。自从看了张鑫旭大牛的文章[精简高效的CSS命名准则方法](http://www.zhangxinxu.com/wordpress/2010/09/%E7%B2%BE%E7%AE%80%E9%AB%98%E6%95%88%E7%9A%84CSS%E5%91%BD%E5%90%8D%E5%87%86%E5%88%99%E6%96%B9%E6%B3%95/)才知道CSS渲染元素和使用JavaScript获取页面元素那是完全不一样的,CSS的渲染方式是**从右往左**渲染的。\n拿 `.test span{}` 这种命名方式举例,会先渲染页面上所有的span标签,然后再寻找test类的标签。所以，CSS命名，只要出现了层级，出现了标签，就是一次额外的渲染，层级越多，渲染的开销也就越大，这就是为什么一些前辈的文章会建议要尽量避免过深的层级。这也是为什么要“无层级”，“无标签”。\n\n## BEM命名\n\nBEM是由老毛子的Yandex提出的一种CSS命名规范,是 Block-Element-Modifier 的缩写,\nblock：模块或者组件，名字单词间用 - 连接\nelement：元素，模块的子元素，以 __ 与 block 连接\nmodifier：修饰，模块的变体，表示不同的状态，以 -- 与 block 连接\n类似这种写法:\n```CSS\n    .block{}\n    .block__element{}\n    .block--modifier{}\n```\n在一个block下无论element的层级如何,都要扁平化,只能出现B\\__E--M最多三级,如果出现B\\__E-parent\\__E-child--M这种拖沓冗长的命名,就背离了BEM的初衷了。\nBEM规范让CSS和html开起来结构清晰、有效提高CSS代码的重用率、易维护,并且能加快页面渲染,应该说是目前最受欢迎的一种命名规范,但是也受到好多大牛的诟病[如何看待 CSS 中 BEM 的命名方式？](https://www.zhihu.com/question/21935157)。\n最近我在使用VUE组件库Element UI做开发,看了的源码,发现其中的CSS规范也是遵循BEM的。\n例如:\nalert组件\n```CSS\n    .el-alert__title {\n      font-size: 13px;\n      line-height: 18px\n    }\n    .el-alert__description {\n      color: #fff;\n      font-size: 12px;\n      margin: 5px 0 0\n    }\n    .el-alert--success {\n      background-color: #13ce66\n    }\n    \n    .el-alert--info {\n      background-color: #50bfff\n    }\n    /*没有采用.el-alert__icon--big、.el-alert__icon--bold这种写法,估计是考虑到类名太长吧 */\n    .el-alert__icon .is-big {\n      font-size: 28px;\n      width: 28px\n    }\n    .el-alert__title .is-bold {\n      font-weight: 700\n    }\n```\n                                                       \n","source":"_posts/2017-04-01-BEM-CSS命名规范.md","raw":"---\ntitle: BEM CSS命名规范\ndate: 2017-04-01 18:11:03\nlayout: post\ncomments: true\ncategories: CSS\ntags: [CSS,BEM]\nkeywords: CSS,BEM\n<!--description: CSS命名规范-->\n---\n## 引言\n>BEM, meaning Block, Element, Modifier, is a front-end methodology coined by developers working at Yandex. Whilst BEM is a complete methodology, here we are only concerned with its naming convention. Further, the naming convention here only is BEM-like; the principles are exactly the same, but the actual syntax differs slightly.\n \n>BEM splits components’ classes into three groups:\n \n>Block: The sole root of the component.\n>Element: A component part of the Block.\n>Modifier: A variant or extension of the Block.\n>[CSS Guidelines](http://cssguidelin.es/)\n<!-- more -->\n\nCSS不好维护,因为在项目中存在各种各样的CSS命名格式,ID、标签、层级等等,为了重用、语义化、避免冲突,CSS命名五花八门,造成CSS文件冗烂。自从看了张鑫旭大牛的文章[精简高效的CSS命名准则方法](http://www.zhangxinxu.com/wordpress/2010/09/%E7%B2%BE%E7%AE%80%E9%AB%98%E6%95%88%E7%9A%84CSS%E5%91%BD%E5%90%8D%E5%87%86%E5%88%99%E6%96%B9%E6%B3%95/)才知道CSS渲染元素和使用JavaScript获取页面元素那是完全不一样的,CSS的渲染方式是**从右往左**渲染的。\n拿 `.test span{}` 这种命名方式举例,会先渲染页面上所有的span标签,然后再寻找test类的标签。所以，CSS命名，只要出现了层级，出现了标签，就是一次额外的渲染，层级越多，渲染的开销也就越大，这就是为什么一些前辈的文章会建议要尽量避免过深的层级。这也是为什么要“无层级”，“无标签”。\n\n## BEM命名\n\nBEM是由老毛子的Yandex提出的一种CSS命名规范,是 Block-Element-Modifier 的缩写,\nblock：模块或者组件，名字单词间用 - 连接\nelement：元素，模块的子元素，以 __ 与 block 连接\nmodifier：修饰，模块的变体，表示不同的状态，以 -- 与 block 连接\n类似这种写法:\n```CSS\n    .block{}\n    .block__element{}\n    .block--modifier{}\n```\n在一个block下无论element的层级如何,都要扁平化,只能出现B\\__E--M最多三级,如果出现B\\__E-parent\\__E-child--M这种拖沓冗长的命名,就背离了BEM的初衷了。\nBEM规范让CSS和html开起来结构清晰、有效提高CSS代码的重用率、易维护,并且能加快页面渲染,应该说是目前最受欢迎的一种命名规范,但是也受到好多大牛的诟病[如何看待 CSS 中 BEM 的命名方式？](https://www.zhihu.com/question/21935157)。\n最近我在使用VUE组件库Element UI做开发,看了的源码,发现其中的CSS规范也是遵循BEM的。\n例如:\nalert组件\n```CSS\n    .el-alert__title {\n      font-size: 13px;\n      line-height: 18px\n    }\n    .el-alert__description {\n      color: #fff;\n      font-size: 12px;\n      margin: 5px 0 0\n    }\n    .el-alert--success {\n      background-color: #13ce66\n    }\n    \n    .el-alert--info {\n      background-color: #50bfff\n    }\n    /*没有采用.el-alert__icon--big、.el-alert__icon--bold这种写法,估计是考虑到类名太长吧 */\n    .el-alert__icon .is-big {\n      font-size: 28px;\n      width: 28px\n    }\n    .el-alert__title .is-bold {\n      font-weight: 700\n    }\n```\n                                                       \n","slug":"BEM-CSS命名规范","published":1,"updated":"2017-04-27T05:06:34.000Z","photos":[],"link":"","_id":"cj62dox39001kluszguafii6z","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p>BEM, meaning Block, Element, Modifier, is a front-end methodology coined by developers working at Yandex. Whilst BEM is a complete methodology, here we are only concerned with its naming convention. Further, the naming convention here only is BEM-like; the principles are exactly the same, but the actual syntax differs slightly.</p>\n<p>BEM splits components’ classes into three groups:</p>\n<p>Block: The sole root of the component.<br>Element: A component part of the Block.<br>Modifier: A variant or extension of the Block.<br><a href=\"http://cssguidelin.es/\" target=\"_blank\" rel=\"external\">CSS Guidelines</a><br><a id=\"more\"></a></p>\n</blockquote>\n<p>CSS不好维护,因为在项目中存在各种各样的CSS命名格式,ID、标签、层级等等,为了重用、语义化、避免冲突,CSS命名五花八门,造成CSS文件冗烂。自从看了张鑫旭大牛的文章<a href=\"http://www.zhangxinxu.com/wordpress/2010/09/%E7%B2%BE%E7%AE%80%E9%AB%98%E6%95%88%E7%9A%84CSS%E5%91%BD%E5%90%8D%E5%87%86%E5%88%99%E6%96%B9%E6%B3%95/\" target=\"_blank\" rel=\"external\">精简高效的CSS命名准则方法</a>才知道CSS渲染元素和使用JavaScript获取页面元素那是完全不一样的,CSS的渲染方式是<strong>从右往左</strong>渲染的。<br>拿 <code>.test span{}</code> 这种命名方式举例,会先渲染页面上所有的span标签,然后再寻找test类的标签。所以，CSS命名，只要出现了层级，出现了标签，就是一次额外的渲染，层级越多，渲染的开销也就越大，这就是为什么一些前辈的文章会建议要尽量避免过深的层级。这也是为什么要“无层级”，“无标签”。</p>\n<h2 id=\"BEM命名\"><a href=\"#BEM命名\" class=\"headerlink\" title=\"BEM命名\"></a>BEM命名</h2><p>BEM是由老毛子的Yandex提出的一种CSS命名规范,是 Block-Element-Modifier 的缩写,<br>block：模块或者组件，名字单词间用 - 连接<br>element：元素，模块的子元素，以 __ 与 block 连接<br>modifier：修饰，模块的变体，表示不同的状态，以 – 与 block 连接<br>类似这种写法:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.block</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block__element</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block--modifier</span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>在一个block下无论element的层级如何,都要扁平化,只能出现B__E–M最多三级,如果出现B__E-parent__E-child–M这种拖沓冗长的命名,就背离了BEM的初衷了。<br>BEM规范让CSS和html开起来结构清晰、有效提高CSS代码的重用率、易维护,并且能加快页面渲染,应该说是目前最受欢迎的一种命名规范,但是也受到好多大牛的诟病<a href=\"https://www.zhihu.com/question/21935157\" target=\"_blank\" rel=\"external\">如何看待 CSS 中 BEM 的命名方式？</a>。<br>最近我在使用VUE组件库Element UI做开发,看了的源码,发现其中的CSS规范也是遵循BEM的。<br>例如:<br>alert组件<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.el-alert__title</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">18px</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.el-alert__description</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"number\">0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.el-alert--success</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#13ce66</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.el-alert--info</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#50bfff</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*没有采用.el-alert__icon--big、.el-alert__icon--bold这种写法,估计是考虑到类名太长吧 */</span></div><div class=\"line\"><span class=\"selector-class\">.el-alert__icon</span> <span class=\"selector-class\">.is-big</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">28px</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">28px</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.el-alert__title</span> <span class=\"selector-class\">.is-bold</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">700</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p>BEM, meaning Block, Element, Modifier, is a front-end methodology coined by developers working at Yandex. Whilst BEM is a complete methodology, here we are only concerned with its naming convention. Further, the naming convention here only is BEM-like; the principles are exactly the same, but the actual syntax differs slightly.</p>\n<p>BEM splits components’ classes into three groups:</p>\n<p>Block: The sole root of the component.<br>Element: A component part of the Block.<br>Modifier: A variant or extension of the Block.<br><a href=\"http://cssguidelin.es/\">CSS Guidelines</a><br>","more":"</p>\n</blockquote>\n<p>CSS不好维护,因为在项目中存在各种各样的CSS命名格式,ID、标签、层级等等,为了重用、语义化、避免冲突,CSS命名五花八门,造成CSS文件冗烂。自从看了张鑫旭大牛的文章<a href=\"http://www.zhangxinxu.com/wordpress/2010/09/%E7%B2%BE%E7%AE%80%E9%AB%98%E6%95%88%E7%9A%84CSS%E5%91%BD%E5%90%8D%E5%87%86%E5%88%99%E6%96%B9%E6%B3%95/\">精简高效的CSS命名准则方法</a>才知道CSS渲染元素和使用JavaScript获取页面元素那是完全不一样的,CSS的渲染方式是<strong>从右往左</strong>渲染的。<br>拿 <code>.test span{}</code> 这种命名方式举例,会先渲染页面上所有的span标签,然后再寻找test类的标签。所以，CSS命名，只要出现了层级，出现了标签，就是一次额外的渲染，层级越多，渲染的开销也就越大，这就是为什么一些前辈的文章会建议要尽量避免过深的层级。这也是为什么要“无层级”，“无标签”。</p>\n<h2 id=\"BEM命名\"><a href=\"#BEM命名\" class=\"headerlink\" title=\"BEM命名\"></a>BEM命名</h2><p>BEM是由老毛子的Yandex提出的一种CSS命名规范,是 Block-Element-Modifier 的缩写,<br>block：模块或者组件，名字单词间用 - 连接<br>element：元素，模块的子元素，以 __ 与 block 连接<br>modifier：修饰，模块的变体，表示不同的状态，以 – 与 block 连接<br>类似这种写法:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.block</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block__element</span>&#123;&#125;</div><div class=\"line\"><span class=\"selector-class\">.block--modifier</span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>在一个block下无论element的层级如何,都要扁平化,只能出现B__E–M最多三级,如果出现B__E-parent__E-child–M这种拖沓冗长的命名,就背离了BEM的初衷了。<br>BEM规范让CSS和html开起来结构清晰、有效提高CSS代码的重用率、易维护,并且能加快页面渲染,应该说是目前最受欢迎的一种命名规范,但是也受到好多大牛的诟病<a href=\"https://www.zhihu.com/question/21935157\">如何看待 CSS 中 BEM 的命名方式？</a>。<br>最近我在使用VUE组件库Element UI做开发,看了的源码,发现其中的CSS规范也是遵循BEM的。<br>例如:<br>alert组件<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.el-alert__title</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">18px</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.el-alert__description</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"number\">0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.el-alert--success</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#13ce66</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.el-alert--info</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#50bfff</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*没有采用.el-alert__icon--big、.el-alert__icon--bold这种写法,估计是考虑到类名太长吧 */</span></div><div class=\"line\"><span class=\"selector-class\">.el-alert__icon</span> <span class=\"selector-class\">.is-big</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">28px</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">28px</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.el-alert__title</span> <span class=\"selector-class\">.is-bold</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">700</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"date":"2017-03-24T17:20:13.000Z","layout":"post","title":"箭头函数与普通函数的区别","comments":1,"keywords":"js,函数,箭头函数","<!--description":"箭头函数-->","_content":"同样是面试被问到的问题,ES6既然允许使用lamda(=>)函数,使用起来简单方便,那么普通函数还有没有存在的意义?箭头函数和普通函数的区别在哪?\n这种问题实在是坑,普通函数当然有存在的意义,而且lamda函数在js中有很多限制,达不到普通函数的功效。但是被问到有什么区别,还是一时语塞,不知道从何说起。\n一般的了解在做回调的时候用箭头函数更加顺手一些,翻看了一下MDN[箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)又有了更深的了解。\n<!-- more -->\n1、首先箭头函数作为匿名函数,是不能作为构造函数的,不能使用new\n2、this,普通函数构造函数的 this 指向了一个新的对象；如果函数是作为对象的方法被调用的，则其 this 指向了那个调用它的对象;但是箭头函数的则会捕获其所在上下文的  this 值，作为自己的 this 值。在使用call或apply绑定时,相当于只是传入了参数,对this没有影响\n3、箭头函数不绑定arguments,取而代之用rest参数...解决\n4、箭头函数当方法使用的时候没有定义this绑定\n    ```javascript\n    var obj = {\n      i: 10,\n      b: () => console.log(this.i, this),\n      c: function() {\n        console.log( this.i, this)\n      }\n    }\n    obj.b(); // prints undefined, Window\n    obj.c(); // prints 10, Object {...}\n    \n    ```\n5、箭头函数不能当做Generator函数,不能使用yield关键字\n6、不能简单返回对象字面量\n    ```javascript\n    var func = () => {  foo: 1  };\n    // Calling func() returns undefined!\n    \n    var func = () => {  foo: function() {}  };\n    // SyntaxError: function statement requires a name\n    //如果要返回对象字面量,用括号包裹字面量\n    var func = () => ({ foo: 1 });\n    ```\n7、箭头函数不能换行\n    ```javascript\n    var func = ()\n               => 1; // SyntaxError: expected expression, got '=>'\n               \n    ```\n所以有空多刷刷MDN看看文档还是有好处的","source":"_posts/2017-03-25-箭头函数与普通函数的区别.md","raw":"---\ndate: 2017-03-25 01:20:13\nlayout: post\ntitle: 箭头函数与普通函数的区别\ncomments: true\ncategories: js\ntags: [js]\nkeywords: js,函数,箭头函数\n<!--description: 箭头函数-->\n---\n同样是面试被问到的问题,ES6既然允许使用lamda(=>)函数,使用起来简单方便,那么普通函数还有没有存在的意义?箭头函数和普通函数的区别在哪?\n这种问题实在是坑,普通函数当然有存在的意义,而且lamda函数在js中有很多限制,达不到普通函数的功效。但是被问到有什么区别,还是一时语塞,不知道从何说起。\n一般的了解在做回调的时候用箭头函数更加顺手一些,翻看了一下MDN[箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)又有了更深的了解。\n<!-- more -->\n1、首先箭头函数作为匿名函数,是不能作为构造函数的,不能使用new\n2、this,普通函数构造函数的 this 指向了一个新的对象；如果函数是作为对象的方法被调用的，则其 this 指向了那个调用它的对象;但是箭头函数的则会捕获其所在上下文的  this 值，作为自己的 this 值。在使用call或apply绑定时,相当于只是传入了参数,对this没有影响\n3、箭头函数不绑定arguments,取而代之用rest参数...解决\n4、箭头函数当方法使用的时候没有定义this绑定\n    ```javascript\n    var obj = {\n      i: 10,\n      b: () => console.log(this.i, this),\n      c: function() {\n        console.log( this.i, this)\n      }\n    }\n    obj.b(); // prints undefined, Window\n    obj.c(); // prints 10, Object {...}\n    \n    ```\n5、箭头函数不能当做Generator函数,不能使用yield关键字\n6、不能简单返回对象字面量\n    ```javascript\n    var func = () => {  foo: 1  };\n    // Calling func() returns undefined!\n    \n    var func = () => {  foo: function() {}  };\n    // SyntaxError: function statement requires a name\n    //如果要返回对象字面量,用括号包裹字面量\n    var func = () => ({ foo: 1 });\n    ```\n7、箭头函数不能换行\n    ```javascript\n    var func = ()\n               => 1; // SyntaxError: expected expression, got '=>'\n               \n    ```\n所以有空多刷刷MDN看看文档还是有好处的","slug":"箭头函数与普通函数的区别","published":1,"updated":"2017-04-27T05:06:43.000Z","photos":[],"link":"","_id":"cj62dox3b001lluszoo7d6ebv","content":"<p>同样是面试被问到的问题,ES6既然允许使用lamda(=&gt;)函数,使用起来简单方便,那么普通函数还有没有存在的意义?箭头函数和普通函数的区别在哪?<br>这种问题实在是坑,普通函数当然有存在的意义,而且lamda函数在js中有很多限制,达不到普通函数的功效。但是被问到有什么区别,还是一时语塞,不知道从何说起。<br>一般的了解在做回调的时候用箭头函数更加顺手一些,翻看了一下MDN<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">箭头函数</a>又有了更深的了解。<br><a id=\"more\"></a><br>1、首先箭头函数作为匿名函数,是不能作为构造函数的,不能使用new<br>2、this,普通函数构造函数的 this 指向了一个新的对象；如果函数是作为对象的方法被调用的，则其 this 指向了那个调用它的对象;但是箭头函数的则会捕获其所在上下文的  this 值，作为自己的 this 值。在使用call或apply绑定时,相当于只是传入了参数,对this没有影响<br>3、箭头函数不绑定arguments,取而代之用rest参数…解决<br>4、箭头函数当方法使用的时候没有定义this绑定<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  i: <span class=\"number\">10</span>,</div><div class=\"line\">  b: () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.i, <span class=\"keyword\">this</span>),</div><div class=\"line\">  c: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.i, <span class=\"keyword\">this</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">obj.b(); <span class=\"comment\">// prints undefined, Window</span></div><div class=\"line\">obj.c(); <span class=\"comment\">// prints 10, Object &#123;...&#125;</span></div></pre></td></tr></table></figure></p>\n<p>5、箭头函数不能当做Generator函数,不能使用yield关键字<br>6、不能简单返回对象字面量<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; &#123;  foo: <span class=\"number\">1</span>  &#125;;</div><div class=\"line\"><span class=\"comment\">// Calling func() returns undefined!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; &#123;  foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;  &#125;;</div><div class=\"line\"><span class=\"comment\">// SyntaxError: function statement requires a name</span></div><div class=\"line\"><span class=\"comment\">//如果要返回对象字面量,用括号包裹字面量</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; (&#123; foo: <span class=\"number\">1</span> &#125;);</div></pre></td></tr></table></figure></p>\n<p>7、箭头函数不能换行<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> func = ()</div><div class=\"line\">           =&gt; <span class=\"number\">1</span>; <span class=\"comment\">// SyntaxError: expected expression, got '=&gt;'</span></div></pre></td></tr></table></figure></p>\n<p>所以有空多刷刷MDN看看文档还是有好处的</p>\n","excerpt":"<p>同样是面试被问到的问题,ES6既然允许使用lamda(=&gt;)函数,使用起来简单方便,那么普通函数还有没有存在的意义?箭头函数和普通函数的区别在哪?<br>这种问题实在是坑,普通函数当然有存在的意义,而且lamda函数在js中有很多限制,达不到普通函数的功效。但是被问到有什么区别,还是一时语塞,不知道从何说起。<br>一般的了解在做回调的时候用箭头函数更加顺手一些,翻看了一下MDN<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭头函数</a>又有了更深的了解。<br>","more":"<br>1、首先箭头函数作为匿名函数,是不能作为构造函数的,不能使用new<br>2、this,普通函数构造函数的 this 指向了一个新的对象；如果函数是作为对象的方法被调用的，则其 this 指向了那个调用它的对象;但是箭头函数的则会捕获其所在上下文的  this 值，作为自己的 this 值。在使用call或apply绑定时,相当于只是传入了参数,对this没有影响<br>3、箭头函数不绑定arguments,取而代之用rest参数…解决<br>4、箭头函数当方法使用的时候没有定义this绑定<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  i: <span class=\"number\">10</span>,</div><div class=\"line\">  b: () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.i, <span class=\"keyword\">this</span>),</div><div class=\"line\">  c: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.i, <span class=\"keyword\">this</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">obj.b(); <span class=\"comment\">// prints undefined, Window</span></div><div class=\"line\">obj.c(); <span class=\"comment\">// prints 10, Object &#123;...&#125;</span></div></pre></td></tr></table></figure></p>\n<p>5、箭头函数不能当做Generator函数,不能使用yield关键字<br>6、不能简单返回对象字面量<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; &#123;  foo: <span class=\"number\">1</span>  &#125;;</div><div class=\"line\"><span class=\"comment\">// Calling func() returns undefined!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; &#123;  foo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;  &#125;;</div><div class=\"line\"><span class=\"comment\">// SyntaxError: function statement requires a name</span></div><div class=\"line\"><span class=\"comment\">//如果要返回对象字面量,用括号包裹字面量</span></div><div class=\"line\"><span class=\"keyword\">var</span> func = () =&gt; (&#123; foo: <span class=\"number\">1</span> &#125;);</div></pre></td></tr></table></figure></p>\n<p>7、箭头函数不能换行<br>    <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> func = ()</div><div class=\"line\">           =&gt; <span class=\"number\">1</span>; <span class=\"comment\">// SyntaxError: expected expression, got '=&gt;'</span></div></pre></td></tr></table></figure></p>\n<p>所以有空多刷刷MDN看看文档还是有好处的</p>"},{"title":"为Date添加add方法","date":"2017-04-01T03:52:50.000Z","layout":"post","comments":1,"keywords":"js,Date,日期","<!--description":"实现new Date().add('+1Y+1M+1D')-->","_content":"\n**昨天到美团酒旅面试前端,二面惨不忍睹,各种手写polyfill,感觉被笔试,却有心有不甘,有劲使不出来的感觉。如果没有把涉及到js的各种方法、框架原理、包括正则表达式烂熟于心的话,真的很惨。以下我就把自己没有写出来或者写的烂的问题解答出来**\n\n面试官要求为Date添加一个add方法,实现new Date().add('+1Y-1M+1D'),这种类似的方法博主不常写,项目中一般都是写在util里。这种题目有很多种写法,但是最方便快捷的莫过于用正则,博主正则差的一逼,往往都是现用现查,现场答的一塌糊涂,后来回到自己电脑前试着写了写,一个像\n<!-- more -->\n```javascript\n/((?:\\+|-)\\d+)(Y)/\n```\n这样正则表达式,整整搞了20分钟才弄对,可想而知让我用白板笔手写该有多惨\n\n上代码\n\n```javascript\n            /**\n             * author: hughdai\n             * Date add方法\n             * 实现类似new Date.add('+1Y-1M+1D'),参数可以是年月日,也可以是年月日的组合或者是单独的年月日\n             * @type {Function}\n             */\n            Date.prototype.add = Date.prototype.add || function (fmt) {\n                        var o = {\n                            'Y': this.getUTCFullYear(),\n                            'M': this.getUTCMonth(),\n                            'D': this.getUTCDate()\n                        };\n                        var number,char;\n                        for(var k in o){\n                            if(new RegExp(\"((?:\\\\+|-)\\\\d+)\" + \"(\" + k + \")\").test(fmt)){\n                                number = Number(RegExp.$1);\n                                char = RegExp.$2;\n                                switch(char){\n                                    case 'Y':\n                                        this.setUTCFullYear(o[k] + number);\n                                        break;\n                                    case 'M':\n                                        this.setUTCMonth(o[k] + number);\n                                        break;\n                                    case 'D':\n                                        this.setUTCDate(o[k] + number);\n                                        break;\n                                }\n                            }\n                        }\n                        return this;\n                    }\n            console.log(new Date().add('+1Y'))\n            console.log(new Date().add('+1M'))\n            console.log(new Date().add('+1D'))\n            console.log(new Date().add('+1Y-1M-1D'))\n```","source":"_posts/2017-04-01-为Date添加add方法.md","raw":"---\ntitle: 为Date添加add方法\ndate: 2017-04-01 11:52:50\nlayout: post\ncomments: true\ncategories: js\ntags: [js,date,add]\nkeywords: js,Date,日期\n<!--description: 实现new Date().add('+1Y+1M+1D')-->\n---\n\n**昨天到美团酒旅面试前端,二面惨不忍睹,各种手写polyfill,感觉被笔试,却有心有不甘,有劲使不出来的感觉。如果没有把涉及到js的各种方法、框架原理、包括正则表达式烂熟于心的话,真的很惨。以下我就把自己没有写出来或者写的烂的问题解答出来**\n\n面试官要求为Date添加一个add方法,实现new Date().add('+1Y-1M+1D'),这种类似的方法博主不常写,项目中一般都是写在util里。这种题目有很多种写法,但是最方便快捷的莫过于用正则,博主正则差的一逼,往往都是现用现查,现场答的一塌糊涂,后来回到自己电脑前试着写了写,一个像\n<!-- more -->\n```javascript\n/((?:\\+|-)\\d+)(Y)/\n```\n这样正则表达式,整整搞了20分钟才弄对,可想而知让我用白板笔手写该有多惨\n\n上代码\n\n```javascript\n            /**\n             * author: hughdai\n             * Date add方法\n             * 实现类似new Date.add('+1Y-1M+1D'),参数可以是年月日,也可以是年月日的组合或者是单独的年月日\n             * @type {Function}\n             */\n            Date.prototype.add = Date.prototype.add || function (fmt) {\n                        var o = {\n                            'Y': this.getUTCFullYear(),\n                            'M': this.getUTCMonth(),\n                            'D': this.getUTCDate()\n                        };\n                        var number,char;\n                        for(var k in o){\n                            if(new RegExp(\"((?:\\\\+|-)\\\\d+)\" + \"(\" + k + \")\").test(fmt)){\n                                number = Number(RegExp.$1);\n                                char = RegExp.$2;\n                                switch(char){\n                                    case 'Y':\n                                        this.setUTCFullYear(o[k] + number);\n                                        break;\n                                    case 'M':\n                                        this.setUTCMonth(o[k] + number);\n                                        break;\n                                    case 'D':\n                                        this.setUTCDate(o[k] + number);\n                                        break;\n                                }\n                            }\n                        }\n                        return this;\n                    }\n            console.log(new Date().add('+1Y'))\n            console.log(new Date().add('+1M'))\n            console.log(new Date().add('+1D'))\n            console.log(new Date().add('+1Y-1M-1D'))\n```","slug":"为Date添加add方法","published":1,"updated":"2017-04-27T05:09:20.000Z","photos":[],"link":"","_id":"cj62dox3d001olusztps6enbb","content":"<p><strong>昨天到美团酒旅面试前端,二面惨不忍睹,各种手写polyfill,感觉被笔试,却有心有不甘,有劲使不出来的感觉。如果没有把涉及到js的各种方法、框架原理、包括正则表达式烂熟于心的话,真的很惨。以下我就把自己没有写出来或者写的烂的问题解答出来</strong></p>\n<p>面试官要求为Date添加一个add方法,实现new Date().add(‘+1Y-1M+1D’),这种类似的方法博主不常写,项目中一般都是写在util里。这种题目有很多种写法,但是最方便快捷的莫过于用正则,博主正则差的一逼,往往都是现用现查,现场答的一塌糊涂,后来回到自己电脑前试着写了写,一个像<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/((?:\\+|-)\\d+)(Y)/</div></pre></td></tr></table></figure></p>\n<p>这样正则表达式,整整搞了20分钟才弄对,可想而知让我用白板笔手写该有多惨</p>\n<p>上代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * author: hughdai</div><div class=\"line\"> * Date add方法</div><div class=\"line\"> * 实现类似new Date.add('+1Y-1M+1D'),参数可以是年月日,也可以是年月日的组合或者是单独的年月日</div><div class=\"line\"> * @type &#123;Function&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.add = <span class=\"built_in\">Date</span>.prototype.add || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fmt</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">                <span class=\"string\">'Y'</span>: <span class=\"keyword\">this</span>.getUTCFullYear(),</div><div class=\"line\">                <span class=\"string\">'M'</span>: <span class=\"keyword\">this</span>.getUTCMonth(),</div><div class=\"line\">                <span class=\"string\">'D'</span>: <span class=\"keyword\">this</span>.getUTCDate()</div><div class=\"line\">            &#125;;</div><div class=\"line\">            <span class=\"keyword\">var</span> number,char;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"((?:\\\\+|-)\\\\d+)\"</span> + <span class=\"string\">\"(\"</span> + k + <span class=\"string\">\")\"</span>).test(fmt))&#123;</div><div class=\"line\">                    number = <span class=\"built_in\">Number</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</div><div class=\"line\">                    char = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>;</div><div class=\"line\">                    <span class=\"keyword\">switch</span>(char)&#123;</div><div class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'Y'</span>:</div><div class=\"line\">                            <span class=\"keyword\">this</span>.setUTCFullYear(o[k] + number);</div><div class=\"line\">                            <span class=\"keyword\">break</span>;</div><div class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'M'</span>:</div><div class=\"line\">                            <span class=\"keyword\">this</span>.setUTCMonth(o[k] + number);</div><div class=\"line\">                            <span class=\"keyword\">break</span>;</div><div class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'D'</span>:</div><div class=\"line\">                            <span class=\"keyword\">this</span>.setUTCDate(o[k] + number);</div><div class=\"line\">                            <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().add(<span class=\"string\">'+1Y'</span>))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().add(<span class=\"string\">'+1M'</span>))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().add(<span class=\"string\">'+1D'</span>))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().add(<span class=\"string\">'+1Y-1M-1D'</span>))</div></pre></td></tr></table></figure>","excerpt":"<p><strong>昨天到美团酒旅面试前端,二面惨不忍睹,各种手写polyfill,感觉被笔试,却有心有不甘,有劲使不出来的感觉。如果没有把涉及到js的各种方法、框架原理、包括正则表达式烂熟于心的话,真的很惨。以下我就把自己没有写出来或者写的烂的问题解答出来</strong></p>\n<p>面试官要求为Date添加一个add方法,实现new Date().add(‘+1Y-1M+1D’),这种类似的方法博主不常写,项目中一般都是写在util里。这种题目有很多种写法,但是最方便快捷的莫过于用正则,博主正则差的一逼,往往都是现用现查,现场答的一塌糊涂,后来回到自己电脑前试着写了写,一个像<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/((?:\\+|-)\\d+)(Y)/</div></pre></td></tr></table></figure></p>\n<p>这样正则表达式,整整搞了20分钟才弄对,可想而知让我用白板笔手写该有多惨</p>\n<p>上代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * author: hughdai</div><div class=\"line\"> * Date add方法</div><div class=\"line\"> * 实现类似new Date.add('+1Y-1M+1D'),参数可以是年月日,也可以是年月日的组合或者是单独的年月日</div><div class=\"line\"> * @type &#123;Function&#125;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.add = <span class=\"built_in\">Date</span>.prototype.add || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fmt</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">                <span class=\"string\">'Y'</span>: <span class=\"keyword\">this</span>.getUTCFullYear(),</div><div class=\"line\">                <span class=\"string\">'M'</span>: <span class=\"keyword\">this</span>.getUTCMonth(),</div><div class=\"line\">                <span class=\"string\">'D'</span>: <span class=\"keyword\">this</span>.getUTCDate()</div><div class=\"line\">            &#125;;</div><div class=\"line\">            <span class=\"keyword\">var</span> number,char;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"((?:\\\\+|-)\\\\d+)\"</span> + <span class=\"string\">\"(\"</span> + k + <span class=\"string\">\")\"</span>).test(fmt))&#123;</div><div class=\"line\">                    number = <span class=\"built_in\">Number</span>(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>);</div><div class=\"line\">                    char = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span>;</div><div class=\"line\">                    <span class=\"keyword\">switch</span>(char)&#123;</div><div class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'Y'</span>:</div><div class=\"line\">                            <span class=\"keyword\">this</span>.setUTCFullYear(o[k] + number);</div><div class=\"line\">                            <span class=\"keyword\">break</span>;</div><div class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'M'</span>:</div><div class=\"line\">                            <span class=\"keyword\">this</span>.setUTCMonth(o[k] + number);</div><div class=\"line\">                            <span class=\"keyword\">break</span>;</div><div class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"string\">'D'</span>:</div><div class=\"line\">                            <span class=\"keyword\">this</span>.setUTCDate(o[k] + number);</div><div class=\"line\">                            <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().add(<span class=\"string\">'+1Y'</span>))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().add(<span class=\"string\">'+1M'</span>))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().add(<span class=\"string\">'+1D'</span>))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().add(<span class=\"string\">'+1Y-1M-1D'</span>))</div></pre></td></tr></table></figure>"},{"title":"简单实现Promise","date":"2017-04-01T09:25:20.000Z","layout":"post","comments":1,"keywords":"js,promise","<!--description":"promise polyfill-->","_content":"\n## 前言\n关于什么是Promise以及用法这里就不多说了,图片看上去一目了然,图片引用自[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)。\n![](https://mdn.mozillademos.org/files/8633/promises.png)\n有一次面试,被要求手写代码实现一个简单的Promise,虽然经常用,但是当时只能就着[Promise/A+规范](https://promisesaplus.com/)扯两句代码,就是没写出来,于是就试着写一下\n<!-- more -->\n## 分析\n\n1、Promise有3种状态\n- pending: 初始状态,pending可以转化为fulfilled或者rejected状态,并且只能有一次转化,并且不可逆\n- fulfilled: 成功状态\n- rejected: 失败状态\n\n2、初始化Promise接收一个函数为参数,该函数有两个函数作为参数,分别是resolve和reject\n- resolve将pending转化为fulfilled,在成功时调用,并将成功结果作为参数传递\n- reject将pending转化为rejected,在失败时调用,并将失败结果当参数传递\n```javascript\n    var promise = new Promise (function (resolve,reject) {\n        if (<!--成功的条件-->){\n            resolve(value)\n        }\n        else {\n            reject(error)\n        }\n    })\n```\n3、方法then和catch\n- then注册状态转化的回调函数,接收onFulfilled或者onRejected,并返回一个新的Promise,保证链式调用\n- catch相当于 return this.then(null, onRejected),Promise对象的错误具有冒泡性质，错误会不断的向后传递，直到 .catch() 捕获\n- 如果then和catch接收的不是函数,就会发生穿透\n\n## 实现\n\n#### 代码抄袭\n>[深入理解 Promise (中)](http://coderlt.coding.me/2016/12/04/promise-in-depth-an-introduction-2/)\n>[剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类](https://github.com/xieranmaya/blog/issues/3)\n>[深入 Promise(一)——Promise 实现详解](https://zhuanlan.zhihu.com/p/25178630)\n\n#### 上代码\n\n```javascript\n    ;(function () {\n    \tvar states = {\n    \t\tPENDING: 'pending',\n    \t\tFULFILLED: 'fulfilled',\n    \t\tREJECTED: 'rejected'\n    \t}\n    \n    \tfunction noop() {\n    \t}\n    \n    \tfunction isFunction(func) {\n    \t\treturn typeof func === 'function'\n    \t}\n    \n    \tfunction CallbackItem(promise, onResolved, onRejected) {\n    \t\tthis.promise = promise;\n    \t\t// 为了保证在promise链中，resolve或reject的结果可以一直向后传递，可以默认给then添加resolvedFn和rejectedFn\n    \t\t// 穿透\n    \t\tthis.onResolved = isFunction(onResolved) ? onResolved : function (v) {\n    \t\t\treturn v\n    \t\t}\n    \t\tthis.onRejected = isFunction(onRejected) ? onRejected : function (r) {\n    \t\t\tthrow r\n    \t\t}\n    \t}\n    \n    \tCallbackItem.prototype.resolve = function (value) {\n    \t\texecuteCallbackAsync.bind(this.promise)(this.onResolved, value);\n    \t}\n    \tCallbackItem.prototype.reject = function (value) {\n    \t\texecuteCallbackAsync.bind(this.promise)(this.onRejected, value);\n    \t}\n    \n    \tfunction getThen(obj) {\n    \t\tconsole.log(obj)\n    \t\tvar then = obj && obj.then;\n    \t\tif (obj && typeof obj === 'object' && isFunction(then)) {\n    \t\t\treturn function appyThen() {\n    \t\t\t\tthen.apply(obj, arguments);\n    \t\t\t};\n    \t\t}\n    \t}\n    \t// 抽象出执行resolve和reject的回调\n    \tfunction executeCallback(type, x) {\n    \t\tvar isResolve = type === 'resolve',\n    \t\t\tthenable;\n    \n    \t\tif (isResolve && (typeof x === 'object' || isFunction(x))) {\n    \t\t\ttry {\n    \t\t\t\tthenable = getThen(x);\n    \t\t\t} catch (e) {\n    \t\t\t\treturn executeCallback.bind(this)('reject', e);\n    \t\t\t}\n    \t\t}\n    \t\tif (isResolve && thenable) {\n    \t\t\texecuteResolver.bind(this)(thenable);\n    \t\t} else {\n    \t\t\tthis.state = isResolve ? states.FULFILLED : states.REJECTED;\n    \t\t\tthis.data = x;\n    \t\t\tthis.callbackQueue.forEach(v => v[type](x));\n    \t\t}\n    \t\treturn this;\n    \t}\n    \n    \t// 用于执行 new Promise(function(resolve, reject){}) 中的resove或reject方法\n    \tfunction executeResolver(resolver) {\n    \t\t//[标准 2.3.3.3.3] 如果resove()方法多次调用，只响应第一次，后面的忽略\n    \t\tvar called = false,\n    \t\t\t_this = this;\n    \n    \t\tfunction onError(y) {\n    \t\t\tif (called) {\n    \t\t\t\treturn;\n    \t\t\t}\n    \t\t\tcalled = true;\n    \t\t\t//[标准 2.3.3.3.2] 如果是错误 使用reject方法\n    \t\t\texecuteCallback.bind(_this)('reject', y);\n    \t\t}\n    \n    \t\tfunction onSuccess(r) {\n    \t\t\tif (called) {\n    \t\t\t\treturn;\n    \t\t\t}\n    \t\t\tcalled = true;\n    \t\t\t//[标准 2.3.3.3.1] 如果是成功 使用resolve方法\n    \t\t\texecuteCallback.bind(_this)('resolve', r);\n    \t\t}\n    \t\t// 使用try...catch执行\n    \t\t//[标准 2.3.3.3.4] 如果调用resolve()或reject()时发生错误，则将状态改成rejected，并将错误reject出去\n    \t\ttry {\n    \t\t\tresolver(onSuccess, onError);\n    \t\t} catch (e) {\n    \t\t\tonError(e);\n    \t\t}\n    \t}\n    \t// 用于异步执行 .then(onResolved, onRejected) 中注册的回调\n    \tfunction executeCallbackAsync(callback, value) {\n    \t\tvar _this = this;\n    \t\tsetTimeout(function () {\n    \t\t\tvar res;\n    \t\t\ttry {\n    \t\t\t\tres = callback(value);\n    \t\t\t} catch (e) {\n    \t\t\t\treturn executeCallback.bind(_this)('reject', e);\n    \t\t\t}\n    \n    \t\t\tif (res !== _this) {\n    \t\t\t\treturn executeCallback.bind(_this)('resolve', res);\n    \t\t\t} else {\n    \t\t\t\treturn executeCallback.bind(_this)('reject', new TypeError('Cannot resolve promise with itself'));\n    \t\t\t}\n    \t\t}, 4)\n    \t}\n    \n    \tfunction Promise(resolver) {\n    \t\t// 初始化Promise\n    \t\tif (resolver && !isFunction(resolver)) {\n    \t\t\tthrow new TypeError('resolver is not a function')\n    \t\t}\n    \t\t// 当前Promise的状态\n    \t\tthis.state = states.PENDING\n    \t\t// 成功时的value或者失败时的reason,默认是undefined\n    \t\tthis.data = void 0\n    \t\t// 保存注册的回调函数的队列\n    \t\tthis.callbackQueue = []\n    \t\t// 抽象出executeResolver方法,包装resolve、reject\n    \t\tif (resolver) {\n    \t\t\texecuteResolver.call(this, resolver)\n    \t\t}\n    \t}\n    \n    \tPromise.prototype.then = function (onResolved, onRejected) {\n    \t\t//[标准 2.2.1 - 2.2.2] 状态已经发生改变并且参数不是函数时，则忽略\n    \t\tif (!isFunction(onResolved) && this.state === states.FULFILLED ||\n    \t\t\t!isFunction(onRejected) && this.state === states.REJECTED) {\n    \t\t\treturn this\n    \t\t}\n    \t\t// 实例化一个新的Promise对象\n    \t\tvar promise = new this.constructor()\n    \t\t// 一般情况下，状态发生改变时，走这里\n    \t\tif(this.state !== states.PENDING){\n    \t\t\tvar callback = this.state === states.FULFILLED ? onResolved : onRejected\n    \t\t\t// 将上一步 resolve(value)或rejecte(value) 的 value 传递给then中注册的 callback\n    \t\t\t// [标准 2.2.4] 异步调用callback\n    \t\t\texecuteCallbackAsync.bind(promise)(callback, this.data)\n    \t\t}else{\n    \t\t\t// var promise = new Promise(resolve=>resolve(1)); promise.then(...); promise.then(...); ...\n    \t\t\t// 一个实例执行多次then, 这种情况会走这里 [标准 2.2.6]\n    \t\t\tthis.callbackQueue.push(new CallbackItem(promise, onResolved, onRejected))\n    \t\t}\n    \t\t// 返回新的实例 [标准 2.2.7]\n    \t\treturn promise\n    \t}\n    \n    \tPromise.prototype.catch = function (onRejected) {\n    \t\treturn this.then(null, onRejected)\n    \t}\n    \n    \tPromise.prototype.done = function(onResolved, onRejected){\n    \t\tthis.then(onResolved, onRejected).catch(function (error) {\n    \t\t\tsetTimeout(function () {\n    \t\t\t\tthrow error\n    \t\t\t}, 0)\n    \t\t})\n    \t}\n    \n    \tmodule.exports = Promise\n    })()\n```\n\n#### 测试\n\n```javascript\n    var http = require('request');\n    var Promise = require('./promise-test')\n    \n    var promise = new Promise(function(resolve, reject) {\n    \thttp.post('http://m.carbank.cn/api/basedata/city',function (error, response, body) {\n    \t\tif(error){\n    \t\t\treject(error)\n    \t\t} else{\n    \t\t\tvar res = JSON.parse(response.body)\n    \t\t\tresolve(res.re)\n    \t\t}\n    \t})\n    })\n    .then(function(cities){\n    \tconsole.log(cities[0])\n    })\n    .catch(function(error){\n    \tconsole.log(error)\n    })\n```\n","source":"_posts/2017-04-01-简单实现Promise.md","raw":"---\ntitle: 简单实现Promise\ndate: 2017-04-01 17:25:20\nlayout: post\ncomments: true\ncategories: js\ntags: [js,promise,polyfill]\nkeywords: js,promise\n<!--description: promise polyfill-->\n---\n\n## 前言\n关于什么是Promise以及用法这里就不多说了,图片看上去一目了然,图片引用自[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)。\n![](https://mdn.mozillademos.org/files/8633/promises.png)\n有一次面试,被要求手写代码实现一个简单的Promise,虽然经常用,但是当时只能就着[Promise/A+规范](https://promisesaplus.com/)扯两句代码,就是没写出来,于是就试着写一下\n<!-- more -->\n## 分析\n\n1、Promise有3种状态\n- pending: 初始状态,pending可以转化为fulfilled或者rejected状态,并且只能有一次转化,并且不可逆\n- fulfilled: 成功状态\n- rejected: 失败状态\n\n2、初始化Promise接收一个函数为参数,该函数有两个函数作为参数,分别是resolve和reject\n- resolve将pending转化为fulfilled,在成功时调用,并将成功结果作为参数传递\n- reject将pending转化为rejected,在失败时调用,并将失败结果当参数传递\n```javascript\n    var promise = new Promise (function (resolve,reject) {\n        if (<!--成功的条件-->){\n            resolve(value)\n        }\n        else {\n            reject(error)\n        }\n    })\n```\n3、方法then和catch\n- then注册状态转化的回调函数,接收onFulfilled或者onRejected,并返回一个新的Promise,保证链式调用\n- catch相当于 return this.then(null, onRejected),Promise对象的错误具有冒泡性质，错误会不断的向后传递，直到 .catch() 捕获\n- 如果then和catch接收的不是函数,就会发生穿透\n\n## 实现\n\n#### 代码抄袭\n>[深入理解 Promise (中)](http://coderlt.coding.me/2016/12/04/promise-in-depth-an-introduction-2/)\n>[剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类](https://github.com/xieranmaya/blog/issues/3)\n>[深入 Promise(一)——Promise 实现详解](https://zhuanlan.zhihu.com/p/25178630)\n\n#### 上代码\n\n```javascript\n    ;(function () {\n    \tvar states = {\n    \t\tPENDING: 'pending',\n    \t\tFULFILLED: 'fulfilled',\n    \t\tREJECTED: 'rejected'\n    \t}\n    \n    \tfunction noop() {\n    \t}\n    \n    \tfunction isFunction(func) {\n    \t\treturn typeof func === 'function'\n    \t}\n    \n    \tfunction CallbackItem(promise, onResolved, onRejected) {\n    \t\tthis.promise = promise;\n    \t\t// 为了保证在promise链中，resolve或reject的结果可以一直向后传递，可以默认给then添加resolvedFn和rejectedFn\n    \t\t// 穿透\n    \t\tthis.onResolved = isFunction(onResolved) ? onResolved : function (v) {\n    \t\t\treturn v\n    \t\t}\n    \t\tthis.onRejected = isFunction(onRejected) ? onRejected : function (r) {\n    \t\t\tthrow r\n    \t\t}\n    \t}\n    \n    \tCallbackItem.prototype.resolve = function (value) {\n    \t\texecuteCallbackAsync.bind(this.promise)(this.onResolved, value);\n    \t}\n    \tCallbackItem.prototype.reject = function (value) {\n    \t\texecuteCallbackAsync.bind(this.promise)(this.onRejected, value);\n    \t}\n    \n    \tfunction getThen(obj) {\n    \t\tconsole.log(obj)\n    \t\tvar then = obj && obj.then;\n    \t\tif (obj && typeof obj === 'object' && isFunction(then)) {\n    \t\t\treturn function appyThen() {\n    \t\t\t\tthen.apply(obj, arguments);\n    \t\t\t};\n    \t\t}\n    \t}\n    \t// 抽象出执行resolve和reject的回调\n    \tfunction executeCallback(type, x) {\n    \t\tvar isResolve = type === 'resolve',\n    \t\t\tthenable;\n    \n    \t\tif (isResolve && (typeof x === 'object' || isFunction(x))) {\n    \t\t\ttry {\n    \t\t\t\tthenable = getThen(x);\n    \t\t\t} catch (e) {\n    \t\t\t\treturn executeCallback.bind(this)('reject', e);\n    \t\t\t}\n    \t\t}\n    \t\tif (isResolve && thenable) {\n    \t\t\texecuteResolver.bind(this)(thenable);\n    \t\t} else {\n    \t\t\tthis.state = isResolve ? states.FULFILLED : states.REJECTED;\n    \t\t\tthis.data = x;\n    \t\t\tthis.callbackQueue.forEach(v => v[type](x));\n    \t\t}\n    \t\treturn this;\n    \t}\n    \n    \t// 用于执行 new Promise(function(resolve, reject){}) 中的resove或reject方法\n    \tfunction executeResolver(resolver) {\n    \t\t//[标准 2.3.3.3.3] 如果resove()方法多次调用，只响应第一次，后面的忽略\n    \t\tvar called = false,\n    \t\t\t_this = this;\n    \n    \t\tfunction onError(y) {\n    \t\t\tif (called) {\n    \t\t\t\treturn;\n    \t\t\t}\n    \t\t\tcalled = true;\n    \t\t\t//[标准 2.3.3.3.2] 如果是错误 使用reject方法\n    \t\t\texecuteCallback.bind(_this)('reject', y);\n    \t\t}\n    \n    \t\tfunction onSuccess(r) {\n    \t\t\tif (called) {\n    \t\t\t\treturn;\n    \t\t\t}\n    \t\t\tcalled = true;\n    \t\t\t//[标准 2.3.3.3.1] 如果是成功 使用resolve方法\n    \t\t\texecuteCallback.bind(_this)('resolve', r);\n    \t\t}\n    \t\t// 使用try...catch执行\n    \t\t//[标准 2.3.3.3.4] 如果调用resolve()或reject()时发生错误，则将状态改成rejected，并将错误reject出去\n    \t\ttry {\n    \t\t\tresolver(onSuccess, onError);\n    \t\t} catch (e) {\n    \t\t\tonError(e);\n    \t\t}\n    \t}\n    \t// 用于异步执行 .then(onResolved, onRejected) 中注册的回调\n    \tfunction executeCallbackAsync(callback, value) {\n    \t\tvar _this = this;\n    \t\tsetTimeout(function () {\n    \t\t\tvar res;\n    \t\t\ttry {\n    \t\t\t\tres = callback(value);\n    \t\t\t} catch (e) {\n    \t\t\t\treturn executeCallback.bind(_this)('reject', e);\n    \t\t\t}\n    \n    \t\t\tif (res !== _this) {\n    \t\t\t\treturn executeCallback.bind(_this)('resolve', res);\n    \t\t\t} else {\n    \t\t\t\treturn executeCallback.bind(_this)('reject', new TypeError('Cannot resolve promise with itself'));\n    \t\t\t}\n    \t\t}, 4)\n    \t}\n    \n    \tfunction Promise(resolver) {\n    \t\t// 初始化Promise\n    \t\tif (resolver && !isFunction(resolver)) {\n    \t\t\tthrow new TypeError('resolver is not a function')\n    \t\t}\n    \t\t// 当前Promise的状态\n    \t\tthis.state = states.PENDING\n    \t\t// 成功时的value或者失败时的reason,默认是undefined\n    \t\tthis.data = void 0\n    \t\t// 保存注册的回调函数的队列\n    \t\tthis.callbackQueue = []\n    \t\t// 抽象出executeResolver方法,包装resolve、reject\n    \t\tif (resolver) {\n    \t\t\texecuteResolver.call(this, resolver)\n    \t\t}\n    \t}\n    \n    \tPromise.prototype.then = function (onResolved, onRejected) {\n    \t\t//[标准 2.2.1 - 2.2.2] 状态已经发生改变并且参数不是函数时，则忽略\n    \t\tif (!isFunction(onResolved) && this.state === states.FULFILLED ||\n    \t\t\t!isFunction(onRejected) && this.state === states.REJECTED) {\n    \t\t\treturn this\n    \t\t}\n    \t\t// 实例化一个新的Promise对象\n    \t\tvar promise = new this.constructor()\n    \t\t// 一般情况下，状态发生改变时，走这里\n    \t\tif(this.state !== states.PENDING){\n    \t\t\tvar callback = this.state === states.FULFILLED ? onResolved : onRejected\n    \t\t\t// 将上一步 resolve(value)或rejecte(value) 的 value 传递给then中注册的 callback\n    \t\t\t// [标准 2.2.4] 异步调用callback\n    \t\t\texecuteCallbackAsync.bind(promise)(callback, this.data)\n    \t\t}else{\n    \t\t\t// var promise = new Promise(resolve=>resolve(1)); promise.then(...); promise.then(...); ...\n    \t\t\t// 一个实例执行多次then, 这种情况会走这里 [标准 2.2.6]\n    \t\t\tthis.callbackQueue.push(new CallbackItem(promise, onResolved, onRejected))\n    \t\t}\n    \t\t// 返回新的实例 [标准 2.2.7]\n    \t\treturn promise\n    \t}\n    \n    \tPromise.prototype.catch = function (onRejected) {\n    \t\treturn this.then(null, onRejected)\n    \t}\n    \n    \tPromise.prototype.done = function(onResolved, onRejected){\n    \t\tthis.then(onResolved, onRejected).catch(function (error) {\n    \t\t\tsetTimeout(function () {\n    \t\t\t\tthrow error\n    \t\t\t}, 0)\n    \t\t})\n    \t}\n    \n    \tmodule.exports = Promise\n    })()\n```\n\n#### 测试\n\n```javascript\n    var http = require('request');\n    var Promise = require('./promise-test')\n    \n    var promise = new Promise(function(resolve, reject) {\n    \thttp.post('http://m.carbank.cn/api/basedata/city',function (error, response, body) {\n    \t\tif(error){\n    \t\t\treject(error)\n    \t\t} else{\n    \t\t\tvar res = JSON.parse(response.body)\n    \t\t\tresolve(res.re)\n    \t\t}\n    \t})\n    })\n    .then(function(cities){\n    \tconsole.log(cities[0])\n    })\n    .catch(function(error){\n    \tconsole.log(error)\n    })\n```\n","slug":"简单实现Promise","published":1,"updated":"2017-05-24T05:07:54.000Z","photos":[],"link":"","_id":"cj62dox3g001rluszzwrathjf","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>关于什么是Promise以及用法这里就不多说了,图片看上去一目了然,图片引用自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">MDN</a>。<br><img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"\"><br>有一次面试,被要求手写代码实现一个简单的Promise,虽然经常用,但是当时只能就着<a href=\"https://promisesaplus.com/\" target=\"_blank\" rel=\"external\">Promise/A+规范</a>扯两句代码,就是没写出来,于是就试着写一下<br><a id=\"more\"></a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>1、Promise有3种状态</p>\n<ul>\n<li>pending: 初始状态,pending可以转化为fulfilled或者rejected状态,并且只能有一次转化,并且不可逆</li>\n<li>fulfilled: 成功状态</li>\n<li>rejected: 失败状态</li>\n</ul>\n<p>2、初始化Promise接收一个函数为参数,该函数有两个函数作为参数,分别是resolve和reject</p>\n<ul>\n<li>resolve将pending转化为fulfilled,在成功时调用,并将成功结果作为参数传递</li>\n<li>reject将pending转化为rejected,在失败时调用,并将失败结果当参数传递<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve,reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"xml\"><span class=\"comment\">&lt;!--成功的条件--&gt;</span>)&#123;</span></div><div class=\"line\">        resolve(value)</div><div class=\"line\">    &#125;</div><div class=\"line\">    else &#123;</div><div class=\"line\">        reject(error)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>3、方法then和catch</p>\n<ul>\n<li>then注册状态转化的回调函数,接收onFulfilled或者onRejected,并返回一个新的Promise,保证链式调用</li>\n<li>catch相当于 return this.then(null, onRejected),Promise对象的错误具有冒泡性质，错误会不断的向后传递，直到 .catch() 捕获</li>\n<li>如果then和catch接收的不是函数,就会发生穿透</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h4 id=\"代码抄袭\"><a href=\"#代码抄袭\" class=\"headerlink\" title=\"代码抄袭\"></a>代码抄袭</h4><blockquote>\n<p><a href=\"http://coderlt.coding.me/2016/12/04/promise-in-depth-an-introduction-2/\" target=\"_blank\" rel=\"external\">深入理解 Promise (中)</a><br><a href=\"https://github.com/xieranmaya/blog/issues/3\" target=\"_blank\" rel=\"external\">剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类</a><br><a href=\"https://zhuanlan.zhihu.com/p/25178630\" target=\"_blank\" rel=\"external\">深入 Promise(一)——Promise 实现详解</a></p>\n</blockquote>\n<h4 id=\"上代码\"><a href=\"#上代码\" class=\"headerlink\" title=\"上代码\"></a>上代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> states = &#123;</div><div class=\"line\">\t\tPENDING: <span class=\"string\">'pending'</span>,</div><div class=\"line\">\t\tFULFILLED: <span class=\"string\">'fulfilled'</span>,</div><div class=\"line\">\t\tREJECTED: <span class=\"string\">'rejected'</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">noop</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">func</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> func === <span class=\"string\">'function'</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CallbackItem</span>(<span class=\"params\">promise, onResolved, onRejected</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.promise = promise;</div><div class=\"line\">\t\t<span class=\"comment\">// 为了保证在promise链中，resolve或reject的结果可以一直向后传递，可以默认给then添加resolvedFn和rejectedFn</span></div><div class=\"line\">\t\t<span class=\"comment\">// 穿透</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.onResolved = isFunction(onResolved) ? onResolved : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> v</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.onRejected = isFunction(onRejected) ? onRejected : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> r</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tCallbackItem.prototype.resolve = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t\texecuteCallbackAsync.bind(<span class=\"keyword\">this</span>.promise)(<span class=\"keyword\">this</span>.onResolved, value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tCallbackItem.prototype.reject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t\texecuteCallbackAsync.bind(<span class=\"keyword\">this</span>.promise)(<span class=\"keyword\">this</span>.onRejected, value);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThen</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(obj)</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> then = obj &amp;&amp; obj.then;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; isFunction(then)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appyThen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\tthen.apply(obj, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 抽象出执行resolve和reject的回调</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeCallback</span>(<span class=\"params\">type, x</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> isResolve = type === <span class=\"string\">'resolve'</span>,</div><div class=\"line\">\t\t\tthenable;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isResolve &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || isFunction(x))) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tthenable = getThen(x);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> executeCallback.bind(<span class=\"keyword\">this</span>)(<span class=\"string\">'reject'</span>, e);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isResolve &amp;&amp; thenable) &#123;</div><div class=\"line\">\t\t\texecuteResolver.bind(<span class=\"keyword\">this</span>)(thenable);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.state = isResolve ? states.FULFILLED : states.REJECTED;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.data = x;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.callbackQueue.forEach(v =&gt; v[type](x));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 用于执行 new Promise(function(resolve, reject)&#123;&#125;) 中的resove或reject方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeResolver</span>(<span class=\"params\">resolver</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//[标准 2.3.3.3.3] 如果resove()方法多次调用，只响应第一次，后面的忽略</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> called = <span class=\"literal\">false</span>,</div><div class=\"line\">\t\t\t_this = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onError</span>(<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (called) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcalled = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">//[标准 2.3.3.3.2] 如果是错误 使用reject方法</span></div><div class=\"line\">\t\t\texecuteCallback.bind(_this)(<span class=\"string\">'reject'</span>, y);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onSuccess</span>(<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (called) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcalled = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">//[标准 2.3.3.3.1] 如果是成功 使用resolve方法</span></div><div class=\"line\">\t\t\texecuteCallback.bind(_this)(<span class=\"string\">'resolve'</span>, r);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 使用try...catch执行</span></div><div class=\"line\">\t\t<span class=\"comment\">//[标准 2.3.3.3.4] 如果调用resolve()或reject()时发生错误，则将状态改成rejected，并将错误reject出去</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tresolver(onSuccess, onError);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">\t\t\tonError(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 用于异步执行 .then(onResolved, onRejected) 中注册的回调</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeCallbackAsync</span>(<span class=\"params\">callback, value</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> res;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tres = callback(value);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> executeCallback.bind(_this)(<span class=\"string\">'reject'</span>, e);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res !== _this) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> executeCallback.bind(_this)(<span class=\"string\">'resolve'</span>, res);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> executeCallback.bind(_this)(<span class=\"string\">'reject'</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot resolve promise with itself'</span>));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"number\">4</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 初始化Promise</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (resolver &amp;&amp; !isFunction(resolver)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'resolver is not a function'</span>)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 当前Promise的状态</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.state = states.PENDING</div><div class=\"line\">\t\t<span class=\"comment\">// 成功时的value或者失败时的reason,默认是undefined</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = <span class=\"keyword\">void</span> <span class=\"number\">0</span></div><div class=\"line\">\t\t<span class=\"comment\">// 保存注册的回调函数的队列</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.callbackQueue = []</div><div class=\"line\">\t\t<span class=\"comment\">// 抽象出executeResolver方法,包装resolve、reject</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (resolver) &#123;</div><div class=\"line\">\t\t\texecuteResolver.call(<span class=\"keyword\">this</span>, resolver)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//[标准 2.2.1 - 2.2.2] 状态已经发生改变并且参数不是函数时，则忽略</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isFunction(onResolved) &amp;&amp; <span class=\"keyword\">this</span>.state === states.FULFILLED ||</div><div class=\"line\">\t\t\t!isFunction(onRejected) &amp;&amp; <span class=\"keyword\">this</span>.state === states.REJECTED) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 实例化一个新的Promise对象</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.constructor()</div><div class=\"line\">\t\t<span class=\"comment\">// 一般情况下，状态发生改变时，走这里</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== states.PENDING)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.state === states.FULFILLED ? onResolved : onRejected</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将上一步 resolve(value)或rejecte(value) 的 value 传递给then中注册的 callback</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// [标准 2.2.4] 异步调用callback</span></div><div class=\"line\">\t\t\texecuteCallbackAsync.bind(promise)(callback, <span class=\"keyword\">this</span>.data)</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// var promise = new Promise(resolve=&gt;resolve(1)); promise.then(...); promise.then(...); ...</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 一个实例执行多次then, 这种情况会走这里 [标准 2.2.6]</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.callbackQueue.push(<span class=\"keyword\">new</span> CallbackItem(promise, onResolved, onRejected))</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 返回新的实例 [标准 2.2.7]</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> promise</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onRejected</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">Promise</span>.prototype.done = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onResolved, onRejected</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.then(onResolved, onRejected).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> error</div><div class=\"line\">\t\t\t&#125;, <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'./promise-test'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">\thttp.post(<span class=\"string\">'http://m.carbank.cn/api/basedata/city'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">\t\t\treject(error)</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> res = <span class=\"built_in\">JSON</span>.parse(response.body)</div><div class=\"line\">\t\t\tresolve(res.re)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cities</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(cities[<span class=\"number\">0</span>])</div><div class=\"line\">&#125;)</div><div class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(error)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>关于什么是Promise以及用法这里就不多说了,图片看上去一目了然,图片引用自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN</a>。<br><img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"\"><br>有一次面试,被要求手写代码实现一个简单的Promise,虽然经常用,但是当时只能就着<a href=\"https://promisesaplus.com/\">Promise/A+规范</a>扯两句代码,就是没写出来,于是就试着写一下<br>","more":"</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>1、Promise有3种状态</p>\n<ul>\n<li>pending: 初始状态,pending可以转化为fulfilled或者rejected状态,并且只能有一次转化,并且不可逆</li>\n<li>fulfilled: 成功状态</li>\n<li>rejected: 失败状态</li>\n</ul>\n<p>2、初始化Promise接收一个函数为参数,该函数有两个函数作为参数,分别是resolve和reject</p>\n<ul>\n<li>resolve将pending转化为fulfilled,在成功时调用,并将成功结果作为参数传递</li>\n<li>reject将pending转化为rejected,在失败时调用,并将失败结果当参数传递<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve,reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"xml\"><span class=\"comment\">&lt;!--成功的条件--&gt;</span>)&#123;</div><div class=\"line\">        resolve(value)</div><div class=\"line\">    &#125;</div><div class=\"line\">    else &#123;</div><div class=\"line\">        reject(error)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>3、方法then和catch</p>\n<ul>\n<li>then注册状态转化的回调函数,接收onFulfilled或者onRejected,并返回一个新的Promise,保证链式调用</li>\n<li>catch相当于 return this.then(null, onRejected),Promise对象的错误具有冒泡性质，错误会不断的向后传递，直到 .catch() 捕获</li>\n<li>如果then和catch接收的不是函数,就会发生穿透</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h4 id=\"代码抄袭\"><a href=\"#代码抄袭\" class=\"headerlink\" title=\"代码抄袭\"></a>代码抄袭</h4><blockquote>\n<p><a href=\"http://coderlt.coding.me/2016/12/04/promise-in-depth-an-introduction-2/\">深入理解 Promise (中)</a><br><a href=\"https://github.com/xieranmaya/blog/issues/3\">剖析Promise内部结构，一步一步实现一个完整的、能通过所有Test case的Promise类</a><br><a href=\"https://zhuanlan.zhihu.com/p/25178630\">深入 Promise(一)——Promise 实现详解</a></p>\n</blockquote>\n<h4 id=\"上代码\"><a href=\"#上代码\" class=\"headerlink\" title=\"上代码\"></a>上代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div></pre></td><td class=\"code\"><pre><div class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> states = &#123;</div><div class=\"line\">\t\tPENDING: <span class=\"string\">'pending'</span>,</div><div class=\"line\">\t\tFULFILLED: <span class=\"string\">'fulfilled'</span>,</div><div class=\"line\">\t\tREJECTED: <span class=\"string\">'rejected'</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">noop</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">func</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> func === <span class=\"string\">'function'</span></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CallbackItem</span>(<span class=\"params\">promise, onResolved, onRejected</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.promise = promise;</div><div class=\"line\">\t\t<span class=\"comment\">// 为了保证在promise链中，resolve或reject的结果可以一直向后传递，可以默认给then添加resolvedFn和rejectedFn</span></div><div class=\"line\">\t\t<span class=\"comment\">// 穿透</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.onResolved = isFunction(onResolved) ? onResolved : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> v</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.onRejected = isFunction(onRejected) ? onRejected : <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> r</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tCallbackItem.prototype.resolve = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t\texecuteCallbackAsync.bind(<span class=\"keyword\">this</span>.promise)(<span class=\"keyword\">this</span>.onResolved, value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tCallbackItem.prototype.reject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">\t\texecuteCallbackAsync.bind(<span class=\"keyword\">this</span>.promise)(<span class=\"keyword\">this</span>.onRejected, value);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getThen</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(obj)</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> then = obj &amp;&amp; obj.then;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; isFunction(then)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appyThen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\tthen.apply(obj, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">\t\t\t&#125;;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 抽象出执行resolve和reject的回调</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeCallback</span>(<span class=\"params\">type, x</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> isResolve = type === <span class=\"string\">'resolve'</span>,</div><div class=\"line\">\t\t\tthenable;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isResolve &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || isFunction(x))) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tthenable = getThen(x);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> executeCallback.bind(<span class=\"keyword\">this</span>)(<span class=\"string\">'reject'</span>, e);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (isResolve &amp;&amp; thenable) &#123;</div><div class=\"line\">\t\t\texecuteResolver.bind(<span class=\"keyword\">this</span>)(thenable);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.state = isResolve ? states.FULFILLED : states.REJECTED;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.data = x;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.callbackQueue.forEach(v =&gt; v[type](x));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 用于执行 new Promise(function(resolve, reject)&#123;&#125;) 中的resove或reject方法</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeResolver</span>(<span class=\"params\">resolver</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//[标准 2.3.3.3.3] 如果resove()方法多次调用，只响应第一次，后面的忽略</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> called = <span class=\"literal\">false</span>,</div><div class=\"line\">\t\t\t_this = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onError</span>(<span class=\"params\">y</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (called) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcalled = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">//[标准 2.3.3.3.2] 如果是错误 使用reject方法</span></div><div class=\"line\">\t\t\texecuteCallback.bind(_this)(<span class=\"string\">'reject'</span>, y);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onSuccess</span>(<span class=\"params\">r</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (called) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcalled = <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">//[标准 2.3.3.3.1] 如果是成功 使用resolve方法</span></div><div class=\"line\">\t\t\texecuteCallback.bind(_this)(<span class=\"string\">'resolve'</span>, r);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 使用try...catch执行</span></div><div class=\"line\">\t\t<span class=\"comment\">//[标准 2.3.3.3.4] 如果调用resolve()或reject()时发生错误，则将状态改成rejected，并将错误reject出去</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tresolver(onSuccess, onError);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">\t\t\tonError(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 用于异步执行 .then(onResolved, onRejected) 中注册的回调</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executeCallbackAsync</span>(<span class=\"params\">callback, value</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</div><div class=\"line\">\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> res;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tres = callback(value);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> executeCallback.bind(_this)(<span class=\"string\">'reject'</span>, e);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res !== _this) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> executeCallback.bind(_this)(<span class=\"string\">'resolve'</span>, res);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> executeCallback.bind(_this)(<span class=\"string\">'reject'</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Cannot resolve promise with itself'</span>));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;, <span class=\"number\">4</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Promise</span>(<span class=\"params\">resolver</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 初始化Promise</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (resolver &amp;&amp; !isFunction(resolver)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'resolver is not a function'</span>)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 当前Promise的状态</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.state = states.PENDING</div><div class=\"line\">\t\t<span class=\"comment\">// 成功时的value或者失败时的reason,默认是undefined</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = <span class=\"keyword\">void</span> <span class=\"number\">0</span></div><div class=\"line\">\t\t<span class=\"comment\">// 保存注册的回调函数的队列</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.callbackQueue = []</div><div class=\"line\">\t\t<span class=\"comment\">// 抽象出executeResolver方法,包装resolve、reject</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (resolver) &#123;</div><div class=\"line\">\t\t\texecuteResolver.call(<span class=\"keyword\">this</span>, resolver)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//[标准 2.2.1 - 2.2.2] 状态已经发生改变并且参数不是函数时，则忽略</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!isFunction(onResolved) &amp;&amp; <span class=\"keyword\">this</span>.state === states.FULFILLED ||</div><div class=\"line\">\t\t\t!isFunction(onRejected) &amp;&amp; <span class=\"keyword\">this</span>.state === states.REJECTED) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 实例化一个新的Promise对象</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.constructor()</div><div class=\"line\">\t\t<span class=\"comment\">// 一般情况下，状态发生改变时，走这里</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state !== states.PENDING)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> callback = <span class=\"keyword\">this</span>.state === states.FULFILLED ? onResolved : onRejected</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将上一步 resolve(value)或rejecte(value) 的 value 传递给then中注册的 callback</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// [标准 2.2.4] 异步调用callback</span></div><div class=\"line\">\t\t\texecuteCallbackAsync.bind(promise)(callback, <span class=\"keyword\">this</span>.data)</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// var promise = new Promise(resolve=&gt;resolve(1)); promise.then(...); promise.then(...); ...</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 一个实例执行多次then, 这种情况会走这里 [标准 2.2.6]</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.callbackQueue.push(<span class=\"keyword\">new</span> CallbackItem(promise, onResolved, onRejected))</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 返回新的实例 [标准 2.2.7]</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> promise</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onRejected</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>, onRejected)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">Promise</span>.prototype.done = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">onResolved, onRejected</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.then(onResolved, onRejected).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> error</div><div class=\"line\">\t\t\t&#125;, <span class=\"number\">0</span>)</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span></div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'./promise-test'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">\thttp.post(<span class=\"string\">'http://m.carbank.cn/api/basedata/city'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">\t\t\treject(error)</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> res = <span class=\"built_in\">JSON</span>.parse(response.body)</div><div class=\"line\">\t\t\tresolve(res.re)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cities</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(cities[<span class=\"number\">0</span>])</div><div class=\"line\">&#125;)</div><div class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(error)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>"},{"title":"使用font-spider压缩字体","date":"2017-04-26T11:00:44.000Z","layout":"post","comments":1,"keywords":"font,spider,font-face","<!--description":"font-spider按需压缩字体文件-->","_content":"## 引言\n>字蛛是一个 WebFont 智能压缩工具，它能自动化分析页面中所使用的 WebFont 并进行按需压缩，通常好几 MB 的中文字体可以被压缩成几 KB 大小。 \n>[font-spider](http://font-spider.org)\n<!-- more -->\n## @font-face\n在前端开发中,经常会用到字体文件,比如常见的ttf、woff2、woff、eot、svg等格式。\n有时候设计师出的图中用到的字体不是web安全字体,系统中不存在,然而程序员又不想通过切图这种lowB的方法实现,就得用到CSS3 @font-face定制相应的字体。\n### Formal syntax\n\n```css\n    @font-face {\n      [ font-family: <family-name>; ] ||\n      [ src: [ <url> [ format(<string>#) ]? | <font-face-name> ]#; ] ||\n      [ unicode-range: <urange>#; ] ||\n      [ font-variant: <font-variant>; ] ||\n      [ font-feature-settings: normal | <feature-tag-value>#; ] ||\n      [ font-stretch: <font-stretch>; ] ||\n      [ font-weight: <weight>; ] ||\n      [ font-style: <style>; ]\n    }\n```\n### Example\n抄袭一下[大漠的示例](https://www.w3cplus.com/content/css3-font-face)\n```css\n    @font-face {\n    \tfont-family: 'YourWebFontName';\n    \tsrc: url('YourWebFontName.eot'); /* IE9 Compat Modes */\n    \tsrc: url('YourWebFontName.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\n                 url('YourWebFontName.woff') format('woff'), /* Modern Browsers */\n                 url('YourWebFontName.ttf')  format('truetype'), /* Safari, Android, iOS */\n                 url('YourWebFontName.svg#YourWebFontName') format('svg'); /* Legacy iOS */\n       }\n```\nFirefox、Chrome、Safari 以及 Opera 支持 .ttf (True Type Fonts) 和 .otf (OpenType Fonts) 类型的字体。\nInternet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。\n**注释：** Internet Explorer 8 以及更早的版本不支持新的 @font-face 规则。\n据[大漠](https://www.w3cplus.com/content/css3-font-face)的文章说@font-face规则 IE4 就已经支持了,我又查了一下发现果然。\n>'@font-face' 规则首先定义在 CSS2 规范中，但是在 CSS2.1 中被删除，目前又被纳入到 CSS3 推荐草案中。at-rule（@）包含一条或多条被称作 font descriptor （字体描述）的特性声明，与那些在常规的 CSS 规则中的类似。由于 '@font-face' 规则没有被纳入到目前应用最广泛的 CSS2.1 规范中，各浏览器虽然对此规则均支持，但支持的细节有所区别。\n>IE 从 4.0 开始支持 '@font-face' ，使用了 Embedded OpenType (EOT) 格式。借助微软官方提供的字体压缩工具 'Microsoft WEFT(Web Embedding Fonts Tool)' 可以将 OpenType TT(.ttf) 格式的字体压缩至较小的体积，压缩后的类型即 .eot 格式。.eot 格式的字体仅被 IE 所支持。而到目前正式发布的最新版本的 IE8 也仍然仅支持 .eot 格式的字体。\n\n## font-spider\n最近我在项目中做了个营销页面,一共13页,设计师给出的图中用到了造字工房力黑和方正中黑两种字体,把字体都切成图片肯定不现实,这样用到的图片多而且体积大,肯定影响效率。所以我就引入了这两种字体的ttf,但是大家知道中文字体的格式很大,力黑字体3.6M、中黑字体2M,整个页面加载需要20秒左右,这就要了亲命了。\n引入两种字体文件\n```css\n        @font-face {\n            font-family: lihei;\n            src: url(./fonts/mflh.ttf);\n            font-weight: 400;\n            font-style: normal\n        }\n\n        @font-face {\n            font-family: fzzh;\n            src: url(./fonts/fzzh.ttf);\n            font-weight: 400;\n            font-style: normal\n        }\n```\n如果不能压缩字体文件,这个方案就得放弃,好在GitHub上找到了[font-spider](https://github.com/aui/font-spider)这样好用的工具可以按需压缩字体,成功的让我用到的两种字体瘦身到28k、6k。\n```bash\n\n    font-spider index.html\n    \n    Font family: lihei\n    Original size: 3574.944 KB\n    Include chars: 1234S下业中产介代优伙伴作信入公共分创功加势厂发司合咨品四回团国场大好审小展州巨市店成携政未来松核模步汽渠牌理神空策简级绍美者融规访询贷赢车轻道配金销闪间集额！\n    Chars length: 82\n    Font id: e583df40b8412c80822e7c7f5173e410\n    CSS selectors: .title-top, .title-number, .page-1 .title, .page-2 .title, .page-3 .advantage-li--title, .partner-desc, .progress-title, .corner:before, .corner:after\n    Font files:\n    File fonts/mflh.ttf created: 28.94 KB\n    \n    Font family: fzzh\n    Original size: 2037.116 KB\n    Include chars: ()01489:产低作合品息按揭期热短线能贷高\n    Chars length: 23\n    Font id: c2b90772877e464bb783b3fed03b39ab\n    CSS selectors: .prod-title, .hotline\n    Font files:\n    File fonts/fzzh.ttf created: 5.988 KB\n```\n实际上我分别只用到了几十个字符而已,font-spider会自动化分析页面中所使用的 WebFont 并进行按需压缩,删掉我没用到的字符。\nfont-spider实际上是通过爬虫实现的,通过虚拟浏览器技术加载解析HTML和CSS、操作样式语法树、查找字体,具体请看作者的wiki [WebFont 智能压缩工具——字蛛 1.0.0 正式版发布-新增图标字体压缩](https://github.com/aui/font-spider/issues/79)。\n\n可惜的是目前font-spider只支持静态页面.html,还不支持各种模板。由于目前我开发所采用的是VUE,没办法把font-spider加到webpack工作流中去,所以无奈我使用的办法是把渲染好的页面重新再构建成一个新的html,然后通过命令压缩字体,然后再把压缩后的字体导回到项目中,尽管这种办法很恶心,很期待下个版本的font-spider支持动态模板的解析并能有webpack插件。\n\n## 引用\n>[CSS3 @font-face  https://www.w3cplus.com/content/css3-font-face\n>RF1001: 各浏览器对 '@font-face' 规则支持的字体格式不同，IE 支持 EOT 字体，Firefox Safari Opera 支持 TrueType 等字体  http://w3help.org/zh-cn/causes/RF1001\n>字蛛  https://github.com/aui/font-spider/blob/master/README-ZH-CN.md\n","source":"_posts/2017-04-26-使用font-spider压缩字体.md","raw":"---\ntitle: 使用font-spider压缩字体\ndate: 2017-04-26 19:00:44\nlayout: post\ncomments: true\ncategories: js\ntags: [font-face,font-spider]\nkeywords: font,spider,font-face\n<!--description: font-spider按需压缩字体文件-->\n---\n## 引言\n>字蛛是一个 WebFont 智能压缩工具，它能自动化分析页面中所使用的 WebFont 并进行按需压缩，通常好几 MB 的中文字体可以被压缩成几 KB 大小。 \n>[font-spider](http://font-spider.org)\n<!-- more -->\n## @font-face\n在前端开发中,经常会用到字体文件,比如常见的ttf、woff2、woff、eot、svg等格式。\n有时候设计师出的图中用到的字体不是web安全字体,系统中不存在,然而程序员又不想通过切图这种lowB的方法实现,就得用到CSS3 @font-face定制相应的字体。\n### Formal syntax\n\n```css\n    @font-face {\n      [ font-family: <family-name>; ] ||\n      [ src: [ <url> [ format(<string>#) ]? | <font-face-name> ]#; ] ||\n      [ unicode-range: <urange>#; ] ||\n      [ font-variant: <font-variant>; ] ||\n      [ font-feature-settings: normal | <feature-tag-value>#; ] ||\n      [ font-stretch: <font-stretch>; ] ||\n      [ font-weight: <weight>; ] ||\n      [ font-style: <style>; ]\n    }\n```\n### Example\n抄袭一下[大漠的示例](https://www.w3cplus.com/content/css3-font-face)\n```css\n    @font-face {\n    \tfont-family: 'YourWebFontName';\n    \tsrc: url('YourWebFontName.eot'); /* IE9 Compat Modes */\n    \tsrc: url('YourWebFontName.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\n                 url('YourWebFontName.woff') format('woff'), /* Modern Browsers */\n                 url('YourWebFontName.ttf')  format('truetype'), /* Safari, Android, iOS */\n                 url('YourWebFontName.svg#YourWebFontName') format('svg'); /* Legacy iOS */\n       }\n```\nFirefox、Chrome、Safari 以及 Opera 支持 .ttf (True Type Fonts) 和 .otf (OpenType Fonts) 类型的字体。\nInternet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。\n**注释：** Internet Explorer 8 以及更早的版本不支持新的 @font-face 规则。\n据[大漠](https://www.w3cplus.com/content/css3-font-face)的文章说@font-face规则 IE4 就已经支持了,我又查了一下发现果然。\n>'@font-face' 规则首先定义在 CSS2 规范中，但是在 CSS2.1 中被删除，目前又被纳入到 CSS3 推荐草案中。at-rule（@）包含一条或多条被称作 font descriptor （字体描述）的特性声明，与那些在常规的 CSS 规则中的类似。由于 '@font-face' 规则没有被纳入到目前应用最广泛的 CSS2.1 规范中，各浏览器虽然对此规则均支持，但支持的细节有所区别。\n>IE 从 4.0 开始支持 '@font-face' ，使用了 Embedded OpenType (EOT) 格式。借助微软官方提供的字体压缩工具 'Microsoft WEFT(Web Embedding Fonts Tool)' 可以将 OpenType TT(.ttf) 格式的字体压缩至较小的体积，压缩后的类型即 .eot 格式。.eot 格式的字体仅被 IE 所支持。而到目前正式发布的最新版本的 IE8 也仍然仅支持 .eot 格式的字体。\n\n## font-spider\n最近我在项目中做了个营销页面,一共13页,设计师给出的图中用到了造字工房力黑和方正中黑两种字体,把字体都切成图片肯定不现实,这样用到的图片多而且体积大,肯定影响效率。所以我就引入了这两种字体的ttf,但是大家知道中文字体的格式很大,力黑字体3.6M、中黑字体2M,整个页面加载需要20秒左右,这就要了亲命了。\n引入两种字体文件\n```css\n        @font-face {\n            font-family: lihei;\n            src: url(./fonts/mflh.ttf);\n            font-weight: 400;\n            font-style: normal\n        }\n\n        @font-face {\n            font-family: fzzh;\n            src: url(./fonts/fzzh.ttf);\n            font-weight: 400;\n            font-style: normal\n        }\n```\n如果不能压缩字体文件,这个方案就得放弃,好在GitHub上找到了[font-spider](https://github.com/aui/font-spider)这样好用的工具可以按需压缩字体,成功的让我用到的两种字体瘦身到28k、6k。\n```bash\n\n    font-spider index.html\n    \n    Font family: lihei\n    Original size: 3574.944 KB\n    Include chars: 1234S下业中产介代优伙伴作信入公共分创功加势厂发司合咨品四回团国场大好审小展州巨市店成携政未来松核模步汽渠牌理神空策简级绍美者融规访询贷赢车轻道配金销闪间集额！\n    Chars length: 82\n    Font id: e583df40b8412c80822e7c7f5173e410\n    CSS selectors: .title-top, .title-number, .page-1 .title, .page-2 .title, .page-3 .advantage-li--title, .partner-desc, .progress-title, .corner:before, .corner:after\n    Font files:\n    File fonts/mflh.ttf created: 28.94 KB\n    \n    Font family: fzzh\n    Original size: 2037.116 KB\n    Include chars: ()01489:产低作合品息按揭期热短线能贷高\n    Chars length: 23\n    Font id: c2b90772877e464bb783b3fed03b39ab\n    CSS selectors: .prod-title, .hotline\n    Font files:\n    File fonts/fzzh.ttf created: 5.988 KB\n```\n实际上我分别只用到了几十个字符而已,font-spider会自动化分析页面中所使用的 WebFont 并进行按需压缩,删掉我没用到的字符。\nfont-spider实际上是通过爬虫实现的,通过虚拟浏览器技术加载解析HTML和CSS、操作样式语法树、查找字体,具体请看作者的wiki [WebFont 智能压缩工具——字蛛 1.0.0 正式版发布-新增图标字体压缩](https://github.com/aui/font-spider/issues/79)。\n\n可惜的是目前font-spider只支持静态页面.html,还不支持各种模板。由于目前我开发所采用的是VUE,没办法把font-spider加到webpack工作流中去,所以无奈我使用的办法是把渲染好的页面重新再构建成一个新的html,然后通过命令压缩字体,然后再把压缩后的字体导回到项目中,尽管这种办法很恶心,很期待下个版本的font-spider支持动态模板的解析并能有webpack插件。\n\n## 引用\n>[CSS3 @font-face  https://www.w3cplus.com/content/css3-font-face\n>RF1001: 各浏览器对 '@font-face' 规则支持的字体格式不同，IE 支持 EOT 字体，Firefox Safari Opera 支持 TrueType 等字体  http://w3help.org/zh-cn/causes/RF1001\n>字蛛  https://github.com/aui/font-spider/blob/master/README-ZH-CN.md\n","slug":"使用font-spider压缩字体","published":1,"updated":"2017-04-27T05:05:53.000Z","photos":[],"link":"","_id":"cj62dox3i001uluszqde6ckst","content":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p>字蛛是一个 WebFont 智能压缩工具，它能自动化分析页面中所使用的 WebFont 并进行按需压缩，通常好几 MB 的中文字体可以被压缩成几 KB 大小。<br><a href=\"http://font-spider.org\" target=\"_blank\" rel=\"external\">font-spider</a><br><a id=\"more\"></a></p>\n<h2 id=\"font-face\"><a href=\"#font-face\" class=\"headerlink\" title=\"@font-face\"></a>@font-face</h2><p>在前端开发中,经常会用到字体文件,比如常见的ttf、woff2、woff、eot、svg等格式。<br>有时候设计师出的图中用到的字体不是web安全字体,系统中不存在,然而程序员又不想通过切图这种lowB的方法实现,就得用到CSS3 @font-face定制相应的字体。</p>\n<h3 id=\"Formal-syntax\"><a href=\"#Formal-syntax\" class=\"headerlink\" title=\"Formal syntax\"></a>Formal syntax</h3></blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@font-face &#123;</div><div class=\"line\">  [ font-family: &lt;family-name&gt;; ] ||</div><div class=\"line\">  [ src: [ &lt;url&gt; [ format(&lt;string&gt;#) ]? | &lt;font-face-name&gt; ]#; ] ||</div><div class=\"line\">  [ unicode-range: &lt;urange&gt;#; ] ||</div><div class=\"line\">  [ font-variant: &lt;font-variant&gt;; ] ||</div><div class=\"line\">  [ font-feature-settings: normal | &lt;feature-tag-value&gt;#; ] ||</div><div class=\"line\">  [ font-stretch: &lt;font-stretch&gt;; ] ||</div><div class=\"line\">  [ font-weight: &lt;weight&gt;; ] ||</div><div class=\"line\">  [ font-style: &lt;style&gt;; ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>抄袭一下<a href=\"https://www.w3cplus.com/content/css3-font-face\" target=\"_blank\" rel=\"external\">大漠的示例</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">'YourWebFontName'</span>;</div><div class=\"line\">\t<span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.eot'</span>); <span class=\"comment\">/* IE9 Compat Modes */</span></div><div class=\"line\">\t<span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>), <span class=\"comment\">/* IE6-IE8 */</span></div><div class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>), <span class=\"comment\">/* Modern Browsers */</span></div><div class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.ttf'</span>)  <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>), <span class=\"comment\">/* Safari, Android, iOS */</span></div><div class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.svg#YourWebFontName'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>); <span class=\"comment\">/* Legacy iOS */</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>Firefox、Chrome、Safari 以及 Opera 支持 .ttf (True Type Fonts) 和 .otf (OpenType Fonts) 类型的字体。<br>Internet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。<br><strong>注释：</strong> Internet Explorer 8 以及更早的版本不支持新的 @font-face 规则。<br>据<a href=\"https://www.w3cplus.com/content/css3-font-face\" target=\"_blank\" rel=\"external\">大漠</a>的文章说@font-face规则 IE4 就已经支持了,我又查了一下发现果然。</p>\n<blockquote>\n<p>‘@font-face’ 规则首先定义在 CSS2 规范中，但是在 CSS2.1 中被删除，目前又被纳入到 CSS3 推荐草案中。at-rule（@）包含一条或多条被称作 font descriptor （字体描述）的特性声明，与那些在常规的 CSS 规则中的类似。由于 ‘@font-face’ 规则没有被纳入到目前应用最广泛的 CSS2.1 规范中，各浏览器虽然对此规则均支持，但支持的细节有所区别。<br>IE 从 4.0 开始支持 ‘@font-face’ ，使用了 Embedded OpenType (EOT) 格式。借助微软官方提供的字体压缩工具 ‘Microsoft WEFT(Web Embedding Fonts Tool)’ 可以将 OpenType TT(.ttf) 格式的字体压缩至较小的体积，压缩后的类型即 .eot 格式。.eot 格式的字体仅被 IE 所支持。而到目前正式发布的最新版本的 IE8 也仍然仅支持 .eot 格式的字体。</p>\n</blockquote>\n<h2 id=\"font-spider\"><a href=\"#font-spider\" class=\"headerlink\" title=\"font-spider\"></a>font-spider</h2><p>最近我在项目中做了个营销页面,一共13页,设计师给出的图中用到了造字工房力黑和方正中黑两种字体,把字体都切成图片肯定不现实,这样用到的图片多而且体积大,肯定影响效率。所以我就引入了这两种字体的ttf,但是大家知道中文字体的格式很大,力黑字体3.6M、中黑字体2M,整个页面加载需要20秒左右,这就要了亲命了。<br>引入两种字体文件<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: lihei;</div><div class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(./fonts/mflh.ttf);</div><div class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</div><div class=\"line\">    <span class=\"attribute\">font-style</span>: normal</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: fzzh;</div><div class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(./fonts/fzzh.ttf);</div><div class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</div><div class=\"line\">    <span class=\"attribute\">font-style</span>: normal</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果不能压缩字体文件,这个方案就得放弃,好在GitHub上找到了<a href=\"https://github.com/aui/font-spider\" target=\"_blank\" rel=\"external\">font-spider</a>这样好用的工具可以按需压缩字体,成功的让我用到的两种字体瘦身到28k、6k。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">font-spider index.html</div><div class=\"line\"></div><div class=\"line\">Font family: lihei</div><div class=\"line\">Original size: 3574.944 KB</div><div class=\"line\">Include chars: 1234S下业中产介代优伙伴作信入公共分创功加势厂发司合咨品四回团国场大好审小展州巨市店成携政未来松核模步汽渠牌理神空策简级绍美者融规访询贷赢车轻道配金销闪间集额！</div><div class=\"line\">Chars length: 82</div><div class=\"line\">Font id: e583df40b8412c80822e7c7f5173e410</div><div class=\"line\">CSS selectors: .title-top, .title-number, .page-1 .title, .page-2 .title, .page-3 .advantage-li--title, .partner-desc, .progress-title, .corner:before, .corner:after</div><div class=\"line\">Font files:</div><div class=\"line\">File fonts/mflh.ttf created: 28.94 KB</div><div class=\"line\"></div><div class=\"line\">Font family: fzzh</div><div class=\"line\">Original size: 2037.116 KB</div><div class=\"line\">Include chars: ()01489:产低作合品息按揭期热短线能贷高</div><div class=\"line\">Chars length: 23</div><div class=\"line\">Font id: c2b90772877e464bb783b3fed03b39ab</div><div class=\"line\">CSS selectors: .prod-title, .hotline</div><div class=\"line\">Font files:</div><div class=\"line\">File fonts/fzzh.ttf created: 5.988 KB</div></pre></td></tr></table></figure></p>\n<p>实际上我分别只用到了几十个字符而已,font-spider会自动化分析页面中所使用的 WebFont 并进行按需压缩,删掉我没用到的字符。<br>font-spider实际上是通过爬虫实现的,通过虚拟浏览器技术加载解析HTML和CSS、操作样式语法树、查找字体,具体请看作者的wiki <a href=\"https://github.com/aui/font-spider/issues/79\" target=\"_blank\" rel=\"external\">WebFont 智能压缩工具——字蛛 1.0.0 正式版发布-新增图标字体压缩</a>。</p>\n<p>可惜的是目前font-spider只支持静态页面.html,还不支持各种模板。由于目前我开发所采用的是VUE,没办法把font-spider加到webpack工作流中去,所以无奈我使用的办法是把渲染好的页面重新再构建成一个新的html,然后通过命令压缩字体,然后再把压缩后的字体导回到项目中,尽管这种办法很恶心,很期待下个版本的font-spider支持动态模板的解析并能有webpack插件。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>[CSS3 @font-face  <a href=\"https://www.w3cplus.com/content/css3-font-face\" target=\"_blank\" rel=\"external\">https://www.w3cplus.com/content/css3-font-face</a><br>RF1001: 各浏览器对 ‘@font-face’ 规则支持的字体格式不同，IE 支持 EOT 字体，Firefox Safari Opera 支持 TrueType 等字体  <a href=\"http://w3help.org/zh-cn/causes/RF1001\" target=\"_blank\" rel=\"external\">http://w3help.org/zh-cn/causes/RF1001</a><br>字蛛  <a href=\"https://github.com/aui/font-spider/blob/master/README-ZH-CN.md\" target=\"_blank\" rel=\"external\">https://github.com/aui/font-spider/blob/master/README-ZH-CN.md</a></p>\n</blockquote>\n","excerpt":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><blockquote>\n<p>字蛛是一个 WebFont 智能压缩工具，它能自动化分析页面中所使用的 WebFont 并进行按需压缩，通常好几 MB 的中文字体可以被压缩成几 KB 大小。<br><a href=\"http://font-spider.org\">font-spider</a><br>","more":"</p>\n<h2 id=\"font-face\"><a href=\"#font-face\" class=\"headerlink\" title=\"@font-face\"></a>@font-face</h2><p>在前端开发中,经常会用到字体文件,比如常见的ttf、woff2、woff、eot、svg等格式。<br>有时候设计师出的图中用到的字体不是web安全字体,系统中不存在,然而程序员又不想通过切图这种lowB的方法实现,就得用到CSS3 @font-face定制相应的字体。</p>\n<h3 id=\"Formal-syntax\"><a href=\"#Formal-syntax\" class=\"headerlink\" title=\"Formal syntax\"></a>Formal syntax</h3></blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@font-face &#123;</div><div class=\"line\">  [ font-family: &lt;family-name&gt;; ] ||</div><div class=\"line\">  [ src: [ &lt;url&gt; [ format(&lt;string&gt;#) ]? | &lt;font-face-name&gt; ]#; ] ||</div><div class=\"line\">  [ unicode-range: &lt;urange&gt;#; ] ||</div><div class=\"line\">  [ font-variant: &lt;font-variant&gt;; ] ||</div><div class=\"line\">  [ font-feature-settings: normal | &lt;feature-tag-value&gt;#; ] ||</div><div class=\"line\">  [ font-stretch: &lt;font-stretch&gt;; ] ||</div><div class=\"line\">  [ font-weight: &lt;weight&gt;; ] ||</div><div class=\"line\">  [ font-style: &lt;style&gt;; ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>抄袭一下<a href=\"https://www.w3cplus.com/content/css3-font-face\">大漠的示例</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</div><div class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">'YourWebFontName'</span>;</div><div class=\"line\">\t<span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.eot'</span>); <span class=\"comment\">/* IE9 Compat Modes */</span></div><div class=\"line\">\t<span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.eot?#iefix'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'embedded-opentype'</span>), <span class=\"comment\">/* IE6-IE8 */</span></div><div class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.woff'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'woff'</span>), <span class=\"comment\">/* Modern Browsers */</span></div><div class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.ttf'</span>)  <span class=\"built_in\">format</span>(<span class=\"string\">'truetype'</span>), <span class=\"comment\">/* Safari, Android, iOS */</span></div><div class=\"line\">             <span class=\"built_in\">url</span>(<span class=\"string\">'YourWebFontName.svg#YourWebFontName'</span>) <span class=\"built_in\">format</span>(<span class=\"string\">'svg'</span>); <span class=\"comment\">/* Legacy iOS */</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>Firefox、Chrome、Safari 以及 Opera 支持 .ttf (True Type Fonts) 和 .otf (OpenType Fonts) 类型的字体。<br>Internet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。<br><strong>注释：</strong> Internet Explorer 8 以及更早的版本不支持新的 @font-face 规则。<br>据<a href=\"https://www.w3cplus.com/content/css3-font-face\">大漠</a>的文章说@font-face规则 IE4 就已经支持了,我又查了一下发现果然。</p>\n<blockquote>\n<p>‘@font-face’ 规则首先定义在 CSS2 规范中，但是在 CSS2.1 中被删除，目前又被纳入到 CSS3 推荐草案中。at-rule（@）包含一条或多条被称作 font descriptor （字体描述）的特性声明，与那些在常规的 CSS 规则中的类似。由于 ‘@font-face’ 规则没有被纳入到目前应用最广泛的 CSS2.1 规范中，各浏览器虽然对此规则均支持，但支持的细节有所区别。<br>IE 从 4.0 开始支持 ‘@font-face’ ，使用了 Embedded OpenType (EOT) 格式。借助微软官方提供的字体压缩工具 ‘Microsoft WEFT(Web Embedding Fonts Tool)’ 可以将 OpenType TT(.ttf) 格式的字体压缩至较小的体积，压缩后的类型即 .eot 格式。.eot 格式的字体仅被 IE 所支持。而到目前正式发布的最新版本的 IE8 也仍然仅支持 .eot 格式的字体。</p>\n</blockquote>\n<h2 id=\"font-spider\"><a href=\"#font-spider\" class=\"headerlink\" title=\"font-spider\"></a>font-spider</h2><p>最近我在项目中做了个营销页面,一共13页,设计师给出的图中用到了造字工房力黑和方正中黑两种字体,把字体都切成图片肯定不现实,这样用到的图片多而且体积大,肯定影响效率。所以我就引入了这两种字体的ttf,但是大家知道中文字体的格式很大,力黑字体3.6M、中黑字体2M,整个页面加载需要20秒左右,这就要了亲命了。<br>引入两种字体文件<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: lihei;</div><div class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(./fonts/mflh.ttf);</div><div class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</div><div class=\"line\">    <span class=\"attribute\">font-style</span>: normal</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">font-face</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: fzzh;</div><div class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(./fonts/fzzh.ttf);</div><div class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">400</span>;</div><div class=\"line\">    <span class=\"attribute\">font-style</span>: normal</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果不能压缩字体文件,这个方案就得放弃,好在GitHub上找到了<a href=\"https://github.com/aui/font-spider\">font-spider</a>这样好用的工具可以按需压缩字体,成功的让我用到的两种字体瘦身到28k、6k。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">font-spider index.html</div><div class=\"line\"></div><div class=\"line\">Font family: lihei</div><div class=\"line\">Original size: 3574.944 KB</div><div class=\"line\">Include chars: 1234S下业中产介代优伙伴作信入公共分创功加势厂发司合咨品四回团国场大好审小展州巨市店成携政未来松核模步汽渠牌理神空策简级绍美者融规访询贷赢车轻道配金销闪间集额！</div><div class=\"line\">Chars length: 82</div><div class=\"line\">Font id: e583df40b8412c80822e7c7f5173e410</div><div class=\"line\">CSS selectors: .title-top, .title-number, .page-1 .title, .page-2 .title, .page-3 .advantage-li--title, .partner-desc, .progress-title, .corner:before, .corner:after</div><div class=\"line\">Font files:</div><div class=\"line\">File fonts/mflh.ttf created: 28.94 KB</div><div class=\"line\"></div><div class=\"line\">Font family: fzzh</div><div class=\"line\">Original size: 2037.116 KB</div><div class=\"line\">Include chars: ()01489:产低作合品息按揭期热短线能贷高</div><div class=\"line\">Chars length: 23</div><div class=\"line\">Font id: c2b90772877e464bb783b3fed03b39ab</div><div class=\"line\">CSS selectors: .prod-title, .hotline</div><div class=\"line\">Font files:</div><div class=\"line\">File fonts/fzzh.ttf created: 5.988 KB</div></pre></td></tr></table></figure></p>\n<p>实际上我分别只用到了几十个字符而已,font-spider会自动化分析页面中所使用的 WebFont 并进行按需压缩,删掉我没用到的字符。<br>font-spider实际上是通过爬虫实现的,通过虚拟浏览器技术加载解析HTML和CSS、操作样式语法树、查找字体,具体请看作者的wiki <a href=\"https://github.com/aui/font-spider/issues/79\">WebFont 智能压缩工具——字蛛 1.0.0 正式版发布-新增图标字体压缩</a>。</p>\n<p>可惜的是目前font-spider只支持静态页面.html,还不支持各种模板。由于目前我开发所采用的是VUE,没办法把font-spider加到webpack工作流中去,所以无奈我使用的办法是把渲染好的页面重新再构建成一个新的html,然后通过命令压缩字体,然后再把压缩后的字体导回到项目中,尽管这种办法很恶心,很期待下个版本的font-spider支持动态模板的解析并能有webpack插件。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><blockquote>\n<p>[CSS3 @font-face  <a href=\"https://www.w3cplus.com/content/css3-font-face\">https://www.w3cplus.com/content/css3-font-face</a><br>RF1001: 各浏览器对 ‘@font-face’ 规则支持的字体格式不同，IE 支持 EOT 字体，Firefox Safari Opera 支持 TrueType 等字体  <a href=\"http://w3help.org/zh-cn/causes/RF1001\">http://w3help.org/zh-cn/causes/RF1001</a><br>字蛛  <a href=\"https://github.com/aui/font-spider/blob/master/README-ZH-CN.md\">https://github.com/aui/font-spider/blob/master/README-ZH-CN.md</a></p>\n</blockquote>"},{"title":"实现移动设备Ritina屏下1px","date":"2017-04-14T06:38:07.000Z","layout":"post","comments":1,"keywords":"css,像素,retina,高清屏","<!--description":"手机高清屏下1像素问题-->","_content":"## 背景\n\n大家应该都知道在ios Ritina高清屏下写1px的边框,实际上是2px,其实情况是devicePixelRatio=2 的时候显示2px, 6P这种的devicePixelRatio=3,实际效果是3px。\n解决这种问题的方法很多:\n1、ios8以上的支持0.5px\n2、淘宝的 vieweport + REM 方法实现, 详细解决方案移驾[淘宝m站](m.taobao.com)查看\n3、box-shadow、border-image、background-image,详情请自行google\n4、transform + after伪类,利用伪类after实现border为1px,在devicePixelRatio == 2时利用transform:scale(.5)缩一半\n<!-- more -->\n## 实现代码 \n   transform + after\n### html\n\n    ```html\n    <ul class=\"hair-lines\">\n        <li>\n            <div class=\"hair-line border-top\">上边框</div>\n        </li>\n        <li>\n            <div class=\"hair-line border-right\">右边框</div>\n        </li>\n        <li>\n            <div class=\"hair-line border-bottom\">下边框</div>\n        </li>\n        <li>\n            <div class=\"hair-line border-left\">左边框</div>\n        </li>\n        <li>\n            <div class=\"hair-line border-full\">四条边</div>\n        </li>\n        <li>\n            <div class=\"hair-line border-circle\">圆角</div>\n        </li>\n    </ul>\n    ```\n### css\n\n    ```css\n            .hair-lines li{\n                height: 40px;\n                line-height: 40px;\n                margin: 10px;\n                padding: 10px;\n                text-align: center;\n                list-style: none;\n            }\n            .hair-line{\n                position: relative;\n            }\n            .hair-line:after{\n                content: '';\n                position: absolute;\n                left: 0;\n                top: 0;\n                transform-origin: 0 0;\n                pointer-events: none;\n            }\n            .border-top:after{\n                border-top: 1px solid #d5d5d5;\n            }\n            .border-right:after{\n                border-right: 1px solid #d5d5d5;\n            }\n            .border-bottom:after{\n                border-bottom: 1px solid #d5d5d5;\n            }\n            .border-left:after{\n                border-left: 1px solid #d5d5d5;\n            }\n            .border-full:after{\n                border: 1px solid #d5d5d5;\n            }\n            .border-circle:after{\n                border: 1px solid #d5d5d5;\n                height: 200px;\n                width: 200px;\n                border-radius: 50%;\n            }\n            @media only screen and (-webkit-min-device-pixel-ratio: 2){\n                .hair-line:after {\n                    right: -100%;\n                    bottom: -100%;\n                    transform: scale(0.5);\n                }\n            }\n    ```\n## 效果\n<ul class=\"hair-lines\"><li><div class=\"hair-line border-top\">上边框</div></li><li><div class=\"hair-line border-right\">右边框</div></li><li><div class=\"hair-line border-bottom\">下边框</div></li><li><div class=\"hair-line border-left\">左边框</div></li><li><div class=\"hair-line border-full\">四条边</div></li><li><div class=\"hair-line border-circle\">圆角</div></li></ul>\n<style type=\"text/css\">\n        .hair-lines{\n            width: 320px;\n            background:#fff;\n            padding-bottom: 100px;\n        }\n        .hair-lines li{\n            height: 40px;\n            line-height: 40px;\n            margin: 10px;\n            padding: 10px;\n            text-align: center;\n            list-style: none;\n        }\n        .hair-lines li:before{\n            display:none!important;\n        }\n        .hair-line{\n            position: relative;\n        }\n        .hair-line:after{\n            content: '';\n            position: absolute;\n            left: 0;\n            top: 0;\n            transform-origin: 0 0;\n            pointer-events: none;\n        }\n        .border-top:after{\n            border-top: 1px solid #d5d5d5;\n        }\n        .border-right:after{\n            border-right: 1px solid #d5d5d5;\n        }\n        .border-bottom:after{\n            border-bottom: 1px solid #d5d5d5;\n        }\n        .border-left:after{\n            border-left: 1px solid #d5d5d5;\n        }\n        .border-full:after{\n            border: 1px solid #d5d5d5;\n        }\n        .border-circle:after{\n            border: 1px solid #d5d5d5;\n            height: 200px;\n            width: 200px;\n            border-radius: 50%;\n        }\n        @media only screen and (-webkit-min-device-pixel-ratio: 2){\n            .hair-line:after {\n                right: -100%;\n                bottom: -100%;\n                transform: scale(0.5);\n            }\n        }\n</style>","source":"_posts/2017-04-14-实现移动设备Ritina屏下1px.md","raw":"---\ntitle: 实现移动设备Ritina屏下1px\ndate: 2017-04-14 14:38:07\nlayout: post\ncomments: true\ncategories: css\ntags: [css]\nkeywords: css,像素,retina,高清屏\n<!--description: 手机高清屏下1像素问题-->\n---\n## 背景\n\n大家应该都知道在ios Ritina高清屏下写1px的边框,实际上是2px,其实情况是devicePixelRatio=2 的时候显示2px, 6P这种的devicePixelRatio=3,实际效果是3px。\n解决这种问题的方法很多:\n1、ios8以上的支持0.5px\n2、淘宝的 vieweport + REM 方法实现, 详细解决方案移驾[淘宝m站](m.taobao.com)查看\n3、box-shadow、border-image、background-image,详情请自行google\n4、transform + after伪类,利用伪类after实现border为1px,在devicePixelRatio == 2时利用transform:scale(.5)缩一半\n<!-- more -->\n## 实现代码 \n   transform + after\n### html\n\n    ```html\n    <ul class=\"hair-lines\">\n        <li>\n            <div class=\"hair-line border-top\">上边框</div>\n        </li>\n        <li>\n            <div class=\"hair-line border-right\">右边框</div>\n        </li>\n        <li>\n            <div class=\"hair-line border-bottom\">下边框</div>\n        </li>\n        <li>\n            <div class=\"hair-line border-left\">左边框</div>\n        </li>\n        <li>\n            <div class=\"hair-line border-full\">四条边</div>\n        </li>\n        <li>\n            <div class=\"hair-line border-circle\">圆角</div>\n        </li>\n    </ul>\n    ```\n### css\n\n    ```css\n            .hair-lines li{\n                height: 40px;\n                line-height: 40px;\n                margin: 10px;\n                padding: 10px;\n                text-align: center;\n                list-style: none;\n            }\n            .hair-line{\n                position: relative;\n            }\n            .hair-line:after{\n                content: '';\n                position: absolute;\n                left: 0;\n                top: 0;\n                transform-origin: 0 0;\n                pointer-events: none;\n            }\n            .border-top:after{\n                border-top: 1px solid #d5d5d5;\n            }\n            .border-right:after{\n                border-right: 1px solid #d5d5d5;\n            }\n            .border-bottom:after{\n                border-bottom: 1px solid #d5d5d5;\n            }\n            .border-left:after{\n                border-left: 1px solid #d5d5d5;\n            }\n            .border-full:after{\n                border: 1px solid #d5d5d5;\n            }\n            .border-circle:after{\n                border: 1px solid #d5d5d5;\n                height: 200px;\n                width: 200px;\n                border-radius: 50%;\n            }\n            @media only screen and (-webkit-min-device-pixel-ratio: 2){\n                .hair-line:after {\n                    right: -100%;\n                    bottom: -100%;\n                    transform: scale(0.5);\n                }\n            }\n    ```\n## 效果\n<ul class=\"hair-lines\"><li><div class=\"hair-line border-top\">上边框</div></li><li><div class=\"hair-line border-right\">右边框</div></li><li><div class=\"hair-line border-bottom\">下边框</div></li><li><div class=\"hair-line border-left\">左边框</div></li><li><div class=\"hair-line border-full\">四条边</div></li><li><div class=\"hair-line border-circle\">圆角</div></li></ul>\n<style type=\"text/css\">\n        .hair-lines{\n            width: 320px;\n            background:#fff;\n            padding-bottom: 100px;\n        }\n        .hair-lines li{\n            height: 40px;\n            line-height: 40px;\n            margin: 10px;\n            padding: 10px;\n            text-align: center;\n            list-style: none;\n        }\n        .hair-lines li:before{\n            display:none!important;\n        }\n        .hair-line{\n            position: relative;\n        }\n        .hair-line:after{\n            content: '';\n            position: absolute;\n            left: 0;\n            top: 0;\n            transform-origin: 0 0;\n            pointer-events: none;\n        }\n        .border-top:after{\n            border-top: 1px solid #d5d5d5;\n        }\n        .border-right:after{\n            border-right: 1px solid #d5d5d5;\n        }\n        .border-bottom:after{\n            border-bottom: 1px solid #d5d5d5;\n        }\n        .border-left:after{\n            border-left: 1px solid #d5d5d5;\n        }\n        .border-full:after{\n            border: 1px solid #d5d5d5;\n        }\n        .border-circle:after{\n            border: 1px solid #d5d5d5;\n            height: 200px;\n            width: 200px;\n            border-radius: 50%;\n        }\n        @media only screen and (-webkit-min-device-pixel-ratio: 2){\n            .hair-line:after {\n                right: -100%;\n                bottom: -100%;\n                transform: scale(0.5);\n            }\n        }\n</style>","slug":"实现移动设备Ritina屏下1px","published":1,"updated":"2017-04-27T05:06:14.000Z","photos":[],"link":"","_id":"cj62dox3m001xlusz2ul2y06j","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>大家应该都知道在ios Ritina高清屏下写1px的边框,实际上是2px,其实情况是devicePixelRatio=2 的时候显示2px, 6P这种的devicePixelRatio=3,实际效果是3px。<br>解决这种问题的方法很多:<br>1、ios8以上的支持0.5px<br>2、淘宝的 vieweport + REM 方法实现, 详细解决方案移驾<a href=\"m.taobao.com\">淘宝m站</a>查看<br>3、box-shadow、border-image、background-image,详情请自行google<br>4、transform + after伪类,利用伪类after实现border为1px,在devicePixelRatio == 2时利用transform:scale(.5)缩一半<br><a id=\"more\"></a></p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><p>   transform + after</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-lines\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-top\"</span>&gt;</span>上边框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-right\"</span>&gt;</span>右边框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-bottom\"</span>&gt;</span>下边框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-left\"</span>&gt;</span>左边框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-full\"</span>&gt;</span>四条边<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-circle\"</span>&gt;</span>圆角<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.hair-lines</span> <span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.hair-line</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.hair-line</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">transform-origin</span>: <span class=\"number\">0</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">pointer-events</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-top</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-right</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-bottom</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-left</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-full</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-circle</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>)&#123;</div><div class=\"line\">    <span class=\"selector-class\">.hair-line</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">right</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">        <span class=\"attribute\">bottom</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(0.5);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><ul class=\"hair-lines\"><li><div class=\"hair-line border-top\">上边框</div></li><li><div class=\"hair-line border-right\">右边框</div></li><li><div class=\"hair-line border-bottom\">下边框</div></li><li><div class=\"hair-line border-left\">左边框</div></li><li><div class=\"hair-line border-full\">四条边</div></li><li><div class=\"hair-line border-circle\">圆角</div></li></ul></p>\n<style type=\"text/css\">\n        .hair-lines{\n            width: 320px;\n            background:#fff;\n            padding-bottom: 100px;\n        }\n        .hair-lines li{\n            height: 40px;\n            line-height: 40px;\n            margin: 10px;\n            padding: 10px;\n            text-align: center;\n            list-style: none;\n        }\n        .hair-lines li:before{\n            display:none!important;\n        }\n        .hair-line{\n            position: relative;\n        }\n        .hair-line:after{\n            content: '';\n            position: absolute;\n            left: 0;\n            top: 0;\n            transform-origin: 0 0;\n            pointer-events: none;\n        }\n        .border-top:after{\n            border-top: 1px solid #d5d5d5;\n        }\n        .border-right:after{\n            border-right: 1px solid #d5d5d5;\n        }\n        .border-bottom:after{\n            border-bottom: 1px solid #d5d5d5;\n        }\n        .border-left:after{\n            border-left: 1px solid #d5d5d5;\n        }\n        .border-full:after{\n            border: 1px solid #d5d5d5;\n        }\n        .border-circle:after{\n            border: 1px solid #d5d5d5;\n            height: 200px;\n            width: 200px;\n            border-radius: 50%;\n        }\n        @media only screen and (-webkit-min-device-pixel-ratio: 2){\n            .hair-line:after {\n                right: -100%;\n                bottom: -100%;\n                transform: scale(0.5);\n            }\n        }\n</style>","excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>大家应该都知道在ios Ritina高清屏下写1px的边框,实际上是2px,其实情况是devicePixelRatio=2 的时候显示2px, 6P这种的devicePixelRatio=3,实际效果是3px。<br>解决这种问题的方法很多:<br>1、ios8以上的支持0.5px<br>2、淘宝的 vieweport + REM 方法实现, 详细解决方案移驾<a href=\"m.taobao.com\">淘宝m站</a>查看<br>3、box-shadow、border-image、background-image,详情请自行google<br>4、transform + after伪类,利用伪类after实现border为1px,在devicePixelRatio == 2时利用transform:scale(.5)缩一半<br>","more":"</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><p>   transform + after</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><pre><code><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-lines\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-top\"</span>&gt;</span>上边框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-right\"</span>&gt;</span>右边框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-bottom\"</span>&gt;</span>下边框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-left\"</span>&gt;</span>左边框<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-full\"</span>&gt;</span>四条边<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"hair-line border-circle\"</span>&gt;</span>圆角<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.hair-lines</span> <span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.hair-line</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.hair-line</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">transform-origin</span>: <span class=\"number\">0</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">pointer-events</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-top</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-right</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-bottom</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-left</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-full</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.border-circle</span><span class=\"selector-pseudo\">:after</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#d5d5d5</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">media</span> only screen and (-webkit-min-device-pixel-ratio: <span class=\"number\">2</span>)&#123;</div><div class=\"line\">    <span class=\"selector-class\">.hair-line</span><span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">right</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">        <span class=\"attribute\">bottom</span>: -<span class=\"number\">100%</span>;</div><div class=\"line\">        <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(0.5);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><ul class=\"hair-lines\"><li><div class=\"hair-line border-top\">上边框</div></li><li><div class=\"hair-line border-right\">右边框</div></li><li><div class=\"hair-line border-bottom\">下边框</div></li><li><div class=\"hair-line border-left\">左边框</div></li><li><div class=\"hair-line border-full\">四条边</div></li><li><div class=\"hair-line border-circle\">圆角</div></li></ul></p>\n<style type=\"text/css\">\n        .hair-lines{\n            width: 320px;\n            background:#fff;\n            padding-bottom: 100px;\n        }\n        .hair-lines li{\n            height: 40px;\n            line-height: 40px;\n            margin: 10px;\n            padding: 10px;\n            text-align: center;\n            list-style: none;\n        }\n        .hair-lines li:before{\n            display:none!important;\n        }\n        .hair-line{\n            position: relative;\n        }\n        .hair-line:after{\n            content: '';\n            position: absolute;\n            left: 0;\n            top: 0;\n            transform-origin: 0 0;\n            pointer-events: none;\n        }\n        .border-top:after{\n            border-top: 1px solid #d5d5d5;\n        }\n        .border-right:after{\n            border-right: 1px solid #d5d5d5;\n        }\n        .border-bottom:after{\n            border-bottom: 1px solid #d5d5d5;\n        }\n        .border-left:after{\n            border-left: 1px solid #d5d5d5;\n        }\n        .border-full:after{\n            border: 1px solid #d5d5d5;\n        }\n        .border-circle:after{\n            border: 1px solid #d5d5d5;\n            height: 200px;\n            width: 200px;\n            border-radius: 50%;\n        }\n        @media only screen and (-webkit-min-device-pixel-ratio: 2){\n            .hair-line:after {\n                right: -100%;\n                bottom: -100%;\n                transform: scale(0.5);\n            }\n        }\n</style>"},{"title":"一些js基础算法","date":"2017-07-21T07:00:44.000Z","layout":"post","comments":1,"keywords":"算法","_content":"## 前言\n长时间没有接触算法,脑子生锈,写下一些常见的排序、查找算法记在博客上给自己看,代码没有写注释。\n\n<!-- more -->\n## 排序\n\n```js\n    var array = [32, 80, 1, 13, 7, 36, 49, 2, 33, 20, 55]\n```\n\n### 1. 冒泡排序\n\n```js\n    function bubbleSort(arr) {\n    \tvar l = arr.length;\n    \tfor (var i = 0; i < l; i++) {\n    \t\tfor (var j = 0; j < l - i - 1; j++) {\n    \t\t\tif (arr[j] > arr[j + 1]) {\n    \t\t\t\tvar temp = arr[j];\n    \t\t\t\tarr[j] = arr[j + 1];\n    \t\t\t\tarr[j + 1] = temp;\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn arr\n    }\n    function bubbleSort2(arr) {\n    \tvar i = arr.length - 1;\n    \twhile (i > 0) {\n    \t\tvar position = 0;\n    \t\tfor (var j = 0; j < i; j++) {\n    \t\t\tif (arr[j] > arr[j + 1]) {\n    \t\t\t\tposition = j;\n    \t\t\t\tvar temp = arr[j];\n    \t\t\t\tarr[j] = arr[j + 1];\n    \t\t\t\tarr[j + 1] = temp;\n    \t\t\t}\n    \t\t}\n    \t\ti = position;\n    \t}\n    \treturn arr\n    }\n    console.log(bubbleSort(array))\n    console.log(bubbleSort2(array))\n```\n\n### 2. 选择排序\n\n```js\n    function selectionSort(arr) {\n    \tvar l = arr.length, minIndex, temp;\n    \tfor (var i = 0; i < l - 1; i++) {\n    \t\tminIndex = i;\n    \t\tfor (var j = i + 1; j < l; j++) {\n    \t\t\tif (arr[j] < arr[minIndex]) {\n    \t\t\t\tminIndex = j;\n    \t\t\t}\n    \t\t}\n    \t\ttemp = arr[i];\n    \t\tarr[i] = arr[minIndex];\n    \t\tarr[minIndex] = temp;\n    \t}\n    \treturn arr\n    }\n    console.log(selectionSort(array))\n```\n\n### 3. 插入排序\n\n```js\n   function insertionSort(arr) {\n   \tvar l = arr.length, preIndex, current;\n   \tfor (var i = 0; i < l; i++) {\n   \t\tpreIndex = i - 1;\n   \t\tcurrent = arr[i];\n   \t\twhile (preIndex >= 0 && arr[preIndex] > current) {\n   \t\t\tarr[preIndex + 1] = arr[preIndex];\n   \t\t\tpreIndex--;\n   \t\t}\n   \t\tarr[preIndex + 1] = current;\n   \t}\n   \treturn arr\n   }\n   console.log(insertionSort(array)) \n```\n\n### 4. 归并排序\n\n```js\n    function mergeSort(arr){\n    \tfunction _merge(left,right){\n    \t\tvar res = [],l_i = 0, r_i = 0\n    \t\twhile(l_i<left.length && r_i<right.length){\n    \t\t\tif(left[l_i]<right[r_i]){\n    \t\t\t\tres.push(left[l_i++])\n    \t\t\t} else {\n    \t\t\t\tres.push(right[r_i++])\n    \t\t\t}\n    \t\t}\n    \t\treturn res.concat(left.slice(l_i),right.slice(r_i))\n    \t}\n    \tfunction _ms(a){\n    \t\tif(a.length < 2) return a\n    \t\tvar pivotIndex = Math.floor(a.length/2)\n    \t\tvar left = a.slice(0,pivotIndex)\n    \t\tvar right = a.slice(pivotIndex)\n    \t\treturn _merge(_ms(left),_ms(right))\n    \t}\n    \treturn _ms(arr)\n    }\n\n    console.log(mergeSort(array))\n```\n\n### 5. 快速排序\n\n```js\n    function quickSort(arr) {\n    \tif (arr.length < 2) return arr\n    \tvar pivotIndex = Math.floor(arr.length / 2),\n    \t\tpivot = arr.splice(pivotIndex, 1)[0],\n    \t\tleft = [],\n    \t\tright = [];\n    \tfor (var i = 0; i < arr.length; i++) {\n    \t\tif (arr[i] < pivot) {\n    \t\t\tleft.push(arr[i])\n    \t\t} else {\n    \t\t\tright.push(arr[i])\n    \t\t}\n    \t}\n    \treturn quickSort(left).concat([pivot], quickSort(right))\n    }\n    \n    console.log(quickSort(array))\n```\n\n### 5. 堆排序\n\n```js\n    function heapSort(arr) {\n    \tvar l\n    \t// 创建大顶堆\n    \tfunction _buildMaxHeap(arr) {\n    \t\tl = arr.length\n    \t\tfor (var i = Math.floor(l / 2); i >= 0; i--) {\n    \t\t\t_heapify(arr, i)\n    \t\t}\n    \t}\n    \n    \t// 调整堆\n    \tfunction _heapify(arr, i) {\n    \t\tvar left = 2 * i + 1,\n    \t\t\tright = 2 * i + 2,\n    \t\t\tmax = i\n    \t\tif (left < l && arr[left] > arr[max]) {\n    \t\t\tmax = left\n    \t\t}\n    \t\tif (right < l && arr[right] > arr[max]) {\n    \t\t\tmax = right\n    \t\t}\n    \n    \t\tif (max != i) {\n    \t\t\tvar temp = arr[i]\n    \t\t\tarr[i] = arr[max]\n    \t\t\tarr[max] = temp\n    \n    \t\t\t_heapify(arr, max)\n    \t\t}\n    \t}\n    \n    \t_buildMaxHeap(arr)\n    \n    \tfor (var i = arr.length - 1; i > 0; i--) {\n    \t\tvar temp = arr[0]\n    \t\tarr[0] = arr[i]\n    \t\tarr[i] = temp\n    \t\tl--\n    \t\t_heapify(arr, 0)\n    \t}\n    \treturn arr\n    }\n    \n    console.log(heapSort(array))\n```\n\n## 查找\n\n### 1. 二分法\n\n```js\n    function binarySearch(arr,target){\n    \tvar startIndex = 0,\n    \t\tendIndex = arr.length - 1,\n    \t\tpivotIndex = Math.floor((endIndex - startIndex)/2)\n    \twhile(arr[pivotIndex] !=target && startIndex < endIndex){\n    \t\tif(target < arr[pivotIndex]){\n    \t\t\tendIndex = pivotIndex - 1\n    \t\t} else if(target > arr[pivotIndex]){\n    \t\t\tstartIndex = pivotIndex + 1\n    \t\t}\n    \t\tpivotIndex = Math.floor((endIndex - startIndex)/2)\n    \t}\n    \treturn arr[pivotIndex] != target ? -1 : pivotIndex\n    }\n    console.log(binarySearch([32, 80, 1, 13, 7, 36, 49],1))\n```\n\n### 2. 最大子串\n\n```js\n    function getMaxSub(s1, s2) {\n    \tvar max = 0, retchars = [];\n    \tfor(var index = 0; index < s1.length; index++){\n    \t\tvar count = 0, chars = []; // 每次遍历都置空\n    \t\tfor(var i = index, j = 0; j < s2.length; j++){\n    \t\t\tvar s1char = s1[i];\n    \t\t\tvar s2char = s2[j];\n    \t\t\tif(s1char === s2char){\n    \t\t\t\tcount++;\n    \t\t\t\ti++;\n    \t\t\t\tchars.push(s1char);\n    \t\t\t} else if(count) { // 如果不相同且有相同过则count和chars置空，i复位，j回退一位\n    \t\t\t\tj--;\n    \t\t\t\tcount = 0;\n    \t\t\t\tchars = [];\n    \t\t\t\ti = index;\n    \t\t\t}\n    \t\t\tif(count > max) {\n    \t\t\t\tmax = count;\n    \t\t\t\tretchars = chars.slice();\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn retchars.join('');\n    }\n    \n    getMaxSub('abcde','rodcdpp')\n```\n\n### 3. 二维数组查找\n\n```js\n    var findTarget = function (target, arr) {\n    \tconsole.log(arr)\n    \tvar l = arr.length,\n    \t\ti = l - 1,\n    \t\tj = 0\n    \twhile (i >= 0 && arr[i][j]) {\n    \t\tif (arr[i][j] < target) {\n    \t\t\tj++\n    \t\t}\n    \t\telse if(arr[i][j] > target) {\n    \t\t\ti--\n    \t\t} else {\n    \t\t\tconsole.log(i,j)\n    \t\t\treturn true\n    \t\t}\n    \t\treturn false\n    \t}\n    }\n    \n    var dda = [[1, 2, 4, 6], [2, 4, 7, 8], [8, 9, 10, 11], [9, 12, 13, 15]]\n    console.log(findTarget(19, dda))\n```\n\n## 杂七杂八\n\n### 字符串转数字\n\n```js\n    function atoi(n) {\n    \treturn n.split(\"\").reduce((prev, curr, index) => {\n    \t\tconsole.log(prev,curr)\n    \t\treturn prev * 10 + (curr - '0')\n    \t}, 0)\n    }\n```\n\n### 洗牌\n\n```js\n        function shuffleFn(a) {\n            let b = []\n            for(var i = a.length;i>0;){\n                var index = Math.floor(Math.random() * i);\n                b.push(a[index])\n                a[index] = a[--i]\n            }\n            return b\n        }\n        shuffleFn([12,53,21,6,33,332,422,987,343645,2])\n```\n\n### 斐波那契尾递归和缓存版\n\n```js\n            // 尾递归\n            function fibonacci(n, ac1 = 1, ac2 = 1) {\n                if (n <= 1) {\n                    return ac1;\n                }\n                return fibonacci(n - 1, ac2, ac1 + ac2);\n            }\n            // cache\n            var fib_cache = function () {\n                var cache = [1, 1];\n                return function (n) {\n                    if (n >= cache.length) {\n                        for (var i = cache.length; i < n; i++) {\n                            cache[i] = cache[i - 1] + cache[i - 2];\n                        }\n                    }\n                    return cache[n - 1];\n                }\n            }()\n```\n\n### 深拷贝\n\n```js\n            function is(obj, type) {\n                return Object.prototype.toString.call(obj).slice(8, -1) === type;\n            }\n            function copy(obj, isDeep) {\n                var ret = obj.slice ? [] : {}, p;\n                if (!isDeep && is(obj, 'Array')) return obj.slice();\n                for (p in obj) {\n                    var prop = obj[p];\n                    if (!obj.hasOwnProperty(p)) continue;\n                    if (is(prop, 'Object') || is(prop, 'Array')) {\n                        ret[p] = copy(prop, isDeep);\n                    } else {\n                        ret[p] = prop;\n                    }\n                }\n                return ret;\n            }\n```\n\n### 数组去重\n\n```js\n            Array.prototype.unique = Array.prototype.unique || function () {\n                        var hash = {}, res = [];\n                        for (var i = 0, l = this.length; i < l; i++) {\n                            if (!hash.hasOwnProperty(this[i])) {\n                                hash[this[i]] = true;\n                                res.push(this[i]);\n                            }\n                        }\n                        return res;\n                    }\n```\n\n### 数组取交集\n\n```js\n             Array.prototype.unique = Array.prototype.unique || function () {\n                        var hash = {}, res = [];\n                        for (var i = 0, l = this.length; i < l; i++) {\n                            if (!hash.hasOwnProperty(this[i])) {\n                                hash[this[i]] = true;\n                                res.push(this[i]);\n                            }\n                        }\n                        return res;\n                    }\n```","source":"_posts/2017-07-21-一些js基础算法.md","raw":"---\ntitle: 一些js基础算法\ndate: 2017-07-21 15:00:44\nlayout: post\ncomments: true\ncategories: js\ntags: [算法]\nkeywords: 算法\n---\n## 前言\n长时间没有接触算法,脑子生锈,写下一些常见的排序、查找算法记在博客上给自己看,代码没有写注释。\n\n<!-- more -->\n## 排序\n\n```js\n    var array = [32, 80, 1, 13, 7, 36, 49, 2, 33, 20, 55]\n```\n\n### 1. 冒泡排序\n\n```js\n    function bubbleSort(arr) {\n    \tvar l = arr.length;\n    \tfor (var i = 0; i < l; i++) {\n    \t\tfor (var j = 0; j < l - i - 1; j++) {\n    \t\t\tif (arr[j] > arr[j + 1]) {\n    \t\t\t\tvar temp = arr[j];\n    \t\t\t\tarr[j] = arr[j + 1];\n    \t\t\t\tarr[j + 1] = temp;\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn arr\n    }\n    function bubbleSort2(arr) {\n    \tvar i = arr.length - 1;\n    \twhile (i > 0) {\n    \t\tvar position = 0;\n    \t\tfor (var j = 0; j < i; j++) {\n    \t\t\tif (arr[j] > arr[j + 1]) {\n    \t\t\t\tposition = j;\n    \t\t\t\tvar temp = arr[j];\n    \t\t\t\tarr[j] = arr[j + 1];\n    \t\t\t\tarr[j + 1] = temp;\n    \t\t\t}\n    \t\t}\n    \t\ti = position;\n    \t}\n    \treturn arr\n    }\n    console.log(bubbleSort(array))\n    console.log(bubbleSort2(array))\n```\n\n### 2. 选择排序\n\n```js\n    function selectionSort(arr) {\n    \tvar l = arr.length, minIndex, temp;\n    \tfor (var i = 0; i < l - 1; i++) {\n    \t\tminIndex = i;\n    \t\tfor (var j = i + 1; j < l; j++) {\n    \t\t\tif (arr[j] < arr[minIndex]) {\n    \t\t\t\tminIndex = j;\n    \t\t\t}\n    \t\t}\n    \t\ttemp = arr[i];\n    \t\tarr[i] = arr[minIndex];\n    \t\tarr[minIndex] = temp;\n    \t}\n    \treturn arr\n    }\n    console.log(selectionSort(array))\n```\n\n### 3. 插入排序\n\n```js\n   function insertionSort(arr) {\n   \tvar l = arr.length, preIndex, current;\n   \tfor (var i = 0; i < l; i++) {\n   \t\tpreIndex = i - 1;\n   \t\tcurrent = arr[i];\n   \t\twhile (preIndex >= 0 && arr[preIndex] > current) {\n   \t\t\tarr[preIndex + 1] = arr[preIndex];\n   \t\t\tpreIndex--;\n   \t\t}\n   \t\tarr[preIndex + 1] = current;\n   \t}\n   \treturn arr\n   }\n   console.log(insertionSort(array)) \n```\n\n### 4. 归并排序\n\n```js\n    function mergeSort(arr){\n    \tfunction _merge(left,right){\n    \t\tvar res = [],l_i = 0, r_i = 0\n    \t\twhile(l_i<left.length && r_i<right.length){\n    \t\t\tif(left[l_i]<right[r_i]){\n    \t\t\t\tres.push(left[l_i++])\n    \t\t\t} else {\n    \t\t\t\tres.push(right[r_i++])\n    \t\t\t}\n    \t\t}\n    \t\treturn res.concat(left.slice(l_i),right.slice(r_i))\n    \t}\n    \tfunction _ms(a){\n    \t\tif(a.length < 2) return a\n    \t\tvar pivotIndex = Math.floor(a.length/2)\n    \t\tvar left = a.slice(0,pivotIndex)\n    \t\tvar right = a.slice(pivotIndex)\n    \t\treturn _merge(_ms(left),_ms(right))\n    \t}\n    \treturn _ms(arr)\n    }\n\n    console.log(mergeSort(array))\n```\n\n### 5. 快速排序\n\n```js\n    function quickSort(arr) {\n    \tif (arr.length < 2) return arr\n    \tvar pivotIndex = Math.floor(arr.length / 2),\n    \t\tpivot = arr.splice(pivotIndex, 1)[0],\n    \t\tleft = [],\n    \t\tright = [];\n    \tfor (var i = 0; i < arr.length; i++) {\n    \t\tif (arr[i] < pivot) {\n    \t\t\tleft.push(arr[i])\n    \t\t} else {\n    \t\t\tright.push(arr[i])\n    \t\t}\n    \t}\n    \treturn quickSort(left).concat([pivot], quickSort(right))\n    }\n    \n    console.log(quickSort(array))\n```\n\n### 5. 堆排序\n\n```js\n    function heapSort(arr) {\n    \tvar l\n    \t// 创建大顶堆\n    \tfunction _buildMaxHeap(arr) {\n    \t\tl = arr.length\n    \t\tfor (var i = Math.floor(l / 2); i >= 0; i--) {\n    \t\t\t_heapify(arr, i)\n    \t\t}\n    \t}\n    \n    \t// 调整堆\n    \tfunction _heapify(arr, i) {\n    \t\tvar left = 2 * i + 1,\n    \t\t\tright = 2 * i + 2,\n    \t\t\tmax = i\n    \t\tif (left < l && arr[left] > arr[max]) {\n    \t\t\tmax = left\n    \t\t}\n    \t\tif (right < l && arr[right] > arr[max]) {\n    \t\t\tmax = right\n    \t\t}\n    \n    \t\tif (max != i) {\n    \t\t\tvar temp = arr[i]\n    \t\t\tarr[i] = arr[max]\n    \t\t\tarr[max] = temp\n    \n    \t\t\t_heapify(arr, max)\n    \t\t}\n    \t}\n    \n    \t_buildMaxHeap(arr)\n    \n    \tfor (var i = arr.length - 1; i > 0; i--) {\n    \t\tvar temp = arr[0]\n    \t\tarr[0] = arr[i]\n    \t\tarr[i] = temp\n    \t\tl--\n    \t\t_heapify(arr, 0)\n    \t}\n    \treturn arr\n    }\n    \n    console.log(heapSort(array))\n```\n\n## 查找\n\n### 1. 二分法\n\n```js\n    function binarySearch(arr,target){\n    \tvar startIndex = 0,\n    \t\tendIndex = arr.length - 1,\n    \t\tpivotIndex = Math.floor((endIndex - startIndex)/2)\n    \twhile(arr[pivotIndex] !=target && startIndex < endIndex){\n    \t\tif(target < arr[pivotIndex]){\n    \t\t\tendIndex = pivotIndex - 1\n    \t\t} else if(target > arr[pivotIndex]){\n    \t\t\tstartIndex = pivotIndex + 1\n    \t\t}\n    \t\tpivotIndex = Math.floor((endIndex - startIndex)/2)\n    \t}\n    \treturn arr[pivotIndex] != target ? -1 : pivotIndex\n    }\n    console.log(binarySearch([32, 80, 1, 13, 7, 36, 49],1))\n```\n\n### 2. 最大子串\n\n```js\n    function getMaxSub(s1, s2) {\n    \tvar max = 0, retchars = [];\n    \tfor(var index = 0; index < s1.length; index++){\n    \t\tvar count = 0, chars = []; // 每次遍历都置空\n    \t\tfor(var i = index, j = 0; j < s2.length; j++){\n    \t\t\tvar s1char = s1[i];\n    \t\t\tvar s2char = s2[j];\n    \t\t\tif(s1char === s2char){\n    \t\t\t\tcount++;\n    \t\t\t\ti++;\n    \t\t\t\tchars.push(s1char);\n    \t\t\t} else if(count) { // 如果不相同且有相同过则count和chars置空，i复位，j回退一位\n    \t\t\t\tj--;\n    \t\t\t\tcount = 0;\n    \t\t\t\tchars = [];\n    \t\t\t\ti = index;\n    \t\t\t}\n    \t\t\tif(count > max) {\n    \t\t\t\tmax = count;\n    \t\t\t\tretchars = chars.slice();\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn retchars.join('');\n    }\n    \n    getMaxSub('abcde','rodcdpp')\n```\n\n### 3. 二维数组查找\n\n```js\n    var findTarget = function (target, arr) {\n    \tconsole.log(arr)\n    \tvar l = arr.length,\n    \t\ti = l - 1,\n    \t\tj = 0\n    \twhile (i >= 0 && arr[i][j]) {\n    \t\tif (arr[i][j] < target) {\n    \t\t\tj++\n    \t\t}\n    \t\telse if(arr[i][j] > target) {\n    \t\t\ti--\n    \t\t} else {\n    \t\t\tconsole.log(i,j)\n    \t\t\treturn true\n    \t\t}\n    \t\treturn false\n    \t}\n    }\n    \n    var dda = [[1, 2, 4, 6], [2, 4, 7, 8], [8, 9, 10, 11], [9, 12, 13, 15]]\n    console.log(findTarget(19, dda))\n```\n\n## 杂七杂八\n\n### 字符串转数字\n\n```js\n    function atoi(n) {\n    \treturn n.split(\"\").reduce((prev, curr, index) => {\n    \t\tconsole.log(prev,curr)\n    \t\treturn prev * 10 + (curr - '0')\n    \t}, 0)\n    }\n```\n\n### 洗牌\n\n```js\n        function shuffleFn(a) {\n            let b = []\n            for(var i = a.length;i>0;){\n                var index = Math.floor(Math.random() * i);\n                b.push(a[index])\n                a[index] = a[--i]\n            }\n            return b\n        }\n        shuffleFn([12,53,21,6,33,332,422,987,343645,2])\n```\n\n### 斐波那契尾递归和缓存版\n\n```js\n            // 尾递归\n            function fibonacci(n, ac1 = 1, ac2 = 1) {\n                if (n <= 1) {\n                    return ac1;\n                }\n                return fibonacci(n - 1, ac2, ac1 + ac2);\n            }\n            // cache\n            var fib_cache = function () {\n                var cache = [1, 1];\n                return function (n) {\n                    if (n >= cache.length) {\n                        for (var i = cache.length; i < n; i++) {\n                            cache[i] = cache[i - 1] + cache[i - 2];\n                        }\n                    }\n                    return cache[n - 1];\n                }\n            }()\n```\n\n### 深拷贝\n\n```js\n            function is(obj, type) {\n                return Object.prototype.toString.call(obj).slice(8, -1) === type;\n            }\n            function copy(obj, isDeep) {\n                var ret = obj.slice ? [] : {}, p;\n                if (!isDeep && is(obj, 'Array')) return obj.slice();\n                for (p in obj) {\n                    var prop = obj[p];\n                    if (!obj.hasOwnProperty(p)) continue;\n                    if (is(prop, 'Object') || is(prop, 'Array')) {\n                        ret[p] = copy(prop, isDeep);\n                    } else {\n                        ret[p] = prop;\n                    }\n                }\n                return ret;\n            }\n```\n\n### 数组去重\n\n```js\n            Array.prototype.unique = Array.prototype.unique || function () {\n                        var hash = {}, res = [];\n                        for (var i = 0, l = this.length; i < l; i++) {\n                            if (!hash.hasOwnProperty(this[i])) {\n                                hash[this[i]] = true;\n                                res.push(this[i]);\n                            }\n                        }\n                        return res;\n                    }\n```\n\n### 数组取交集\n\n```js\n             Array.prototype.unique = Array.prototype.unique || function () {\n                        var hash = {}, res = [];\n                        for (var i = 0, l = this.length; i < l; i++) {\n                            if (!hash.hasOwnProperty(this[i])) {\n                                hash[this[i]] = true;\n                                res.push(this[i]);\n                            }\n                        }\n                        return res;\n                    }\n```","slug":"一些js基础算法","published":1,"updated":"2017-07-28T08:34:36.000Z","photos":[],"link":"","_id":"cj62dox3o0020luszhm5nzqiq","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>长时间没有接触算法,脑子生锈,写下一些常见的排序、查找算法记在博客上给自己看,代码没有写注释。</p>\n<a id=\"more\"></a>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">32</span>, <span class=\"number\">80</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">2</span>, <span class=\"number\">33</span>, <span class=\"number\">20</span>, <span class=\"number\">55</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1. 冒泡排序\"></a>1. 冒泡排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> l = arr.length;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; l - i - <span class=\"number\">1</span>; j++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> temp = arr[j];</div><div class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort2</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> i = arr.length - <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> position = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">\t\t\t\tposition = j;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> temp = arr[j];</div><div class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\ti = position;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(bubbleSort(array))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(bubbleSort2(array))</div></pre></td></tr></table></figure>\n<h3 id=\"2-选择排序\"><a href=\"#2-选择排序\" class=\"headerlink\" title=\"2. 选择排序\"></a>2. 选择排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> l = arr.length, minIndex, temp;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; l - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">\t\tminIndex = i;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; l; j++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;</div><div class=\"line\">\t\t\t\tminIndex = j;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\ttemp = arr[i];</div><div class=\"line\">\t\tarr[i] = arr[minIndex];</div><div class=\"line\">\t\tarr[minIndex] = temp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(selectionSort(array))</div></pre></td></tr></table></figure>\n<h3 id=\"3-插入排序\"><a href=\"#3-插入排序\" class=\"headerlink\" title=\"3. 插入排序\"></a>3. 插入排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> l = arr.length, preIndex, current;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</div><div class=\"line\">\t\tpreIndex = i - <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcurrent = arr[i];</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</div><div class=\"line\">\t\t\tarr[preIndex + <span class=\"number\">1</span>] = arr[preIndex];</div><div class=\"line\">\t\t\tpreIndex--;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tarr[preIndex + <span class=\"number\">1</span>] = current;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(insertionSort(array))</div></pre></td></tr></table></figure>\n<h3 id=\"4-归并排序\"><a href=\"#4-归并排序\" class=\"headerlink\" title=\"4. 归并排序\"></a>4. 归并排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_merge</span>(<span class=\"params\">left,right</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> res = [],l_i = <span class=\"number\">0</span>, r_i = <span class=\"number\">0</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(l_i&lt;left.length &amp;&amp; r_i&lt;right.length)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(left[l_i]&lt;right[r_i])&#123;</div><div class=\"line\">\t\t\t\tres.push(left[l_i++])</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tres.push(right[r_i++])</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> res.concat(left.slice(l_i),right.slice(r_i))</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_ms</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(a.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> a</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(a.length/<span class=\"number\">2</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> left = a.slice(<span class=\"number\">0</span>,pivotIndex)</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> right = a.slice(pivotIndex)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> _merge(_ms(left),_ms(right))</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> _ms(arr)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(mergeSort(array))</div></pre></td></tr></table></figure>\n<h3 id=\"5-快速排序\"><a href=\"#5-快速排序\" class=\"headerlink\" title=\"5. 快速排序\"></a>5. 快速排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr</div><div class=\"line\">\t<span class=\"keyword\">var</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>),</div><div class=\"line\">\t\tpivot = arr.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>],</div><div class=\"line\">\t\tleft = [],</div><div class=\"line\">\t\tright = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">\t\t\tleft.push(arr[i])</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tright.push(arr[i])</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> quickSort(left).concat([pivot], quickSort(right))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(array))</div></pre></td></tr></table></figure>\n<h3 id=\"5-堆排序\"><a href=\"#5-堆排序\" class=\"headerlink\" title=\"5. 堆排序\"></a>5. 堆排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> l</div><div class=\"line\">\t<span class=\"comment\">// 创建大顶堆</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_buildMaxHeap</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t\tl = arr.length</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"built_in\">Math</span>.floor(l / <span class=\"number\">2</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">\t\t\t_heapify(arr, i)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 调整堆</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_heapify</span>(<span class=\"params\">arr, i</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> left = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>,</div><div class=\"line\">\t\t\tright = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>,</div><div class=\"line\">\t\t\tmax = i</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (left &lt; l &amp;&amp; arr[left] &gt; arr[max]) &#123;</div><div class=\"line\">\t\t\tmax = left</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (right &lt; l &amp;&amp; arr[right] &gt; arr[max]) &#123;</div><div class=\"line\">\t\t\tmax = right</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (max != i) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> temp = arr[i]</div><div class=\"line\">\t\t\tarr[i] = arr[max]</div><div class=\"line\">\t\t\tarr[max] = temp</div><div class=\"line\"></div><div class=\"line\">\t\t\t_heapify(arr, max)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t_buildMaxHeap(arr)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = arr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> temp = arr[<span class=\"number\">0</span>]</div><div class=\"line\">\t\tarr[<span class=\"number\">0</span>] = arr[i]</div><div class=\"line\">\t\tarr[i] = temp</div><div class=\"line\">\t\tl--</div><div class=\"line\">\t\t_heapify(arr, <span class=\"number\">0</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(heapSort(array))</div></pre></td></tr></table></figure>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h3 id=\"1-二分法\"><a href=\"#1-二分法\" class=\"headerlink\" title=\"1. 二分法\"></a>1. 二分法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">arr,target</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> startIndex = <span class=\"number\">0</span>,</div><div class=\"line\">\t\tendIndex = arr.length - <span class=\"number\">1</span>,</div><div class=\"line\">\t\tpivotIndex = <span class=\"built_in\">Math</span>.floor((endIndex - startIndex)/<span class=\"number\">2</span>)</div><div class=\"line\">\t<span class=\"keyword\">while</span>(arr[pivotIndex] !=target &amp;&amp; startIndex &lt; endIndex)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(target &lt; arr[pivotIndex])&#123;</div><div class=\"line\">\t\t\tendIndex = pivotIndex - <span class=\"number\">1</span></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; arr[pivotIndex])&#123;</div><div class=\"line\">\t\t\tstartIndex = pivotIndex + <span class=\"number\">1</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tpivotIndex = <span class=\"built_in\">Math</span>.floor((endIndex - startIndex)/<span class=\"number\">2</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr[pivotIndex] != target ? <span class=\"number\">-1</span> : pivotIndex</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(binarySearch([<span class=\"number\">32</span>, <span class=\"number\">80</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>],<span class=\"number\">1</span>))</div></pre></td></tr></table></figure>\n<h3 id=\"2-最大子串\"><a href=\"#2-最大子串\" class=\"headerlink\" title=\"2. 最大子串\"></a>2. 最大子串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxSub</span>(<span class=\"params\">s1, s2</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> max = <span class=\"number\">0</span>, retchars = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; s1.length; index++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> count = <span class=\"number\">0</span>, chars = []; <span class=\"comment\">// 每次遍历都置空</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = index, j = <span class=\"number\">0</span>; j &lt; s2.length; j++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s1char = s1[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s2char = s2[j];</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s1char === s2char)&#123;</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t\t\tchars.push(s1char);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(count) &#123; <span class=\"comment\">// 如果不相同且有相同过则count和chars置空，i复位，j回退一位</span></div><div class=\"line\">\t\t\t\tj--;</div><div class=\"line\">\t\t\t\tcount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\tchars = [];</div><div class=\"line\">\t\t\t\ti = index;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count &gt; max) &#123;</div><div class=\"line\">\t\t\t\tmax = count;</div><div class=\"line\">\t\t\t\tretchars = chars.slice();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> retchars.join(<span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getMaxSub(<span class=\"string\">'abcde'</span>,<span class=\"string\">'rodcdpp'</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"3-二维数组查找\"><a href=\"#3-二维数组查找\" class=\"headerlink\" title=\"3. 二维数组查找\"></a>3. 二维数组查找</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> findTarget = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(arr)</div><div class=\"line\">\t<span class=\"keyword\">var</span> l = arr.length,</div><div class=\"line\">\t\ti = l - <span class=\"number\">1</span>,</div><div class=\"line\">\t\tj = <span class=\"number\">0</span></div><div class=\"line\">\t<span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; arr[i][j]) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i][j] &lt; target) &#123;</div><div class=\"line\">\t\t\tj++</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[i][j] &gt; target) &#123;</div><div class=\"line\">\t\t\ti--</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(i,j)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> dda = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>], [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>], [<span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]]</div><div class=\"line\"><span class=\"built_in\">console</span>.log(findTarget(<span class=\"number\">19</span>, dda))</div></pre></td></tr></table></figure>\n<h2 id=\"杂七杂八\"><a href=\"#杂七杂八\" class=\"headerlink\" title=\"杂七杂八\"></a>杂七杂八</h2><h3 id=\"字符串转数字\"><a href=\"#字符串转数字\" class=\"headerlink\" title=\"字符串转数字\"></a>字符串转数字</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">atoi</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> n.split(<span class=\"string\">\"\"</span>).reduce((prev, curr, index) =&gt; &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(prev,curr)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> prev * <span class=\"number\">10</span> + (curr - <span class=\"string\">'0'</span>)</div><div class=\"line\">\t&#125;, <span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"洗牌\"><a href=\"#洗牌\" class=\"headerlink\" title=\"洗牌\"></a>洗牌</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shuffleFn</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> b = []</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = a.length;i&gt;<span class=\"number\">0</span>;)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * i);</div><div class=\"line\">        b.push(a[index])</div><div class=\"line\">        a[index] = a[--i]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> b</div><div class=\"line\">&#125;</div><div class=\"line\">shuffleFn([<span class=\"number\">12</span>,<span class=\"number\">53</span>,<span class=\"number\">21</span>,<span class=\"number\">6</span>,<span class=\"number\">33</span>,<span class=\"number\">332</span>,<span class=\"number\">422</span>,<span class=\"number\">987</span>,<span class=\"number\">343645</span>,<span class=\"number\">2</span>])</div></pre></td></tr></table></figure>\n<h3 id=\"斐波那契尾递归和缓存版\"><a href=\"#斐波那契尾递归和缓存版\" class=\"headerlink\" title=\"斐波那契尾递归和缓存版\"></a>斐波那契尾递归和缓存版</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 尾递归</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n, ac1 = 1, ac2 = 1</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ac1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>, ac2, ac1 + ac2);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// cache</span></div><div class=\"line\"><span class=\"keyword\">var</span> fib_cache = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = [<span class=\"number\">1</span>, <span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &gt;= cache.length) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = cache.length; i &lt; n; i++) &#123;</div><div class=\"line\">                cache[i] = cache[i - <span class=\"number\">1</span>] + cache[i - <span class=\"number\">2</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> cache[n - <span class=\"number\">1</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">is</span>(<span class=\"params\">obj, type</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === type;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">obj, isDeep</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = obj.slice ? [] : &#123;&#125;, p;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isDeep &amp;&amp; is(obj, <span class=\"string\">'Array'</span>)) <span class=\"keyword\">return</span> obj.slice();</div><div class=\"line\">    <span class=\"keyword\">for</span> (p <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> prop = obj[p];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!obj.hasOwnProperty(p)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (is(prop, <span class=\"string\">'Object'</span>) || is(prop, <span class=\"string\">'Array'</span>)) &#123;</div><div class=\"line\">            ret[p] = copy(prop, isDeep);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ret[p] = prop;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique = <span class=\"built_in\">Array</span>.prototype.unique || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> hash = &#123;&#125;, res = [];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"keyword\">this</span>.length; i &lt; l; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!hash.hasOwnProperty(<span class=\"keyword\">this</span>[i])) &#123;</div><div class=\"line\">                    hash[<span class=\"keyword\">this</span>[i]] = <span class=\"literal\">true</span>;</div><div class=\"line\">                    res.push(<span class=\"keyword\">this</span>[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> res;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"数组取交集\"><a href=\"#数组取交集\" class=\"headerlink\" title=\"数组取交集\"></a>数组取交集</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique = <span class=\"built_in\">Array</span>.prototype.unique || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">var</span> hash = &#123;&#125;, res = [];</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"keyword\">this</span>.length; i &lt; l; i++) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!hash.hasOwnProperty(<span class=\"keyword\">this</span>[i])) &#123;</div><div class=\"line\">                   hash[<span class=\"keyword\">this</span>[i]] = <span class=\"literal\">true</span>;</div><div class=\"line\">                   res.push(<span class=\"keyword\">this</span>[i]);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> res;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>长时间没有接触算法,脑子生锈,写下一些常见的排序、查找算法记在博客上给自己看,代码没有写注释。</p>","more":"<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">32</span>, <span class=\"number\">80</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">2</span>, <span class=\"number\">33</span>, <span class=\"number\">20</span>, <span class=\"number\">55</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1. 冒泡排序\"></a>1. 冒泡排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> l = arr.length;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; l - i - <span class=\"number\">1</span>; j++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> temp = arr[j];</div><div class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort2</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> i = arr.length - <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> position = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">\t\t\t\tposition = j;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> temp = arr[j];</div><div class=\"line\">\t\t\t\tarr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\ti = position;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(bubbleSort(array))</div><div class=\"line\"><span class=\"built_in\">console</span>.log(bubbleSort2(array))</div></pre></td></tr></table></figure>\n<h3 id=\"2-选择排序\"><a href=\"#2-选择排序\" class=\"headerlink\" title=\"2. 选择排序\"></a>2. 选择排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> l = arr.length, minIndex, temp;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; l - <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">\t\tminIndex = i;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; l; j++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;</div><div class=\"line\">\t\t\t\tminIndex = j;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\ttemp = arr[i];</div><div class=\"line\">\t\tarr[i] = arr[minIndex];</div><div class=\"line\">\t\tarr[minIndex] = temp;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(selectionSort(array))</div></pre></td></tr></table></figure>\n<h3 id=\"3-插入排序\"><a href=\"#3-插入排序\" class=\"headerlink\" title=\"3. 插入排序\"></a>3. 插入排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> l = arr.length, preIndex, current;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</div><div class=\"line\">\t\tpreIndex = i - <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcurrent = arr[i];</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</div><div class=\"line\">\t\t\tarr[preIndex + <span class=\"number\">1</span>] = arr[preIndex];</div><div class=\"line\">\t\t\tpreIndex--;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tarr[preIndex + <span class=\"number\">1</span>] = current;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(insertionSort(array))</div></pre></td></tr></table></figure>\n<h3 id=\"4-归并排序\"><a href=\"#4-归并排序\" class=\"headerlink\" title=\"4. 归并排序\"></a>4. 归并排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_merge</span>(<span class=\"params\">left,right</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> res = [],l_i = <span class=\"number\">0</span>, r_i = <span class=\"number\">0</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span>(l_i&lt;left.length &amp;&amp; r_i&lt;right.length)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(left[l_i]&lt;right[r_i])&#123;</div><div class=\"line\">\t\t\t\tres.push(left[l_i++])</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tres.push(right[r_i++])</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> res.concat(left.slice(l_i),right.slice(r_i))</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_ms</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(a.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> a</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(a.length/<span class=\"number\">2</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> left = a.slice(<span class=\"number\">0</span>,pivotIndex)</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> right = a.slice(pivotIndex)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> _merge(_ms(left),_ms(right))</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> _ms(arr)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(mergeSort(array))</div></pre></td></tr></table></figure>\n<h3 id=\"5-快速排序\"><a href=\"#5-快速排序\" class=\"headerlink\" title=\"5. 快速排序\"></a>5. 快速排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr</div><div class=\"line\">\t<span class=\"keyword\">var</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>),</div><div class=\"line\">\t\tpivot = arr.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>],</div><div class=\"line\">\t\tleft = [],</div><div class=\"line\">\t\tright = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">\t\t\tleft.push(arr[i])</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tright.push(arr[i])</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> quickSort(left).concat([pivot], quickSort(right))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(array))</div></pre></td></tr></table></figure>\n<h3 id=\"5-堆排序\"><a href=\"#5-堆排序\" class=\"headerlink\" title=\"5. 堆排序\"></a>5. 堆排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> l</div><div class=\"line\">\t<span class=\"comment\">// 创建大顶堆</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_buildMaxHeap</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t\tl = arr.length</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"built_in\">Math</span>.floor(l / <span class=\"number\">2</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">\t\t\t_heapify(arr, i)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 调整堆</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_heapify</span>(<span class=\"params\">arr, i</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> left = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>,</div><div class=\"line\">\t\t\tright = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>,</div><div class=\"line\">\t\t\tmax = i</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (left &lt; l &amp;&amp; arr[left] &gt; arr[max]) &#123;</div><div class=\"line\">\t\t\tmax = left</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (right &lt; l &amp;&amp; arr[right] &gt; arr[max]) &#123;</div><div class=\"line\">\t\t\tmax = right</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (max != i) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> temp = arr[i]</div><div class=\"line\">\t\t\tarr[i] = arr[max]</div><div class=\"line\">\t\t\tarr[max] = temp</div><div class=\"line\"></div><div class=\"line\">\t\t\t_heapify(arr, max)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t_buildMaxHeap(arr)</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = arr.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> temp = arr[<span class=\"number\">0</span>]</div><div class=\"line\">\t\tarr[<span class=\"number\">0</span>] = arr[i]</div><div class=\"line\">\t\tarr[i] = temp</div><div class=\"line\">\t\tl--</div><div class=\"line\">\t\t_heapify(arr, <span class=\"number\">0</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(heapSort(array))</div></pre></td></tr></table></figure>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h3 id=\"1-二分法\"><a href=\"#1-二分法\" class=\"headerlink\" title=\"1. 二分法\"></a>1. 二分法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span>(<span class=\"params\">arr,target</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> startIndex = <span class=\"number\">0</span>,</div><div class=\"line\">\t\tendIndex = arr.length - <span class=\"number\">1</span>,</div><div class=\"line\">\t\tpivotIndex = <span class=\"built_in\">Math</span>.floor((endIndex - startIndex)/<span class=\"number\">2</span>)</div><div class=\"line\">\t<span class=\"keyword\">while</span>(arr[pivotIndex] !=target &amp;&amp; startIndex &lt; endIndex)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(target &lt; arr[pivotIndex])&#123;</div><div class=\"line\">\t\t\tendIndex = pivotIndex - <span class=\"number\">1</span></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; arr[pivotIndex])&#123;</div><div class=\"line\">\t\t\tstartIndex = pivotIndex + <span class=\"number\">1</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tpivotIndex = <span class=\"built_in\">Math</span>.floor((endIndex - startIndex)/<span class=\"number\">2</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> arr[pivotIndex] != target ? <span class=\"number\">-1</span> : pivotIndex</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(binarySearch([<span class=\"number\">32</span>, <span class=\"number\">80</span>, <span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>],<span class=\"number\">1</span>))</div></pre></td></tr></table></figure>\n<h3 id=\"2-最大子串\"><a href=\"#2-最大子串\" class=\"headerlink\" title=\"2. 最大子串\"></a>2. 最大子串</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxSub</span>(<span class=\"params\">s1, s2</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> max = <span class=\"number\">0</span>, retchars = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index = <span class=\"number\">0</span>; index &lt; s1.length; index++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> count = <span class=\"number\">0</span>, chars = []; <span class=\"comment\">// 每次遍历都置空</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = index, j = <span class=\"number\">0</span>; j &lt; s2.length; j++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s1char = s1[i];</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> s2char = s2[j];</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s1char === s2char)&#123;</div><div class=\"line\">\t\t\t\tcount++;</div><div class=\"line\">\t\t\t\ti++;</div><div class=\"line\">\t\t\t\tchars.push(s1char);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(count) &#123; <span class=\"comment\">// 如果不相同且有相同过则count和chars置空，i复位，j回退一位</span></div><div class=\"line\">\t\t\t\tj--;</div><div class=\"line\">\t\t\t\tcount = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\tchars = [];</div><div class=\"line\">\t\t\t\ti = index;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count &gt; max) &#123;</div><div class=\"line\">\t\t\t\tmax = count;</div><div class=\"line\">\t\t\t\tretchars = chars.slice();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> retchars.join(<span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getMaxSub(<span class=\"string\">'abcde'</span>,<span class=\"string\">'rodcdpp'</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"3-二维数组查找\"><a href=\"#3-二维数组查找\" class=\"headerlink\" title=\"3. 二维数组查找\"></a>3. 二维数组查找</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> findTarget = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target, arr</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(arr)</div><div class=\"line\">\t<span class=\"keyword\">var</span> l = arr.length,</div><div class=\"line\">\t\ti = l - <span class=\"number\">1</span>,</div><div class=\"line\">\t\tj = <span class=\"number\">0</span></div><div class=\"line\">\t<span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; arr[i][j]) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[i][j] &lt; target) &#123;</div><div class=\"line\">\t\t\tj++</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr[i][j] &gt; target) &#123;</div><div class=\"line\">\t\t\ti--</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(i,j)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> dda = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>], [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>], [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>], [<span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]]</div><div class=\"line\"><span class=\"built_in\">console</span>.log(findTarget(<span class=\"number\">19</span>, dda))</div></pre></td></tr></table></figure>\n<h2 id=\"杂七杂八\"><a href=\"#杂七杂八\" class=\"headerlink\" title=\"杂七杂八\"></a>杂七杂八</h2><h3 id=\"字符串转数字\"><a href=\"#字符串转数字\" class=\"headerlink\" title=\"字符串转数字\"></a>字符串转数字</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">atoi</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> n.split(<span class=\"string\">\"\"</span>).reduce((prev, curr, index) =&gt; &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(prev,curr)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> prev * <span class=\"number\">10</span> + (curr - <span class=\"string\">'0'</span>)</div><div class=\"line\">\t&#125;, <span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"洗牌\"><a href=\"#洗牌\" class=\"headerlink\" title=\"洗牌\"></a>洗牌</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shuffleFn</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> b = []</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = a.length;i&gt;<span class=\"number\">0</span>;)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * i);</div><div class=\"line\">        b.push(a[index])</div><div class=\"line\">        a[index] = a[--i]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> b</div><div class=\"line\">&#125;</div><div class=\"line\">shuffleFn([<span class=\"number\">12</span>,<span class=\"number\">53</span>,<span class=\"number\">21</span>,<span class=\"number\">6</span>,<span class=\"number\">33</span>,<span class=\"number\">332</span>,<span class=\"number\">422</span>,<span class=\"number\">987</span>,<span class=\"number\">343645</span>,<span class=\"number\">2</span>])</div></pre></td></tr></table></figure>\n<h3 id=\"斐波那契尾递归和缓存版\"><a href=\"#斐波那契尾递归和缓存版\" class=\"headerlink\" title=\"斐波那契尾递归和缓存版\"></a>斐波那契尾递归和缓存版</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 尾递归</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n, ac1 = 1, ac2 = 1</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ac1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">1</span>, ac2, ac1 + ac2);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// cache</span></div><div class=\"line\"><span class=\"keyword\">var</span> fib_cache = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cache = [<span class=\"number\">1</span>, <span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (n &gt;= cache.length) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = cache.length; i &lt; n; i++) &#123;</div><div class=\"line\">                cache[i] = cache[i - <span class=\"number\">1</span>] + cache[i - <span class=\"number\">2</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> cache[n - <span class=\"number\">1</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">is</span>(<span class=\"params\">obj, type</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === type;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copy</span>(<span class=\"params\">obj, isDeep</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ret = obj.slice ? [] : &#123;&#125;, p;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isDeep &amp;&amp; is(obj, <span class=\"string\">'Array'</span>)) <span class=\"keyword\">return</span> obj.slice();</div><div class=\"line\">    <span class=\"keyword\">for</span> (p <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> prop = obj[p];</div><div class=\"line\">        <span class=\"keyword\">if</span> (!obj.hasOwnProperty(p)) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (is(prop, <span class=\"string\">'Object'</span>) || is(prop, <span class=\"string\">'Array'</span>)) &#123;</div><div class=\"line\">            ret[p] = copy(prop, isDeep);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ret[p] = prop;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique = <span class=\"built_in\">Array</span>.prototype.unique || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> hash = &#123;&#125;, res = [];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"keyword\">this</span>.length; i &lt; l; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!hash.hasOwnProperty(<span class=\"keyword\">this</span>[i])) &#123;</div><div class=\"line\">                    hash[<span class=\"keyword\">this</span>[i]] = <span class=\"literal\">true</span>;</div><div class=\"line\">                    res.push(<span class=\"keyword\">this</span>[i]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> res;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"数组取交集\"><a href=\"#数组取交集\" class=\"headerlink\" title=\"数组取交集\"></a>数组取交集</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique = <span class=\"built_in\">Array</span>.prototype.unique || <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">var</span> hash = &#123;&#125;, res = [];</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"keyword\">this</span>.length; i &lt; l; i++) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (!hash.hasOwnProperty(<span class=\"keyword\">this</span>[i])) &#123;</div><div class=\"line\">                   hash[<span class=\"keyword\">this</span>[i]] = <span class=\"literal\">true</span>;</div><div class=\"line\">                   res.push(<span class=\"keyword\">this</span>[i]);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">return</span> res;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>"},{"title":"深度优先和广度优先遍历DOM树","date":"2017-08-07T06:27:09.000Z","layout":"post","comments":1,"keywords":"算法,dom,BFS,DFS","_content":"## 前言\n最近在看一些关于算法的知识,顺便也用js写了写,好在以前马马虎虎看过算法导论之类之类的书。看到二叉树的遍历后又联想到DOM树,所以试着写了一些代码,权当笔记,供自己参考。\n<!-- more -->\n## 概念\nDOM树的遍历可谓老生常谈了,自定义实现getElementById或者getElementByClassName等方法都需要遍历DOM,当然后来我知道了浏览器是用hash table存储id并映射到DOM的。[深度优先](https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2)、[广度优先](https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2)的概念维基百科上都有,不做解释了。\n拿以下DOM树举例说明\n```html\n<body>\n    <div class=\"wrapper\">\n        <section class=\"header\">\n            <div class=\"logo\"></div>\n        </section>\n        <section class=\"main\">\n            <div class=\"sidebar\">\n                <ul class=\"menu\">\n                    <li>\n                        <a href=\"\"></a>\n                    </li>\n                    <li>\n                        <a href=\"\"></a>\n                    </li>\n                </ul>\n            </div>\n        </section>\n        <section class=\"footer\">\n            <div class=\"copyright\"></div>\n        </section>\n    </div>\n</body>\n```\n1、如果按照广度优先遍历输出结果为:\n```bash\n<body>​…​</body>​\n<div class=​\"wrapper\">​…​</div>​\n<section class=​\"header\">​…​</section>​\n<section class=​\"main\">​…​</section>​\n<section class=​\"footer\">​…​</section>​\n<div class=​\"logo\">​</div>​\n<div class=​\"sidebar\">​…​</div>​\n<div class=​\"copyright\">​</div>​\n<ul class=​\"menu\">​…​</ul>​\n<li>​…​</li>​\n<li>​…​</li>​\n<a href>​</a>​\n<a href>​</a>​\n```\n2、如果按照深度优先遍历出结果为:\n```bash\n<body>​…​</body>​\n<div class=​\"wrapper\">​…​</div>​\n<section class=​\"header\">​…​</section>​\n<div class=​\"logo\">​</div>​\n<section class=​\"main\">​…​</section>​\n<div class=​\"sidebar\">​…​</div>​\n<ul class=​\"menu\">​…​</ul>​\n<li>​…​</li>​\n<a href>​</a>​\n<li>​…​</li>​\n<a href>​</a>​\n<section class=​\"footer\">​…​</section>​\n<div class=​\"copyright\">​</div>​\n```\n## 代码\n```js\n// 广度优先遍历\nfunction traverseByBFS(domRoot){\n    var queue = [domRoot];\n    while(queue.length){\n\t\tvar node = queue.shift();\n        console.log(node);\n        if(!node.children.length){\n            continue;\n        }\n        Array.from(node.children).forEach(x => queue.push(x))\n\t}     \n}\ntraverseByBFS(document.body)  \n// 深度优先遍历\nfunction traverseByDFS(domRoot){\n    var child = domRoot.firstElementChild;\n    while(child){\n        console.log(child);\n\t\ttraverseByDFS(child);\n        child = child.nextElementSibling;\n    }\n}\ntraverseByDFS(document.body) \n```\n## 延伸\n### 计算给定DOM的最大深度\n既然能够用两种方法遍历DOM,那么就应该应用到具体操作中去,比如获取一个dom节点的最大深度,用肉眼观察上面那段html代码可以得知算上body一共有7层。\n废话不多说,上代码\n```js\n             /**\n             * 深度优先遍历计算给定DOM的最大深度,递归实现\n             * 遍历children\n             * @param domRoot\n             * @returns {*}\n             */\n            function getMaxDomTreeDepth_DFS(domRoot) {\n                var childrenDepth = [],\n                    child = domRoot.firstElementChild;\n                // 如果取不到第一个子节点,则返回1\n                if (!child) return 1;\n                while (child) {\n                    console.log(child)\n                    childrenDepth.push(getMaxDomTreeDepth_DFS(child));\n                    child = child.nextElementSibling;\n                }\n                return Math.max(...childrenDepth) + 1;\n            }\n            console.log(getMaxDomTreeDepth_DFS(document.body))\n            /**\n             * 广度优先遍历计算给定DOM的最大深度,队列实现\n             * 按层遍历\n             * @param domRoot\n             * @returns {number}\n             */\n            function getMaxDomTreeDepth_BFS (domRoot){\n                // 定义一个队列\n                var queue = [domRoot];\n                var domDepth = 0;\n                while(queue.length){\n                    ++domDepth;\n                    // 当前队列的长度\n                    var currentSize = queue.length;\n                    // 计数器\n                    var count = 0;\n                    while(count < currentSize){\n                        ++count;\n                        // 出队第一个入队的element\n                        var node = queue.shift();\n                        if(!node.children.length){\n                            continue;\n                        }\n                        // 将子节点入队\n                        Array.from(node.children).forEach(x => queue.push(x))\n                    }\n                }\n                return domDepth;\n            }\n            console.log(getMaxDomTreeDepth_BFS(document.body))            \n```","source":"_posts/2017-08-07-深度优先和广度优先遍历DOM树.md","raw":"---\ntitle: 深度优先和广度优先遍历DOM树\ndate: 2017-08-07 14:27:09\nlayout: post\ncomments: true\ncategories: js\ntags: [算法,dom]\nkeywords: 算法,dom,BFS,DFS\n---\n## 前言\n最近在看一些关于算法的知识,顺便也用js写了写,好在以前马马虎虎看过算法导论之类之类的书。看到二叉树的遍历后又联想到DOM树,所以试着写了一些代码,权当笔记,供自己参考。\n<!-- more -->\n## 概念\nDOM树的遍历可谓老生常谈了,自定义实现getElementById或者getElementByClassName等方法都需要遍历DOM,当然后来我知道了浏览器是用hash table存储id并映射到DOM的。[深度优先](https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2)、[广度优先](https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2)的概念维基百科上都有,不做解释了。\n拿以下DOM树举例说明\n```html\n<body>\n    <div class=\"wrapper\">\n        <section class=\"header\">\n            <div class=\"logo\"></div>\n        </section>\n        <section class=\"main\">\n            <div class=\"sidebar\">\n                <ul class=\"menu\">\n                    <li>\n                        <a href=\"\"></a>\n                    </li>\n                    <li>\n                        <a href=\"\"></a>\n                    </li>\n                </ul>\n            </div>\n        </section>\n        <section class=\"footer\">\n            <div class=\"copyright\"></div>\n        </section>\n    </div>\n</body>\n```\n1、如果按照广度优先遍历输出结果为:\n```bash\n<body>​…​</body>​\n<div class=​\"wrapper\">​…​</div>​\n<section class=​\"header\">​…​</section>​\n<section class=​\"main\">​…​</section>​\n<section class=​\"footer\">​…​</section>​\n<div class=​\"logo\">​</div>​\n<div class=​\"sidebar\">​…​</div>​\n<div class=​\"copyright\">​</div>​\n<ul class=​\"menu\">​…​</ul>​\n<li>​…​</li>​\n<li>​…​</li>​\n<a href>​</a>​\n<a href>​</a>​\n```\n2、如果按照深度优先遍历出结果为:\n```bash\n<body>​…​</body>​\n<div class=​\"wrapper\">​…​</div>​\n<section class=​\"header\">​…​</section>​\n<div class=​\"logo\">​</div>​\n<section class=​\"main\">​…​</section>​\n<div class=​\"sidebar\">​…​</div>​\n<ul class=​\"menu\">​…​</ul>​\n<li>​…​</li>​\n<a href>​</a>​\n<li>​…​</li>​\n<a href>​</a>​\n<section class=​\"footer\">​…​</section>​\n<div class=​\"copyright\">​</div>​\n```\n## 代码\n```js\n// 广度优先遍历\nfunction traverseByBFS(domRoot){\n    var queue = [domRoot];\n    while(queue.length){\n\t\tvar node = queue.shift();\n        console.log(node);\n        if(!node.children.length){\n            continue;\n        }\n        Array.from(node.children).forEach(x => queue.push(x))\n\t}     \n}\ntraverseByBFS(document.body)  \n// 深度优先遍历\nfunction traverseByDFS(domRoot){\n    var child = domRoot.firstElementChild;\n    while(child){\n        console.log(child);\n\t\ttraverseByDFS(child);\n        child = child.nextElementSibling;\n    }\n}\ntraverseByDFS(document.body) \n```\n## 延伸\n### 计算给定DOM的最大深度\n既然能够用两种方法遍历DOM,那么就应该应用到具体操作中去,比如获取一个dom节点的最大深度,用肉眼观察上面那段html代码可以得知算上body一共有7层。\n废话不多说,上代码\n```js\n             /**\n             * 深度优先遍历计算给定DOM的最大深度,递归实现\n             * 遍历children\n             * @param domRoot\n             * @returns {*}\n             */\n            function getMaxDomTreeDepth_DFS(domRoot) {\n                var childrenDepth = [],\n                    child = domRoot.firstElementChild;\n                // 如果取不到第一个子节点,则返回1\n                if (!child) return 1;\n                while (child) {\n                    console.log(child)\n                    childrenDepth.push(getMaxDomTreeDepth_DFS(child));\n                    child = child.nextElementSibling;\n                }\n                return Math.max(...childrenDepth) + 1;\n            }\n            console.log(getMaxDomTreeDepth_DFS(document.body))\n            /**\n             * 广度优先遍历计算给定DOM的最大深度,队列实现\n             * 按层遍历\n             * @param domRoot\n             * @returns {number}\n             */\n            function getMaxDomTreeDepth_BFS (domRoot){\n                // 定义一个队列\n                var queue = [domRoot];\n                var domDepth = 0;\n                while(queue.length){\n                    ++domDepth;\n                    // 当前队列的长度\n                    var currentSize = queue.length;\n                    // 计数器\n                    var count = 0;\n                    while(count < currentSize){\n                        ++count;\n                        // 出队第一个入队的element\n                        var node = queue.shift();\n                        if(!node.children.length){\n                            continue;\n                        }\n                        // 将子节点入队\n                        Array.from(node.children).forEach(x => queue.push(x))\n                    }\n                }\n                return domDepth;\n            }\n            console.log(getMaxDomTreeDepth_BFS(document.body))            \n```","slug":"深度优先和广度优先遍历DOM树","published":1,"updated":"2017-08-07T10:01:13.000Z","photos":[],"link":"","_id":"cj62dox3q0024luszkufg0vnj","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在看一些关于算法的知识,顺便也用js写了写,好在以前马马虎虎看过算法导论之类之类的书。看到二叉树的遍历后又联想到DOM树,所以试着写了一些代码,权当笔记,供自己参考。<br><a id=\"more\"></a></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>DOM树的遍历可谓老生常谈了,自定义实现getElementById或者getElementByClassName等方法都需要遍历DOM,当然后来我知道了浏览器是用hash table存储id并映射到DOM的。<a href=\"https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\" target=\"_blank\" rel=\"external\">深度优先</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\" target=\"_blank\" rel=\"external\">广度优先</a>的概念维基百科上都有,不做解释了。<br>拿以下DOM树举例说明<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"copyright\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>1、如果按照广度优先遍历输出结果为:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;​…​&lt;/body&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"wrapper\"</span>&gt;​…​&lt;/div&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"header\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"main\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"footer\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"logo\"</span>&gt;​&lt;/div&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"sidebar\"</span>&gt;​…​&lt;/div&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"copyright\"</span>&gt;​&lt;/div&gt;​</div><div class=\"line\">&lt;ul class=​<span class=\"string\">\"menu\"</span>&gt;​…​&lt;/ul&gt;​</div><div class=\"line\">&lt;li&gt;​…​&lt;/li&gt;​</div><div class=\"line\">&lt;li&gt;​…​&lt;/li&gt;​</div><div class=\"line\">&lt;a href&gt;​&lt;/a&gt;​</div><div class=\"line\">&lt;a href&gt;​&lt;/a&gt;​</div></pre></td></tr></table></figure></p>\n<p>2、如果按照深度优先遍历出结果为:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;​…​&lt;/body&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"wrapper\"</span>&gt;​…​&lt;/div&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"header\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"logo\"</span>&gt;​&lt;/div&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"main\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"sidebar\"</span>&gt;​…​&lt;/div&gt;​</div><div class=\"line\">&lt;ul class=​<span class=\"string\">\"menu\"</span>&gt;​…​&lt;/ul&gt;​</div><div class=\"line\">&lt;li&gt;​…​&lt;/li&gt;​</div><div class=\"line\">&lt;a href&gt;​&lt;/a&gt;​</div><div class=\"line\">&lt;li&gt;​…​&lt;/li&gt;​</div><div class=\"line\">&lt;a href&gt;​&lt;/a&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"footer\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"copyright\"</span>&gt;​&lt;/div&gt;​</div></pre></td></tr></table></figure></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 广度优先遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverseByBFS</span>(<span class=\"params\">domRoot</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> queue = [domRoot];</div><div class=\"line\">    <span class=\"keyword\">while</span>(queue.length)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> node = queue.shift();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(node);</div><div class=\"line\">        <span class=\"keyword\">if</span>(!node.children.length)&#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">Array</span>.from(node.children).forEach(x =&gt; queue.push(x))</div><div class=\"line\">\t&#125;     </div><div class=\"line\">&#125;</div><div class=\"line\">traverseByBFS(<span class=\"built_in\">document</span>.body)  </div><div class=\"line\"><span class=\"comment\">// 深度优先遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverseByDFS</span>(<span class=\"params\">domRoot</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> child = domRoot.firstElementChild;</div><div class=\"line\">    <span class=\"keyword\">while</span>(child)&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(child);</div><div class=\"line\">\t\ttraverseByDFS(child);</div><div class=\"line\">        child = child.nextElementSibling;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">traverseByDFS(<span class=\"built_in\">document</span>.body)</div></pre></td></tr></table></figure>\n<h2 id=\"延伸\"><a href=\"#延伸\" class=\"headerlink\" title=\"延伸\"></a>延伸</h2><h3 id=\"计算给定DOM的最大深度\"><a href=\"#计算给定DOM的最大深度\" class=\"headerlink\" title=\"计算给定DOM的最大深度\"></a>计算给定DOM的最大深度</h3><p>既然能够用两种方法遍历DOM,那么就应该应用到具体操作中去,比如获取一个dom节点的最大深度,用肉眼观察上面那段html代码可以得知算上body一共有7层。<br>废话不多说,上代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\"> * 深度优先遍历计算给定DOM的最大深度,递归实现</div><div class=\"line\"> * 遍历children</div><div class=\"line\"> * @param domRoot</div><div class=\"line\"> * @returns &#123;*&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxDomTreeDepth_DFS</span>(<span class=\"params\">domRoot</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> childrenDepth = [],</div><div class=\"line\">        child = domRoot.firstElementChild;</div><div class=\"line\">    <span class=\"comment\">// 如果取不到第一个子节点,则返回1</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!child) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (child) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(child)</div><div class=\"line\">        childrenDepth.push(getMaxDomTreeDepth_DFS(child));</div><div class=\"line\">        child = child.nextElementSibling;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(...childrenDepth) + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getMaxDomTreeDepth_DFS(<span class=\"built_in\">document</span>.body))</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 广度优先遍历计算给定DOM的最大深度,队列实现</div><div class=\"line\"> * 按层遍历</div><div class=\"line\"> * @param domRoot</div><div class=\"line\"> * @returns &#123;number&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxDomTreeDepth_BFS</span> (<span class=\"params\">domRoot</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义一个队列</span></div><div class=\"line\">    <span class=\"keyword\">var</span> queue = [domRoot];</div><div class=\"line\">    <span class=\"keyword\">var</span> domDepth = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(queue.length)&#123;</div><div class=\"line\">        ++domDepth;</div><div class=\"line\">        <span class=\"comment\">// 当前队列的长度</span></div><div class=\"line\">        <span class=\"keyword\">var</span> currentSize = queue.length;</div><div class=\"line\">        <span class=\"comment\">// 计数器</span></div><div class=\"line\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(count &lt; currentSize)&#123;</div><div class=\"line\">            ++count;</div><div class=\"line\">            <span class=\"comment\">// 出队第一个入队的element</span></div><div class=\"line\">            <span class=\"keyword\">var</span> node = queue.shift();</div><div class=\"line\">            <span class=\"keyword\">if</span>(!node.children.length)&#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 将子节点入队</span></div><div class=\"line\">            <span class=\"built_in\">Array</span>.from(node.children).forEach(x =&gt; queue.push(x))</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> domDepth;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getMaxDomTreeDepth_BFS(<span class=\"built_in\">document</span>.body))</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在看一些关于算法的知识,顺便也用js写了写,好在以前马马虎虎看过算法导论之类之类的书。看到二叉树的遍历后又联想到DOM树,所以试着写了一些代码,权当笔记,供自己参考。<br>","more":"</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>DOM树的遍历可谓老生常谈了,自定义实现getElementById或者getElementByClassName等方法都需要遍历DOM,当然后来我知道了浏览器是用hash table存储id并映射到DOM的。<a href=\"https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">深度优先</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\">广度优先</a>的概念维基百科上都有,不做解释了。<br>拿以下DOM树举例说明<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrapper\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sidebar\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"menu\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"copyright\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>1、如果按照广度优先遍历输出结果为:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;​…​&lt;/body&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"wrapper\"</span>&gt;​…​&lt;/div&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"header\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"main\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"footer\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"logo\"</span>&gt;​&lt;/div&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"sidebar\"</span>&gt;​…​&lt;/div&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"copyright\"</span>&gt;​&lt;/div&gt;​</div><div class=\"line\">&lt;ul class=​<span class=\"string\">\"menu\"</span>&gt;​…​&lt;/ul&gt;​</div><div class=\"line\">&lt;li&gt;​…​&lt;/li&gt;​</div><div class=\"line\">&lt;li&gt;​…​&lt;/li&gt;​</div><div class=\"line\">&lt;a href&gt;​&lt;/a&gt;​</div><div class=\"line\">&lt;a href&gt;​&lt;/a&gt;​</div></pre></td></tr></table></figure></p>\n<p>2、如果按照深度优先遍历出结果为:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;​…​&lt;/body&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"wrapper\"</span>&gt;​…​&lt;/div&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"header\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"logo\"</span>&gt;​&lt;/div&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"main\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"sidebar\"</span>&gt;​…​&lt;/div&gt;​</div><div class=\"line\">&lt;ul class=​<span class=\"string\">\"menu\"</span>&gt;​…​&lt;/ul&gt;​</div><div class=\"line\">&lt;li&gt;​…​&lt;/li&gt;​</div><div class=\"line\">&lt;a href&gt;​&lt;/a&gt;​</div><div class=\"line\">&lt;li&gt;​…​&lt;/li&gt;​</div><div class=\"line\">&lt;a href&gt;​&lt;/a&gt;​</div><div class=\"line\">&lt;section class=​<span class=\"string\">\"footer\"</span>&gt;​…​&lt;/section&gt;​</div><div class=\"line\">&lt;div class=​<span class=\"string\">\"copyright\"</span>&gt;​&lt;/div&gt;​</div></pre></td></tr></table></figure></p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 广度优先遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverseByBFS</span>(<span class=\"params\">domRoot</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> queue = [domRoot];</div><div class=\"line\">    <span class=\"keyword\">while</span>(queue.length)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> node = queue.shift();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(node);</div><div class=\"line\">        <span class=\"keyword\">if</span>(!node.children.length)&#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">Array</span>.from(node.children).forEach(x =&gt; queue.push(x))</div><div class=\"line\">\t&#125;     </div><div class=\"line\">&#125;</div><div class=\"line\">traverseByBFS(<span class=\"built_in\">document</span>.body)  </div><div class=\"line\"><span class=\"comment\">// 深度优先遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">traverseByDFS</span>(<span class=\"params\">domRoot</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> child = domRoot.firstElementChild;</div><div class=\"line\">    <span class=\"keyword\">while</span>(child)&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(child);</div><div class=\"line\">\t\ttraverseByDFS(child);</div><div class=\"line\">        child = child.nextElementSibling;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">traverseByDFS(<span class=\"built_in\">document</span>.body)</div></pre></td></tr></table></figure>\n<h2 id=\"延伸\"><a href=\"#延伸\" class=\"headerlink\" title=\"延伸\"></a>延伸</h2><h3 id=\"计算给定DOM的最大深度\"><a href=\"#计算给定DOM的最大深度\" class=\"headerlink\" title=\"计算给定DOM的最大深度\"></a>计算给定DOM的最大深度</h3><p>既然能够用两种方法遍历DOM,那么就应该应用到具体操作中去,比如获取一个dom节点的最大深度,用肉眼观察上面那段html代码可以得知算上body一共有7层。<br>废话不多说,上代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\"> * 深度优先遍历计算给定DOM的最大深度,递归实现</div><div class=\"line\"> * 遍历children</div><div class=\"line\"> * @param domRoot</div><div class=\"line\"> * @returns &#123;*&#125;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxDomTreeDepth_DFS</span>(<span class=\"params\">domRoot</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> childrenDepth = [],</div><div class=\"line\">        child = domRoot.firstElementChild;</div><div class=\"line\">    <span class=\"comment\">// 如果取不到第一个子节点,则返回1</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!child) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (child) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(child)</div><div class=\"line\">        childrenDepth.push(getMaxDomTreeDepth_DFS(child));</div><div class=\"line\">        child = child.nextElementSibling;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(...childrenDepth) + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getMaxDomTreeDepth_DFS(<span class=\"built_in\">document</span>.body))</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 广度优先遍历计算给定DOM的最大深度,队列实现</div><div class=\"line\"> * 按层遍历</div><div class=\"line\"> * @param domRoot</div><div class=\"line\"> * @returns &#123;number&#125;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxDomTreeDepth_BFS</span> (<span class=\"params\">domRoot</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义一个队列</span></div><div class=\"line\">    <span class=\"keyword\">var</span> queue = [domRoot];</div><div class=\"line\">    <span class=\"keyword\">var</span> domDepth = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(queue.length)&#123;</div><div class=\"line\">        ++domDepth;</div><div class=\"line\">        <span class=\"comment\">// 当前队列的长度</span></div><div class=\"line\">        <span class=\"keyword\">var</span> currentSize = queue.length;</div><div class=\"line\">        <span class=\"comment\">// 计数器</span></div><div class=\"line\">        <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(count &lt; currentSize)&#123;</div><div class=\"line\">            ++count;</div><div class=\"line\">            <span class=\"comment\">// 出队第一个入队的element</span></div><div class=\"line\">            <span class=\"keyword\">var</span> node = queue.shift();</div><div class=\"line\">            <span class=\"keyword\">if</span>(!node.children.length)&#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 将子节点入队</span></div><div class=\"line\">            <span class=\"built_in\">Array</span>.from(node.children).forEach(x =&gt; queue.push(x))</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> domDepth;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(getMaxDomTreeDepth_BFS(<span class=\"built_in\">document</span>.body))</div></pre></td></tr></table></figure></p>"},{"title":"js实现Math.sqrt开平方根","date":"2017-08-07T10:16:30.000Z","layout":"post","comments":1,"keywords":"算法,数学","_content":"## 前言\n有一次刷脉脉,在匿名区看到一道题目:二分法用实现Math.sqrt函数开平方根。想当年1.414、1.732、2.236、2.449背的滚瓜烂熟,甚至手写过开方计算。\n<!-- more -->\n## 分析\n看到二分法就不由得想到数组的二分查找,在我的这篇博客[二分法查找](http://hughdai.github.io/2017/07/21/%E4%B8%80%E4%BA%9Bjs%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#查找)有代码。\n二分法实现开方也是一样的道理,拿到最小值和最大值,取中间值,判断中间值的平方是否等于目标值,等于则返回,否则继续折半查找一步一步逼近正确值。\n```js\n        function sqrtBisection(n) {\n            if (isNaN(n)) return NaN;\n            if (n === 0 || n === 1) return n;\n            var low = 0,\n                high = n,\n                pivot = (low + high) / 2,\n                lastPivot = pivot;\n            // do while 保证执行一次\n            do {\n                console.log(low, high, pivot, lastPivot)\n                if (Math.pow(pivot, 2) > n) {\n                    high = pivot;\n                } else if (Math.pow(pivot, 2) < n) {\n                    low = pivot;\n                } else {\n                    return pivot;\n                }\n                lastPivot = pivot;\n                pivot = (low + high) / 2;\n            }\n            while (Math.abs(pivot - lastPivot))\n\n            return pivot;\n        }\n```\n然后我又google了一下发现大部分的解决方案都是用的[牛顿迭代](https://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95), 即切线逼近。高中大学学的那点数学知识基本上忘光了,公式看的我眼花,我就不献丑了,反正最后可以得出的方程式是 x = (x + n / x) / 2。\n\n```js\n        function sqrtNewton(n) {\n            if (n < 0) return NaN;\n            if (n === 0 || n === 1) return n\n            var val = n,\n                last;\n            do {\n                console.log(val, last)\n                last = val;\n                val = (val + n / val) / 2;\n            }\n            while (Math.abs(val - last))\n            return val\n        }\n```\n比较两种方法的时间复杂度\n二分法的时间复杂度固然是O(logN),牛顿法的复杂度我就不太明了了。看看两个函数对2000开平方所耗时间吧。\n```bash\nconsole.time('二分法耗时')\nsqrtBisection(2000)\nconsole.timeEnd('二分法耗时')\n\nresult: 二分法耗时: 7.697998046875ms\n\nconsole.time('牛顿法耗时')\nsqrtNewton(2000)\nconsole.timeEnd('牛顿法耗时')\n\nresult: 牛顿法耗时: 1.44580078125ms\n```\n\n\n\n\n","source":"_posts/2017-08-07-js实现Math-sqrt开平方根.md","raw":"---\ntitle: js实现Math.sqrt开平方根\ndate: 2017-08-07 18:16:30\nlayout: post\ncomments: true\ncategories: js\ntags: [算法,数学]\nkeywords: 算法,数学\n---\n## 前言\n有一次刷脉脉,在匿名区看到一道题目:二分法用实现Math.sqrt函数开平方根。想当年1.414、1.732、2.236、2.449背的滚瓜烂熟,甚至手写过开方计算。\n<!-- more -->\n## 分析\n看到二分法就不由得想到数组的二分查找,在我的这篇博客[二分法查找](http://hughdai.github.io/2017/07/21/%E4%B8%80%E4%BA%9Bjs%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#查找)有代码。\n二分法实现开方也是一样的道理,拿到最小值和最大值,取中间值,判断中间值的平方是否等于目标值,等于则返回,否则继续折半查找一步一步逼近正确值。\n```js\n        function sqrtBisection(n) {\n            if (isNaN(n)) return NaN;\n            if (n === 0 || n === 1) return n;\n            var low = 0,\n                high = n,\n                pivot = (low + high) / 2,\n                lastPivot = pivot;\n            // do while 保证执行一次\n            do {\n                console.log(low, high, pivot, lastPivot)\n                if (Math.pow(pivot, 2) > n) {\n                    high = pivot;\n                } else if (Math.pow(pivot, 2) < n) {\n                    low = pivot;\n                } else {\n                    return pivot;\n                }\n                lastPivot = pivot;\n                pivot = (low + high) / 2;\n            }\n            while (Math.abs(pivot - lastPivot))\n\n            return pivot;\n        }\n```\n然后我又google了一下发现大部分的解决方案都是用的[牛顿迭代](https://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95), 即切线逼近。高中大学学的那点数学知识基本上忘光了,公式看的我眼花,我就不献丑了,反正最后可以得出的方程式是 x = (x + n / x) / 2。\n\n```js\n        function sqrtNewton(n) {\n            if (n < 0) return NaN;\n            if (n === 0 || n === 1) return n\n            var val = n,\n                last;\n            do {\n                console.log(val, last)\n                last = val;\n                val = (val + n / val) / 2;\n            }\n            while (Math.abs(val - last))\n            return val\n        }\n```\n比较两种方法的时间复杂度\n二分法的时间复杂度固然是O(logN),牛顿法的复杂度我就不太明了了。看看两个函数对2000开平方所耗时间吧。\n```bash\nconsole.time('二分法耗时')\nsqrtBisection(2000)\nconsole.timeEnd('二分法耗时')\n\nresult: 二分法耗时: 7.697998046875ms\n\nconsole.time('牛顿法耗时')\nsqrtNewton(2000)\nconsole.timeEnd('牛顿法耗时')\n\nresult: 牛顿法耗时: 1.44580078125ms\n```\n\n\n\n\n","slug":"js实现Math-sqrt开平方根","published":1,"updated":"2017-08-07T11:48:29.000Z","photos":[],"link":"","_id":"cj62dox3s0027luszve85i4v6","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有一次刷脉脉,在匿名区看到一道题目:二分法用实现Math.sqrt函数开平方根。想当年1.414、1.732、2.236、2.449背的滚瓜烂熟,甚至手写过开方计算。<br><a id=\"more\"></a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>看到二分法就不由得想到数组的二分查找,在我的这篇博客<a href=\"http://hughdai.github.io/2017/07/21/%E4%B8%80%E4%BA%9Bjs%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#查找\">二分法查找</a>有代码。<br>二分法实现开方也是一样的道理,拿到最小值和最大值,取中间值,判断中间值的平方是否等于目标值,等于则返回,否则继续折半查找一步一步逼近正确值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sqrtBisection</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(n)) <span class=\"keyword\">return</span> <span class=\"literal\">NaN</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span> || n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;</div><div class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>,</div><div class=\"line\">        high = n,</div><div class=\"line\">        pivot = (low + high) / <span class=\"number\">2</span>,</div><div class=\"line\">        lastPivot = pivot;</div><div class=\"line\">    <span class=\"comment\">// do while 保证执行一次</span></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(low, high, pivot, lastPivot)</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.pow(pivot, <span class=\"number\">2</span>) &gt; n) &#123;</div><div class=\"line\">            high = pivot;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.pow(pivot, <span class=\"number\">2</span>) &lt; n) &#123;</div><div class=\"line\">            low = pivot;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> pivot;</div><div class=\"line\">        &#125;</div><div class=\"line\">        lastPivot = pivot;</div><div class=\"line\">        pivot = (low + high) / <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">Math</span>.abs(pivot - lastPivot))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pivot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我又google了一下发现大部分的解决方案都是用的<a href=\"https://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95\" target=\"_blank\" rel=\"external\">牛顿迭代</a>, 即切线逼近。高中大学学的那点数学知识基本上忘光了,公式看的我眼花,我就不献丑了,反正最后可以得出的方程式是 x = (x + n / x) / 2。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sqrtNewton</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NaN</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span> || n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n</div><div class=\"line\">    <span class=\"keyword\">var</span> val = n,</div><div class=\"line\">        last;</div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(val, last)</div><div class=\"line\">        last = val;</div><div class=\"line\">        val = (val + n / val) / <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">Math</span>.abs(val - last))</div><div class=\"line\">    <span class=\"keyword\">return</span> val</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>比较两种方法的时间复杂度<br>二分法的时间复杂度固然是O(logN),牛顿法的复杂度我就不太明了了。看看两个函数对2000开平方所耗时间吧。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.time(<span class=\"string\">'二分法耗时'</span>)</div><div class=\"line\">sqrtBisection(2000)</div><div class=\"line\">console.timeEnd(<span class=\"string\">'二分法耗时'</span>)</div><div class=\"line\"></div><div class=\"line\">result: 二分法耗时: 7.697998046875ms</div><div class=\"line\"></div><div class=\"line\">console.time(<span class=\"string\">'牛顿法耗时'</span>)</div><div class=\"line\">sqrtNewton(2000)</div><div class=\"line\">console.timeEnd(<span class=\"string\">'牛顿法耗时'</span>)</div><div class=\"line\"></div><div class=\"line\">result: 牛顿法耗时: 1.44580078125ms</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有一次刷脉脉,在匿名区看到一道题目:二分法用实现Math.sqrt函数开平方根。想当年1.414、1.732、2.236、2.449背的滚瓜烂熟,甚至手写过开方计算。<br>","more":"</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>看到二分法就不由得想到数组的二分查找,在我的这篇博客<a href=\"http://hughdai.github.io/2017/07/21/%E4%B8%80%E4%BA%9Bjs%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/#查找\">二分法查找</a>有代码。<br>二分法实现开方也是一样的道理,拿到最小值和最大值,取中间值,判断中间值的平方是否等于目标值,等于则返回,否则继续折半查找一步一步逼近正确值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sqrtBisection</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(n)) <span class=\"keyword\">return</span> <span class=\"literal\">NaN</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span> || n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;</div><div class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>,</div><div class=\"line\">        high = n,</div><div class=\"line\">        pivot = (low + high) / <span class=\"number\">2</span>,</div><div class=\"line\">        lastPivot = pivot;</div><div class=\"line\">    <span class=\"comment\">// do while 保证执行一次</span></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(low, high, pivot, lastPivot)</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.pow(pivot, <span class=\"number\">2</span>) &gt; n) &#123;</div><div class=\"line\">            high = pivot;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.pow(pivot, <span class=\"number\">2</span>) &lt; n) &#123;</div><div class=\"line\">            low = pivot;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> pivot;</div><div class=\"line\">        &#125;</div><div class=\"line\">        lastPivot = pivot;</div><div class=\"line\">        pivot = (low + high) / <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">Math</span>.abs(pivot - lastPivot))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> pivot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后我又google了一下发现大部分的解决方案都是用的<a href=\"https://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95\">牛顿迭代</a>, 即切线逼近。高中大学学的那点数学知识基本上忘光了,公式看的我眼花,我就不献丑了,反正最后可以得出的方程式是 x = (x + n / x) / 2。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sqrtNewton</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NaN</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span> || n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n</div><div class=\"line\">    <span class=\"keyword\">var</span> val = n,</div><div class=\"line\">        last;</div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(val, last)</div><div class=\"line\">        last = val;</div><div class=\"line\">        val = (val + n / val) / <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">Math</span>.abs(val - last))</div><div class=\"line\">    <span class=\"keyword\">return</span> val</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>比较两种方法的时间复杂度<br>二分法的时间复杂度固然是O(logN),牛顿法的复杂度我就不太明了了。看看两个函数对2000开平方所耗时间吧。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.time(<span class=\"string\">'二分法耗时'</span>)</div><div class=\"line\">sqrtBisection(2000)</div><div class=\"line\">console.timeEnd(<span class=\"string\">'二分法耗时'</span>)</div><div class=\"line\"></div><div class=\"line\">result: 二分法耗时: 7.697998046875ms</div><div class=\"line\"></div><div class=\"line\">console.time(<span class=\"string\">'牛顿法耗时'</span>)</div><div class=\"line\">sqrtNewton(2000)</div><div class=\"line\">console.timeEnd(<span class=\"string\">'牛顿法耗时'</span>)</div><div class=\"line\"></div><div class=\"line\">result: 牛顿法耗时: 1.44580078125ms</div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj62dowwj0001lusz3lf7p46l","category_id":"cj62dowwr0004lusz9neb9fgd","_id":"cj62dowx1000cluszfltyswie"},{"post_id":"cj62dowwl0002luszzlquh6ej","category_id":"cj62dowwr0004lusz9neb9fgd","_id":"cj62dowx4000hluszce4stnl2"},{"post_id":"cj62dowws0005lusz3fa8fmmk","category_id":"cj62dowx3000flusz96gc7fhm","_id":"cj62dowx5000lluszhv5p29s4"},{"post_id":"cj62dowwt0006lusziy0e9kb8","category_id":"cj62dowx3000flusz96gc7fhm","_id":"cj62dowx6000oluszdojc27al"},{"post_id":"cj62dowwu0008luszqhl6kf8n","category_id":"cj62dowx3000flusz96gc7fhm","_id":"cj62dowx8000sluszqlopo46b"},{"post_id":"cj62dowwz000bluszc2pca0rw","category_id":"cj62dowx3000flusz96gc7fhm","_id":"cj62dowx9000wluszvf52lzns"},{"post_id":"cj62dowx2000eluszwvy9x72w","category_id":"cj62dowx3000flusz96gc7fhm","_id":"cj62dowxa000zlusz2t20zps7"},{"post_id":"cj62dox2s0014luszcagzau5r","category_id":"cj62dowx3000flusz96gc7fhm","_id":"cj62dox33001blusz9lc7e14f"},{"post_id":"cj62dox2v0016luszdzejxbhz","category_id":"cj62dowx3000flusz96gc7fhm","_id":"cj62dox35001eluszptos9v7o"},{"post_id":"cj62dox2z0019lusz9e6oj24z","category_id":"cj62dowwr0004lusz9neb9fgd","_id":"cj62dox39001jluszwy672w01"},{"post_id":"cj62dox39001kluszguafii6z","category_id":"cj62dowwr0004lusz9neb9fgd","_id":"cj62dox3g001qlusz5tisy222"},{"post_id":"cj62dox33001clusz0eu5jb3s","category_id":"cj62dox38001ilusznbsnulor","_id":"cj62dox3i001tluszulam8nc4"},{"post_id":"cj62dox3g001rluszzwrathjf","category_id":"cj62dox3f001pluszx06p3qh2","_id":"cj62dox3o001zluszcopnubey"},{"post_id":"cj62dox36001gluszojfa6604","category_id":"cj62dox3f001pluszx06p3qh2","_id":"cj62dox3q0023luszn7fuf057"},{"post_id":"cj62dox3i001uluszqde6ckst","category_id":"cj62dox3f001pluszx06p3qh2","_id":"cj62dox3s0025lusze2mmnlyr"},{"post_id":"cj62dox3b001lluszoo7d6ebv","category_id":"cj62dox3f001pluszx06p3qh2","_id":"cj62dox410029luszzm7jsy71"},{"post_id":"cj62dox3o0020luszhm5nzqiq","category_id":"cj62dox3f001pluszx06p3qh2","_id":"cj62dox42002alusz4dtot0pq"},{"post_id":"cj62dox3q0024luszkufg0vnj","category_id":"cj62dox3f001pluszx06p3qh2","_id":"cj62dox42002clusz097q5vdh"},{"post_id":"cj62dox3d001olusztps6enbb","category_id":"cj62dox3f001pluszx06p3qh2","_id":"cj62dox43002eluszuzzlwy0c"},{"post_id":"cj62dox3s0027luszve85i4v6","category_id":"cj62dox3f001pluszx06p3qh2","_id":"cj62dox43002hluszth3su5oq"},{"post_id":"cj62dox3m001xlusz2ul2y06j","category_id":"cj62dox410028luszfx2fgk1s","_id":"cj62dox44002jlusz4qcwobb4"}],"PostTag":[{"post_id":"cj62dowwj0001lusz3lf7p46l","tag_id":"cj62dowwn0003luszewybf9le","_id":"cj62dowwz000aluszpa5r7zrc"},{"post_id":"cj62dowwl0002luszzlquh6ej","tag_id":"cj62dowwn0003luszewybf9le","_id":"cj62dowx3000gluszfb38imsm"},{"post_id":"cj62dowws0005lusz3fa8fmmk","tag_id":"cj62dowx1000dluszeqiaubvn","_id":"cj62dowx5000kluszpo07xqt0"},{"post_id":"cj62dowwt0006lusziy0e9kb8","tag_id":"cj62dowx4000iluszc4zweiwj","_id":"cj62dowx8000rluszn653m8k6"},{"post_id":"cj62dowwt0006lusziy0e9kb8","tag_id":"cj62dowx6000nluszy5xiv3tp","_id":"cj62dowx8000uluszafp138h4"},{"post_id":"cj62dowwu0008luszqhl6kf8n","tag_id":"cj62dowx7000qluszgcoe4com","_id":"cj62dowxa000yluszs10g7esa"},{"post_id":"cj62dowwu0008luszqhl6kf8n","tag_id":"cj62dowx6000nluszy5xiv3tp","_id":"cj62dowxa0010lusznlbnm3nd"},{"post_id":"cj62dowwz000bluszc2pca0rw","tag_id":"cj62dowx1000dluszeqiaubvn","_id":"cj62dowxc0012luszaf5c93x6"},{"post_id":"cj62dowx2000eluszwvy9x72w","tag_id":"cj62dowxa0011luszzogg6hyk","_id":"cj62dowxc0013luszohl9ykat"},{"post_id":"cj62dox2z0019lusz9e6oj24z","tag_id":"cj62dowwn0003luszewybf9le","_id":"cj62dox35001dlusz814jhvfq"},{"post_id":"cj62dox2s0014luszcagzau5r","tag_id":"cj62dox2y0018lusz6iuj6gio","_id":"cj62dox38001hluszyl2lcr2k"},{"post_id":"cj62dox2v0016luszdzejxbhz","tag_id":"cj62dox35001fluszp1sbp09a","_id":"cj62dox3c001nlusz3j0kchrx"},{"post_id":"cj62dox33001clusz0eu5jb3s","tag_id":"cj62dox3c001mluszvyjy6x5u","_id":"cj62dox3k001vlusz9za48qvr"},{"post_id":"cj62dox36001gluszojfa6604","tag_id":"cj62dox3i001slusz676zihti","_id":"cj62dox3q0022luszng9m19b5"},{"post_id":"cj62dox39001kluszguafii6z","tag_id":"cj62dox3n001yluszhfmqvo96","_id":"cj62dox43002dlusz9fk0c8pi"},{"post_id":"cj62dox39001kluszguafii6z","tag_id":"cj62dox3s0026lusz99hgalvu","_id":"cj62dox43002fluszctag4cez"},{"post_id":"cj62dox3b001lluszoo7d6ebv","tag_id":"cj62dox3i001slusz676zihti","_id":"cj62dox43002iluszq7c6pze2"},{"post_id":"cj62dox3d001olusztps6enbb","tag_id":"cj62dox3i001slusz676zihti","_id":"cj62dox45002nluszko6n4792"},{"post_id":"cj62dox3d001olusztps6enbb","tag_id":"cj62dox44002klusz0aviwnrk","_id":"cj62dox45002oluszipbkil66"},{"post_id":"cj62dox3d001olusztps6enbb","tag_id":"cj62dox45002llusz4k0gd6hj","_id":"cj62dox46002qluszbffcjizc"},{"post_id":"cj62dox3g001rluszzwrathjf","tag_id":"cj62dox3i001slusz676zihti","_id":"cj62dox46002tlusz9e17kzm2"},{"post_id":"cj62dox3g001rluszzwrathjf","tag_id":"cj62dox45002pluszrg8a6hi9","_id":"cj62dox47002uluszmvfiqzve"},{"post_id":"cj62dox3g001rluszzwrathjf","tag_id":"cj62dox46002rluszx6kedb3o","_id":"cj62dox47002wluszqgx5ppzw"},{"post_id":"cj62dox3i001uluszqde6ckst","tag_id":"cj62dox46002sluszlfep0hz6","_id":"cj62dox48002yluszlpmabm0q"},{"post_id":"cj62dox3i001uluszqde6ckst","tag_id":"cj62dox47002vluszvo6tykyu","_id":"cj62dox49002zlusz6i9srnxo"},{"post_id":"cj62dox3m001xlusz2ul2y06j","tag_id":"cj62dox47002xluszpy61bykq","_id":"cj62dox490031lusz1ywf5n7g"},{"post_id":"cj62dox3o0020luszhm5nzqiq","tag_id":"cj62dox490030luszhd6g4pmq","_id":"cj62dox490033luszq4g52oca"},{"post_id":"cj62dox3q0024luszkufg0vnj","tag_id":"cj62dox490030luszhd6g4pmq","_id":"cj62dox4b0036lusz5im1gn8x"},{"post_id":"cj62dox3q0024luszkufg0vnj","tag_id":"cj62dox4a0034luszots9btv9","_id":"cj62dox4b0037luszw07ryfv2"},{"post_id":"cj62dox3s0027luszve85i4v6","tag_id":"cj62dox490030luszhd6g4pmq","_id":"cj62dox4c0039luszk7eojaws"},{"post_id":"cj62dox3s0027luszve85i4v6","tag_id":"cj62dox4b0038luszaq8dse1i","_id":"cj62dox4c003aluszh8jzemgv"}],"Tag":[{"name":"animation","_id":"cj62dowwn0003luszewybf9le"},{"name":"Event","_id":"cj62dowx1000dluszeqiaubvn"},{"name":"柯里化","_id":"cj62dowx4000iluszc4zweiwj"},{"name":"面向对象","_id":"cj62dowx6000nluszy5xiv3tp"},{"name":"this","_id":"cj62dowx7000qluszgcoe4com"},{"name":"ajax","_id":"cj62dowxa0011luszzogg6hyk"},{"name":"跨域","_id":"cj62dox2y0018lusz6iuj6gio"},{"name":"依赖注入","_id":"cj62dox35001fluszp1sbp09a"},{"name":"Git","_id":"cj62dox3c001mluszvyjy6x5u"},{"name":"js","_id":"cj62dox3i001slusz676zihti"},{"name":"CSS","_id":"cj62dox3n001yluszhfmqvo96"},{"name":"BEM","_id":"cj62dox3s0026lusz99hgalvu"},{"name":"date","_id":"cj62dox44002klusz0aviwnrk"},{"name":"add","_id":"cj62dox45002llusz4k0gd6hj"},{"name":"promise","_id":"cj62dox45002pluszrg8a6hi9"},{"name":"polyfill","_id":"cj62dox46002rluszx6kedb3o"},{"name":"font-face","_id":"cj62dox46002sluszlfep0hz6"},{"name":"font-spider","_id":"cj62dox47002vluszvo6tykyu"},{"name":"css","_id":"cj62dox47002xluszpy61bykq"},{"name":"算法","_id":"cj62dox490030luszhd6g4pmq"},{"name":"dom","_id":"cj62dox4a0034luszots9btv9"},{"name":"数学","_id":"cj62dox4b0038luszaq8dse1i"}]}}